// VaderImmortal_1 (236956) SDK

#ifdef _MSC_VER
	#pragma pack(push, 0x8)
#endif

#include "../SDK.hpp"

namespace SDK
{
//---------------------------------------------------------------------------
//Functions
//---------------------------------------------------------------------------

// Function WKND.AIDebugRenderer.GetAIDebugRender
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAIDebugRenderer::STATIC_GetAIDebugRender()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIDebugRenderer.GetAIDebugRender");

	UAIDebugRenderer_GetAIDebugRender_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGrabberComponent.Update
// (Native, Public)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDGrabberComponent::Update(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabberComponent.Update");

	UWKNDGrabberComponent_Update_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGrabberComponent.SetHoldsLoosely
// (Final, Native, Public)
// Parameters:
// bool                           Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDGrabberComponent::SetHoldsLoosely(bool Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabberComponent.SetHoldsLoosely");

	UWKNDGrabberComponent_SetHoldsLoosely_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGrabberComponent.SetHandType
// (Final, Native, Public)
// Parameters:
// EGrabHand                      Type                           (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDGrabberComponent::SetHandType(EGrabHand Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabberComponent.SetHandType");

	UWKNDGrabberComponent_SetHandType_Params params;
	params.Type = Type;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGrabberComponent.Reset
// (Native, Public)

void UWKNDGrabberComponent::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabberComponent.Reset");

	UWKNDGrabberComponent_Reset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGrabberComponent.IsInState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGrabbingState                 TestState                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDGrabberComponent::IsInState(EGrabbingState TestState)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabberComponent.IsInState");

	UWKNDGrabberComponent_IsInState_Params params;
	params.TestState = TestState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGrabberComponent.IsHoldingSomething
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDGrabberComponent::IsHoldingSomething()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabberComponent.IsHoldingSomething");

	UWKNDGrabberComponent_IsHoldingSomething_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGrabberComponent.HandType
// (Final, Native, Public)
// Parameters:
// EGrabHand                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EGrabHand UWKNDGrabberComponent::HandType()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabberComponent.HandType");

	UWKNDGrabberComponent_HandType_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGrabberComponent.Grab
// (Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  actorToGrab                    (Parm, ZeroConstructor, IsPlainOldData)
// class URPOCGrabLocatorComponent* Locator                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDGrabberComponent::Grab(class AActor* actorToGrab, class URPOCGrabLocatorComponent* Locator)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabberComponent.Grab");

	UWKNDGrabberComponent_Grab_Params params;
	params.actorToGrab = actorToGrab;
	params.Locator = Locator;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGrabberComponent.GetHoldState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGrabbingState                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EGrabbingState UWKNDGrabberComponent::GetHoldState()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabberComponent.GetHoldState");

	UWKNDGrabberComponent_GetHoldState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGrabberComponent.GetHeldObject
// (Final, Native, Public)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* UWKNDGrabberComponent::GetHeldObject()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabberComponent.GetHeldObject");

	UWKNDGrabberComponent_GetHeldObject_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGrabberComponent.GetGrabLocator
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class URPOCGrabLocatorComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class URPOCGrabLocatorComponent* UWKNDGrabberComponent::GetGrabLocator()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabberComponent.GetGrabLocator");

	UWKNDGrabberComponent_GetGrabLocator_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGrabberComponent.GetGrabbingTime
// (Final, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UWKNDGrabberComponent::GetGrabbingTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabberComponent.GetGrabbingTime");

	UWKNDGrabberComponent_GetGrabbingTime_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGrabberComponent.Drop
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           GoIntoRecoveryState            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           preventImpulse                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDGrabberComponent::Drop(bool GoIntoRecoveryState, bool preventImpulse)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabberComponent.Drop");

	UWKNDGrabberComponent_Drop_Params params;
	params.GoIntoRecoveryState = GoIntoRecoveryState;
	params.preventImpulse = preventImpulse;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGrabberComponent.Debugging
// (Final, Native, Static, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDGrabberComponent::STATIC_Debugging()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabberComponent.Debugging");

	UWKNDGrabberComponent_Debugging_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIGrabberComponent.Drop
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           GoIntoRecoveryState            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           preventImpulse                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAIGrabberComponent::Drop(bool GoIntoRecoveryState, bool preventImpulse)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIGrabberComponent.Drop");

	UAIGrabberComponent_Drop_Params params;
	params.GoIntoRecoveryState = GoIntoRecoveryState;
	params.preventImpulse = preventImpulse;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIInstructionComponent.SetSignal
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   SignalName                     (Parm, ZeroConstructor, IsPlainOldData)

void UAIInstructionComponent::SetSignal(const struct FName& SignalName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.SetSignal");

	UAIInstructionComponent_SetSignal_Params params;
	params.SignalName = SignalName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.AIInstructionComponent.RunInstructions
// (Final, Native, Public, BlueprintCallable)

void UAIInstructionComponent::RunInstructions()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.RunInstructions");

	UAIInstructionComponent_RunInstructions_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.AIInstructionComponent.InternalEnqueueStatusCheckInstruction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EAIStatusCheckType             StatusCheck                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FLatentActionInfo       LatentInfo                     (Parm)

void UAIInstructionComponent::InternalEnqueueStatusCheckInstruction(EAIStatusCheckType StatusCheck, const struct FLatentActionInfo& LatentInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.InternalEnqueueStatusCheckInstruction");

	UAIInstructionComponent_InternalEnqueueStatusCheckInstruction_Params params;
	params.StatusCheck = StatusCheck;
	params.LatentInfo = LatentInfo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.AIInstructionComponent.InternalEnqueueCallbackInstruction
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAIInstructionComponent* InstructionComp                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FLatentActionInfo       LatentInfo                     (Parm)

void UAIInstructionComponent::STATIC_InternalEnqueueCallbackInstruction(class UAIInstructionComponent* InstructionComp, const struct FLatentActionInfo& LatentInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.InternalEnqueueCallbackInstruction");

	UAIInstructionComponent_InternalEnqueueCallbackInstruction_Params params;
	params.InstructionComp = InstructionComp;
	params.LatentInfo = LatentInfo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.AIInstructionComponent.ImmediateStopMontage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*            Montage                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendTime                      (Parm, ZeroConstructor, IsPlainOldData)

void UAIInstructionComponent::ImmediateStopMontage(class UAnimMontage* Montage, float BlendTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.ImmediateStopMontage");

	UAIInstructionComponent_ImmediateStopMontage_Params params;
	params.Montage = Montage;
	params.BlendTime = BlendTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.AIInstructionComponent.HasInstructions
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAIInstructionComponent::HasInstructions()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.HasInstructions");

	UAIInstructionComponent_HasInstructions_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIInstructionComponent.GetInteractionStartedName
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName UAIInstructionComponent::GetInteractionStartedName()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.GetInteractionStartedName");

	UAIInstructionComponent_GetInteractionStartedName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIInstructionComponent.GetInteractionFailedName
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName UAIInstructionComponent::GetInteractionFailedName()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.GetInteractionFailedName");

	UAIInstructionComponent_GetInteractionFailedName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIInstructionComponent.GetInteractionCompleteName
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName UAIInstructionComponent::GetInteractionCompleteName()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.GetInteractionCompleteName");

	UAIInstructionComponent_GetInteractionCompleteName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIInstructionComponent.GetFlyCompleteName
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName UAIInstructionComponent::GetFlyCompleteName()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.GetFlyCompleteName");

	UAIInstructionComponent_GetFlyCompleteName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIInstructionComponent.ForgetAllInstructions
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAIInstructionComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAIInstructionComponent* UAIInstructionComponent::ForgetAllInstructions()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.ForgetAllInstructions");

	UAIInstructionComponent_ForgetAllInstructions_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIInstructionComponent.FeetToRoot
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 feetVector                     (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector UAIInstructionComponent::FeetToRoot(const struct FVector& feetVector)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.FeetToRoot");

	UAIInstructionComponent_FeetToRoot_Params params;
	params.feetVector = feetVector;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIInstructionComponent.EnqueueWaitOnSignalInstruction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   SignalName                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ClearSignalAtStart             (Parm, ZeroConstructor, IsPlainOldData)
// class UAIInstructionComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAIInstructionComponent* UAIInstructionComponent::EnqueueWaitOnSignalInstruction(const struct FName& SignalName, bool ClearSignalAtStart)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.EnqueueWaitOnSignalInstruction");

	UAIInstructionComponent_EnqueueWaitOnSignalInstruction_Params params;
	params.SignalName = SignalName;
	params.ClearSignalAtStart = ClearSignalAtStart;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIInstructionComponent.EnqueueWaitOnCountdownTimerInstruction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   TimerName                      (Parm, ZeroConstructor, IsPlainOldData)
// class UAIInstructionComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAIInstructionComponent* UAIInstructionComponent::EnqueueWaitOnCountdownTimerInstruction(const struct FName& TimerName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.EnqueueWaitOnCountdownTimerInstruction");

	UAIInstructionComponent_EnqueueWaitOnCountdownTimerInstruction_Params params;
	params.TimerName = TimerName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIInstructionComponent.EnqueueWaitInstruction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           WaitForever                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          WaitSeconds                    (Parm, ZeroConstructor, IsPlainOldData)
// class UAIInstructionComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAIInstructionComponent* UAIInstructionComponent::EnqueueWaitInstruction(bool WaitForever, float WaitSeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.EnqueueWaitInstruction");

	UAIInstructionComponent_EnqueueWaitInstruction_Params params;
	params.WaitForever = WaitForever;
	params.WaitSeconds = WaitSeconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIInstructionComponent.EnqueueWaitForMontageToFinishInstruction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*            Montage                        (Parm, ZeroConstructor, IsPlainOldData)
// class UAIInstructionComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAIInstructionComponent* UAIInstructionComponent::EnqueueWaitForMontageToFinishInstruction(class UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.EnqueueWaitForMontageToFinishInstruction");

	UAIInstructionComponent_EnqueueWaitForMontageToFinishInstruction_Params params;
	params.Montage = Montage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIInstructionComponent.EnqueueWaitForDialogueToFinishInstruction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAIInstructionComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAIInstructionComponent* UAIInstructionComponent::EnqueueWaitForDialogueToFinishInstruction()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.EnqueueWaitForDialogueToFinishInstruction");

	UAIInstructionComponent_EnqueueWaitForDialogueToFinishInstruction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIInstructionComponent.EnqueueUseInteractableInstruction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAIInstructionComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAIInstructionComponent* UAIInstructionComponent::EnqueueUseInteractableInstruction()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.EnqueueUseInteractableInstruction");

	UAIInstructionComponent_EnqueueUseInteractableInstruction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIInstructionComponent.EnqueueUberMove
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Destination                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FRotator                Facing                         (Parm, IsPlainOldData)
// bool                           alignOnComplete                (Parm, ZeroConstructor, IsPlainOldData)
// float                          ThresholdDistance              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ThresholdAngle                 (Parm, ZeroConstructor, IsPlainOldData)
// EAIMovementOverride            moveOverride                   (Parm, ZeroConstructor, IsPlainOldData)
// EBuddyAIMovementType           moveType                       (Parm, ZeroConstructor, IsPlainOldData)
// class UAIInstructionComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAIInstructionComponent* UAIInstructionComponent::EnqueueUberMove(const struct FVector& Destination, const struct FRotator& Facing, bool alignOnComplete, float ThresholdDistance, float ThresholdAngle, EAIMovementOverride moveOverride, EBuddyAIMovementType moveType)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.EnqueueUberMove");

	UAIInstructionComponent_EnqueueUberMove_Params params;
	params.Destination = Destination;
	params.Facing = Facing;
	params.alignOnComplete = alignOnComplete;
	params.ThresholdDistance = ThresholdDistance;
	params.ThresholdAngle = ThresholdAngle;
	params.moveOverride = moveOverride;
	params.moveType = moveType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIInstructionComponent.EnqueueTurnToOrientationInstruction
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                Orientation                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          ThresholdAngle                 (Parm, ZeroConstructor, IsPlainOldData)
// class UAIInstructionComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAIInstructionComponent* UAIInstructionComponent::EnqueueTurnToOrientationInstruction(const struct FRotator& Orientation, float ThresholdAngle)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.EnqueueTurnToOrientationInstruction");

	UAIInstructionComponent_EnqueueTurnToOrientationInstruction_Params params;
	params.Orientation = Orientation;
	params.ThresholdAngle = ThresholdAngle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIInstructionComponent.EnqueueTurnToInstruction
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Target                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          ThresholdAngle                 (Parm, ZeroConstructor, IsPlainOldData)
// class UAIInstructionComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAIInstructionComponent* UAIInstructionComponent::EnqueueTurnToInstruction(const struct FVector& Target, float ThresholdAngle)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.EnqueueTurnToInstruction");

	UAIInstructionComponent_EnqueueTurnToInstruction_Params params;
	params.Target = Target;
	params.ThresholdAngle = ThresholdAngle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIInstructionComponent.EnqueueThrowMontageInstruction
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 toThrow                        (Parm, IsPlainOldData)
// class UAnimMontage*            Montage                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          Speed                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          longRange                      (Parm, ZeroConstructor, IsPlainOldData)
// class UAIInstructionComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAIInstructionComponent* UAIInstructionComponent::EnqueueThrowMontageInstruction(const struct FVector& toThrow, class UAnimMontage* Montage, float Speed, float longRange)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.EnqueueThrowMontageInstruction");

	UAIInstructionComponent_EnqueueThrowMontageInstruction_Params params;
	params.toThrow = toThrow;
	params.Montage = Montage;
	params.Speed = Speed;
	params.longRange = longRange;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIInstructionComponent.EnqueueThrowImmediateInstruction
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 toThrow                        (Parm, IsPlainOldData)
// float                          Speed                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          longRange                      (Parm, ZeroConstructor, IsPlainOldData)
// class UAIInstructionComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAIInstructionComponent* UAIInstructionComponent::EnqueueThrowImmediateInstruction(const struct FVector& toThrow, float Speed, float longRange)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.EnqueueThrowImmediateInstruction");

	UAIInstructionComponent_EnqueueThrowImmediateInstruction_Params params;
	params.toThrow = toThrow;
	params.Speed = Speed;
	params.longRange = longRange;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIInstructionComponent.EnqueueThrowHeldPickupInstruction
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 toThrow                        (Parm, IsPlainOldData)
// float                          Speed                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           rotateFirst                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           waitForComplete                (Parm, ZeroConstructor, IsPlainOldData)
// EAIThrowSelection              throwOverride                  (Parm, ZeroConstructor, IsPlainOldData)
// class UAIInstructionComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAIInstructionComponent* UAIInstructionComponent::EnqueueThrowHeldPickupInstruction(const struct FVector& toThrow, float Speed, bool rotateFirst, bool waitForComplete, EAIThrowSelection throwOverride)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.EnqueueThrowHeldPickupInstruction");

	UAIInstructionComponent_EnqueueThrowHeldPickupInstruction_Params params;
	params.toThrow = toThrow;
	params.Speed = Speed;
	params.rotateFirst = rotateFirst;
	params.waitForComplete = waitForComplete;
	params.throwOverride = throwOverride;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIInstructionComponent.EnqueueStartMontageInstruction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*            Montage                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           stopOnCleanup                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   StartingSection                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           overrideBlend                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          blendOverride                  (Parm, ZeroConstructor, IsPlainOldData)
// class UAIInstructionComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAIInstructionComponent* UAIInstructionComponent::EnqueueStartMontageInstruction(class UAnimMontage* Montage, bool stopOnCleanup, const struct FName& StartingSection, bool overrideBlend, float blendOverride)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.EnqueueStartMontageInstruction");

	UAIInstructionComponent_EnqueueStartMontageInstruction_Params params;
	params.Montage = Montage;
	params.stopOnCleanup = stopOnCleanup;
	params.StartingSection = StartingSection;
	params.overrideBlend = overrideBlend;
	params.blendOverride = blendOverride;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIInstructionComponent.EnqueueStartDialogueInstruction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USoundBase*              Sound                          (Parm, ZeroConstructor, IsPlainOldData)
// class UAIInstructionComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAIInstructionComponent* UAIInstructionComponent::EnqueueStartDialogueInstruction(class USoundBase* Sound)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.EnqueueStartDialogueInstruction");

	UAIInstructionComponent_EnqueueStartDialogueInstruction_Params params;
	params.Sound = Sound;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIInstructionComponent.EnqueueStartCountdownTimerInstruction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Seconds                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   TimerName                      (Parm, ZeroConstructor, IsPlainOldData)
// class UAIInstructionComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAIInstructionComponent* UAIInstructionComponent::EnqueueStartCountdownTimerInstruction(float Seconds, const struct FName& TimerName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.EnqueueStartCountdownTimerInstruction");

	UAIInstructionComponent_EnqueueStartCountdownTimerInstruction_Params params;
	params.Seconds = Seconds;
	params.TimerName = TimerName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIInstructionComponent.EnqueueShootAtActorSideInstruction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Target                         (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EActorSide>        WhichSide                      (Parm, ZeroConstructor, IsPlainOldData)
// class UAIInstructionComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAIInstructionComponent* UAIInstructionComponent::EnqueueShootAtActorSideInstruction(class AActor* Target, TEnumAsByte<EActorSide> WhichSide)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.EnqueueShootAtActorSideInstruction");

	UAIInstructionComponent_EnqueueShootAtActorSideInstruction_Params params;
	params.Target = Target;
	params.WhichSide = WhichSide;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIInstructionComponent.EnqueueShootAtActorInstruction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Target                         (Parm, ZeroConstructor, IsPlainOldData)
// class UAIInstructionComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAIInstructionComponent* UAIInstructionComponent::EnqueueShootAtActorInstruction(class AActor* Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.EnqueueShootAtActorInstruction");

	UAIInstructionComponent_EnqueueShootAtActorInstruction_Params params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIInstructionComponent.EnqueueRotateOnSpotInstruction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          angleToRotate                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          rotateDuration                 (Parm, ZeroConstructor, IsPlainOldData)
// class UAIInstructionComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAIInstructionComponent* UAIInstructionComponent::EnqueueRotateOnSpotInstruction(float angleToRotate, float rotateDuration)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.EnqueueRotateOnSpotInstruction");

	UAIInstructionComponent_EnqueueRotateOnSpotInstruction_Params params;
	params.angleToRotate = angleToRotate;
	params.rotateDuration = rotateDuration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIInstructionComponent.EnqueueResumeMontageInstruction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*            Montage                        (Parm, ZeroConstructor, IsPlainOldData)
// class UAIInstructionComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAIInstructionComponent* UAIInstructionComponent::EnqueueResumeMontageInstruction(class UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.EnqueueResumeMontageInstruction");

	UAIInstructionComponent_EnqueueResumeMontageInstruction_Params params;
	params.Montage = Montage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIInstructionComponent.EnqueueReleaseActorInstruction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAIInstructionComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAIInstructionComponent* UAIInstructionComponent::EnqueueReleaseActorInstruction()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.EnqueueReleaseActorInstruction");

	UAIInstructionComponent_EnqueueReleaseActorInstruction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIInstructionComponent.EnqueuePlayMontageInstruction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*            Montage                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   StartingSection                (Parm, ZeroConstructor, IsPlainOldData)
// class UAIInstructionComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAIInstructionComponent* UAIInstructionComponent::EnqueuePlayMontageInstruction(class UAnimMontage* Montage, const struct FName& StartingSection)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.EnqueuePlayMontageInstruction");

	UAIInstructionComponent_EnqueuePlayMontageInstruction_Params params;
	params.Montage = Montage;
	params.StartingSection = StartingSection;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIInstructionComponent.EnqueuePlayDialogueInstruction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USoundBase*              Sound                          (Parm, ZeroConstructor, IsPlainOldData)
// class UAIInstructionComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAIInstructionComponent* UAIInstructionComponent::EnqueuePlayDialogueInstruction(class USoundBase* Sound)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.EnqueuePlayDialogueInstruction");

	UAIInstructionComponent_EnqueuePlayDialogueInstruction_Params params;
	params.Sound = Sound;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIInstructionComponent.EnqueuePauseMontageInstruction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*            Montage                        (Parm, ZeroConstructor, IsPlainOldData)
// class UAIInstructionComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAIInstructionComponent* UAIInstructionComponent::EnqueuePauseMontageInstruction(class UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.EnqueuePauseMontageInstruction");

	UAIInstructionComponent_EnqueuePauseMontageInstruction_Params params;
	params.Montage = Montage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIInstructionComponent.EnqueueMoveToRunThresholdInstruction
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Target                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          ThresholdDistance              (Parm, ZeroConstructor, IsPlainOldData)
// float                          RunThresholdDistance           (Parm, ZeroConstructor, IsPlainOldData)
// class UAIInstructionComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAIInstructionComponent* UAIInstructionComponent::EnqueueMoveToRunThresholdInstruction(const struct FVector& Target, float ThresholdDistance, float RunThresholdDistance)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.EnqueueMoveToRunThresholdInstruction");

	UAIInstructionComponent_EnqueueMoveToRunThresholdInstruction_Params params;
	params.Target = Target;
	params.ThresholdDistance = ThresholdDistance;
	params.RunThresholdDistance = RunThresholdDistance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIInstructionComponent.EnqueueMoveToInstruction
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Target                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          ThresholdDistance              (Parm, ZeroConstructor, IsPlainOldData)
// EBuddyAIMovementType           MovementType                   (Parm, ZeroConstructor, IsPlainOldData)
// class UAIInstructionComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAIInstructionComponent* UAIInstructionComponent::EnqueueMoveToInstruction(const struct FVector& Target, float ThresholdDistance, EBuddyAIMovementType MovementType)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.EnqueueMoveToInstruction");

	UAIInstructionComponent_EnqueueMoveToInstruction_Params params;
	params.Target = Target;
	params.ThresholdDistance = ThresholdDistance;
	params.MovementType = MovementType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIInstructionComponent.EnqueueMoveAndFaceInstruction
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Target                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FRotator                Facing                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          ThresholdDistance              (Parm, ZeroConstructor, IsPlainOldData)
// class UAIInstructionComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAIInstructionComponent* UAIInstructionComponent::EnqueueMoveAndFaceInstruction(const struct FVector& Target, const struct FRotator& Facing, float ThresholdDistance)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.EnqueueMoveAndFaceInstruction");

	UAIInstructionComponent_EnqueueMoveAndFaceInstruction_Params params;
	params.Target = Target;
	params.Facing = Facing;
	params.ThresholdDistance = ThresholdDistance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIInstructionComponent.EnqueueMoveAndAlignToInstruction
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Target                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FRotator                Orientation                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// EBuddyAIMovementType           MovementType                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          LerpTime                       (Parm, ZeroConstructor, IsPlainOldData)
// EAIAlignComponent              alignComponent                 (Parm, ZeroConstructor, IsPlainOldData)
// class UAIInstructionComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAIInstructionComponent* UAIInstructionComponent::EnqueueMoveAndAlignToInstruction(const struct FVector& Target, const struct FRotator& Orientation, EBuddyAIMovementType MovementType, float LerpTime, EAIAlignComponent alignComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.EnqueueMoveAndAlignToInstruction");

	UAIInstructionComponent_EnqueueMoveAndAlignToInstruction_Params params;
	params.Target = Target;
	params.Orientation = Orientation;
	params.MovementType = MovementType;
	params.LerpTime = LerpTime;
	params.alignComponent = alignComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIInstructionComponent.EnqueueJumpToMontageSectionInstruction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*            Montage                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   SectionName                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           JumpToEnd                      (Parm, ZeroConstructor, IsPlainOldData)
// class UAIInstructionComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAIInstructionComponent* UAIInstructionComponent::EnqueueJumpToMontageSectionInstruction(class UAnimMontage* Montage, const struct FName& SectionName, bool JumpToEnd)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.EnqueueJumpToMontageSectionInstruction");

	UAIInstructionComponent_EnqueueJumpToMontageSectionInstruction_Params params;
	params.Montage = Montage;
	params.SectionName = SectionName;
	params.JumpToEnd = JumpToEnd;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIInstructionComponent.EnqueueGrabPickupInstruction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  toGrab                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           moveTo                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           rotateTo                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           waitForComplete                (Parm, ZeroConstructor, IsPlainOldData)
// class UAIInstructionComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAIInstructionComponent* UAIInstructionComponent::EnqueueGrabPickupInstruction(class AActor* toGrab, bool moveTo, bool rotateTo, bool waitForComplete)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.EnqueueGrabPickupInstruction");

	UAIInstructionComponent_EnqueueGrabPickupInstruction_Params params;
	params.toGrab = toGrab;
	params.moveTo = moveTo;
	params.rotateTo = rotateTo;
	params.waitForComplete = waitForComplete;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIInstructionComponent.EnqueueGrabActorInstruction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  toGrab                         (Parm, ZeroConstructor, IsPlainOldData)
// class UAIInstructionComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAIInstructionComponent* UAIInstructionComponent::EnqueueGrabActorInstruction(class AActor* toGrab)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.EnqueueGrabActorInstruction");

	UAIInstructionComponent_EnqueueGrabActorInstruction_Params params;
	params.toGrab = toGrab;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIInstructionComponent.EnqueueFlyToInstruction
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Destination                    (Parm, IsPlainOldData)
// int                            Exp                            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           waitForComplete                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceFlyStraight              (Parm, ZeroConstructor, IsPlainOldData)
// class UAIInstructionComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAIInstructionComponent* UAIInstructionComponent::EnqueueFlyToInstruction(const struct FVector& Destination, int Exp, bool waitForComplete, bool bForceFlyStraight)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.EnqueueFlyToInstruction");

	UAIInstructionComponent_EnqueueFlyToInstruction_Params params;
	params.Destination = Destination;
	params.Exp = Exp;
	params.waitForComplete = waitForComplete;
	params.bForceFlyStraight = bForceFlyStraight;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIInstructionComponent.EnqueueFlyThroughPlayerSideInstruction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<EActorSide>        WhichSide                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSmoothEnd                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          SideDistance                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          SideHeightRatio                (Parm, ZeroConstructor, IsPlainOldData)
// float                          EndDistance                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          EndHeight                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FMovementParams         MovementParams                 (Parm, IsPlainOldData)
// class UAIInstructionComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAIInstructionComponent* UAIInstructionComponent::EnqueueFlyThroughPlayerSideInstruction(TEnumAsByte<EActorSide> WhichSide, bool bSmoothEnd, float SideDistance, float SideHeightRatio, float EndDistance, float EndHeight, const struct FMovementParams& MovementParams)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.EnqueueFlyThroughPlayerSideInstruction");

	UAIInstructionComponent_EnqueueFlyThroughPlayerSideInstruction_Params params;
	params.WhichSide = WhichSide;
	params.bSmoothEnd = bSmoothEnd;
	params.SideDistance = SideDistance;
	params.SideHeightRatio = SideHeightRatio;
	params.EndDistance = EndDistance;
	params.EndHeight = EndHeight;
	params.MovementParams = MovementParams;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIInstructionComponent.EnqueueCompositeMoveInstruction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class ATargetPoint*>    route                          (Parm, ZeroConstructor)
// class UAIInstructionComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAIInstructionComponent* UAIInstructionComponent::EnqueueCompositeMoveInstruction(TArray<class ATargetPoint*> route)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.EnqueueCompositeMoveInstruction");

	UAIInstructionComponent_EnqueueCompositeMoveInstruction_Params params;
	params.route = route;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIInstructionComponent.EnqueueAlignToInstruction
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Target                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FRotator                Orientation                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          LerpTime                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           smoothCurve                    (Parm, ZeroConstructor, IsPlainOldData)
// EAIAlignComponent              alignComponent                 (Parm, ZeroConstructor, IsPlainOldData)
// class UAIInstructionComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAIInstructionComponent* UAIInstructionComponent::EnqueueAlignToInstruction(const struct FVector& Target, const struct FRotator& Orientation, float LerpTime, bool smoothCurve, EAIAlignComponent alignComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.EnqueueAlignToInstruction");

	UAIInstructionComponent_EnqueueAlignToInstruction_Params params;
	params.Target = Target;
	params.Orientation = Orientation;
	params.LerpTime = LerpTime;
	params.smoothCurve = smoothCurve;
	params.alignComponent = alignComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIInstructionComponent.ClearSignal
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   SignalName                     (Parm, ZeroConstructor, IsPlainOldData)

void UAIInstructionComponent::ClearSignal(const struct FName& SignalName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIInstructionComponent.ClearSignal");

	UAIInstructionComponent_ClearSignal_Params params;
	params.SignalName = SignalName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.AIPatrolComponent.StopPatrolling
// (Final, Native, Public, BlueprintCallable)

void UAIPatrolComponent::StopPatrolling()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIPatrolComponent.StopPatrolling");

	UAIPatrolComponent_StopPatrolling_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.AIPatrolComponent.StartPatrolling
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EAIPatrolStart                 Start                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Delay                          (Parm, ZeroConstructor, IsPlainOldData)
// EAIPatrolEnd                   End                            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAIPatrolComponent::StartPatrolling(EAIPatrolStart Start, float Delay, EAIPatrolEnd End)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIPatrolComponent.StartPatrolling");

	UAIPatrolComponent_StartPatrolling_Params params;
	params.Start = Start;
	params.Delay = Delay;
	params.End = End;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIPatrolComponent.SetPatrolRoute
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class ATargetPoint*>    inPatrolRoute                  (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UAIPatrolComponent::SetPatrolRoute(TArray<class ATargetPoint*> inPatrolRoute)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIPatrolComponent.SetPatrolRoute");

	UAIPatrolComponent_SetPatrolRoute_Params params;
	params.inPatrolRoute = inPatrolRoute;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIPatrolComponent.SetPatrolIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            nextIndex                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAIPatrolComponent::SetPatrolIndex(int nextIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIPatrolComponent.SetPatrolIndex");

	UAIPatrolComponent_SetPatrolIndex_Params params;
	params.nextIndex = nextIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIPatrolComponent.MoveToPatrolPointIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            nextIndex                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAIPatrolComponent::MoveToPatrolPointIndex(int nextIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIPatrolComponent.MoveToPatrolPointIndex");

	UAIPatrolComponent_MoveToPatrolPointIndex_Params params;
	params.nextIndex = nextIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIPatrolComponent.IsPatrolling
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAIPatrolComponent::IsPatrolling()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIPatrolComponent.IsPatrolling");

	UAIPatrolComponent_IsPatrolling_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIPatrolComponent.HasValidPatrolRoute
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAIPatrolComponent::HasValidPatrolRoute()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIPatrolComponent.HasValidPatrolRoute");

	UAIPatrolComponent_HasValidPatrolRoute_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIPatrolComponent.HasPatrolRequested
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAIPatrolComponent::HasPatrolRequested()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIPatrolComponent.HasPatrolRequested");

	UAIPatrolComponent_HasPatrolRequested_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIPatrolComponent.GetPatrolLength
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UAIPatrolComponent::GetPatrolLength()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIPatrolComponent.GetPatrolLength");

	UAIPatrolComponent_GetPatrolLength_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIPatrolComponent.FindPatrolPointAtIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)
// class ATargetPoint*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ATargetPoint* UAIPatrolComponent::FindPatrolPointAtIndex(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIPatrolComponent.FindPatrolPointAtIndex");

	UAIPatrolComponent_FindPatrolPointAtIndex_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIPatrolComponent.FindFurthestPatrolPoint
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 toLocation                     (ConstParm, Parm, IsPlainOldData)
// class ATargetPoint*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ATargetPoint* UAIPatrolComponent::FindFurthestPatrolPoint(const struct FVector& toLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIPatrolComponent.FindFurthestPatrolPoint");

	UAIPatrolComponent_FindFurthestPatrolPoint_Params params;
	params.toLocation = toLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIPatrolComponent.FindClosestPatrolPointIndex
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 toLocation                     (ConstParm, Parm, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UAIPatrolComponent::FindClosestPatrolPointIndex(const struct FVector& toLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIPatrolComponent.FindClosestPatrolPointIndex");

	UAIPatrolComponent_FindClosestPatrolPointIndex_Params params;
	params.toLocation = toLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIPositioningComponent.GetAIPositioningComponent
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class APawn*                   Pawn                           (Parm, ZeroConstructor, IsPlainOldData)
// class UAIPositioningComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAIPositioningComponent* UAIPositioningComponent::STATIC_GetAIPositioningComponent(class APawn* Pawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIPositioningComponent.GetAIPositioningComponent");

	UAIPositioningComponent_GetAIPositioningComponent_Params params;
	params.Pawn = Pawn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIWanderVolume.ContainsPoint
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Point                          (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AAIWanderVolume::ContainsPoint(const struct FVector& Point)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIWanderVolume.ContainsPoint");

	AAIWanderVolume_ContainsPoint_Params params;
	params.Point = Point;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIWorldInteractionComponent.WanderBehaviourFinished
// (Final, Native, Public, BlueprintCallable)

void UAIWorldInteractionComponent::WanderBehaviourFinished()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIWorldInteractionComponent.WanderBehaviourFinished");

	UAIWorldInteractionComponent_WanderBehaviourFinished_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.AIWorldInteractionComponent.TriggerThrow
// (Final, Native, Public)

void UAIWorldInteractionComponent::TriggerThrow()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIWorldInteractionComponent.TriggerThrow");

	UAIWorldInteractionComponent_TriggerThrow_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.AIWorldInteractionComponent.StopPlayingCatch
// (Final, Native, Public, BlueprintCallable)

void UAIWorldInteractionComponent::StopPlayingCatch()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIWorldInteractionComponent.StopPlayingCatch");

	UAIWorldInteractionComponent_StopPlayingCatch_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.AIWorldInteractionComponent.StartPlayingCatch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  ball                           (Parm, ZeroConstructor, IsPlainOldData)

void UAIWorldInteractionComponent::StartPlayingCatch(class AActor* ball)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIWorldInteractionComponent.StartPlayingCatch");

	UAIWorldInteractionComponent_StartPlayingCatch_Params params;
	params.ball = ball;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.AIWorldInteractionComponent.SetupThrow
// (Final, Native, Public, HasDefaults)
// Parameters:
// struct FVector                 Point                          (Parm, IsPlainOldData)
// float                          Speed                          (Parm, ZeroConstructor, IsPlainOldData)
// EAIThrowSelection              throwOverride                  (Parm, ZeroConstructor, IsPlainOldData)

void UAIWorldInteractionComponent::SetupThrow(const struct FVector& Point, float Speed, EAIThrowSelection throwOverride)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIWorldInteractionComponent.SetupThrow");

	UAIWorldInteractionComponent_SetupThrow_Params params;
	params.Point = Point;
	params.Speed = Speed;
	params.throwOverride = throwOverride;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.AIWorldInteractionComponent.SetFollowTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  FollowTarget                   (Parm, ZeroConstructor, IsPlainOldData)

void UAIWorldInteractionComponent::SetFollowTarget(class AActor* FollowTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIWorldInteractionComponent.SetFollowTarget");

	UAIWorldInteractionComponent_SetFollowTarget_Params params;
	params.FollowTarget = FollowTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.AIWorldInteractionComponent.SearchForWanderTarget
// (Final, Native, Public, BlueprintCallable)

void UAIWorldInteractionComponent::SearchForWanderTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIWorldInteractionComponent.SearchForWanderTarget");

	UAIWorldInteractionComponent_SearchForWanderTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.AIWorldInteractionComponent.IsPlayingCatch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAIWorldInteractionComponent::IsPlayingCatch()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIWorldInteractionComponent.IsPlayingCatch");

	UAIWorldInteractionComponent_IsPlayingCatch_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AIWorldInteractionComponent.ClearFollowTarget
// (Final, Native, Public, BlueprintCallable)

void UAIWorldInteractionComponent::ClearFollowTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AIWorldInteractionComponent.ClearFollowTarget");

	UAIWorldInteractionComponent_ClearFollowTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.AnimUtils.RemoveMetaDataOfClass
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimationAsset*         AnimationAsset                 (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  MetaDataClass                  (Parm, ZeroConstructor, IsPlainOldData)

void UAnimUtils::STATIC_RemoveMetaDataOfClass(class UAnimationAsset* AnimationAsset, class UClass* MetaDataClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AnimUtils.RemoveMetaDataOfClass");

	UAnimUtils_RemoveMetaDataOfClass_Params params;
	params.AnimationAsset = AnimationAsset;
	params.MetaDataClass = MetaDataClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.AnimUtils.RemoveMetaData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimationAsset*         AnimationAsset                 (Parm, ZeroConstructor, IsPlainOldData)
// class UAnimMetaData*           MetaDataObject                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UAnimUtils::STATIC_RemoveMetaData(class UAnimationAsset* AnimationAsset, class UAnimMetaData* MetaDataObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AnimUtils.RemoveMetaData");

	UAnimUtils_RemoveMetaData_Params params;
	params.AnimationAsset = AnimationAsset;
	params.MetaDataObject = MetaDataObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.AnimUtils.RemoveAllMetaData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimationAsset*         AnimationAsset                 (Parm, ZeroConstructor, IsPlainOldData)

void UAnimUtils::STATIC_RemoveAllMetaData(class UAnimationAsset* AnimationAsset)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AnimUtils.RemoveAllMetaData");

	UAnimUtils_RemoveAllMetaData_Params params;
	params.AnimationAsset = AnimationAsset;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.AnimUtils.GetMetaDataOfClass
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimationAsset*         AnimationAsset                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  MetaDataClass                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class UAnimMetaData*>   MetaDataOfClass                (ConstParm, Parm, OutParm, ZeroConstructor)

void UAnimUtils::STATIC_GetMetaDataOfClass(class UAnimationAsset* AnimationAsset, class UClass* MetaDataClass, TArray<class UAnimMetaData*> MetaDataOfClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AnimUtils.GetMetaDataOfClass");

	UAnimUtils_GetMetaDataOfClass_Params params;
	params.AnimationAsset = AnimationAsset;
	params.MetaDataClass = MetaDataClass;
	params.MetaDataOfClass = MetaDataOfClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.AnimUtils.GetMetaData
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimationAsset*         AnimationAsset                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TArray<class UAnimMetaData*>   MetaData                       (ConstParm, Parm, OutParm, ZeroConstructor)

void UAnimUtils::STATIC_GetMetaData(class UAnimationAsset* AnimationAsset, TArray<class UAnimMetaData*> MetaData)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AnimUtils.GetMetaData");

	UAnimUtils_GetMetaData_Params params;
	params.AnimationAsset = AnimationAsset;
	params.MetaData = MetaData;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.AnimUtils.ContainsMetaDataOfClass
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimationAsset*         AnimationAsset                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  MetaDataClass                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAnimUtils::STATIC_ContainsMetaDataOfClass(class UAnimationAsset* AnimationAsset, class UClass* MetaDataClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AnimUtils.ContainsMetaDataOfClass");

	UAnimUtils_ContainsMetaDataOfClass_Params params;
	params.AnimationAsset = AnimationAsset;
	params.MetaDataClass = MetaDataClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.AnimUtils.AddMetaDataObject
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimationAsset*         AnimationAsset                 (Parm, ZeroConstructor, IsPlainOldData)
// class UAnimMetaData*           MetaDataObject                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UAnimUtils::STATIC_AddMetaDataObject(class UAnimationAsset* AnimationAsset, class UAnimMetaData* MetaDataObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AnimUtils.AddMetaDataObject");

	UAnimUtils_AddMetaDataObject_Params params;
	params.AnimationAsset = AnimationAsset;
	params.MetaDataObject = MetaDataObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.AnimUtils.AddMetaData
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UAnimationAsset*         AnimationAsset                 (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  MetaDataClass                  (Parm, ZeroConstructor, IsPlainOldData)
// class UAnimMetaData*           MetaDataInstance               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UAnimUtils::STATIC_AddMetaData(class UAnimationAsset* AnimationAsset, class UClass* MetaDataClass, class UAnimMetaData* MetaDataInstance)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.AnimUtils.AddMetaData");

	UAnimUtils_AddMetaData_Params params;
	params.AnimationAsset = AnimationAsset;
	params.MetaDataClass = MetaDataClass;
	params.MetaDataInstance = MetaDataInstance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BaseMenuActor.SetInactive
// (Native, Public, BlueprintCallable)

void ABaseMenuActor::SetInactive()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BaseMenuActor.SetInactive");

	ABaseMenuActor_SetInactive_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BaseMenuActor.SetActiveSubMenu
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ASubMenuActor*           Submenu                        (Parm, ZeroConstructor, IsPlainOldData)

void ABaseMenuActor::SetActiveSubMenu(class ASubMenuActor* Submenu)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BaseMenuActor.SetActiveSubMenu");

	ABaseMenuActor_SetActiveSubMenu_Params params;
	params.Submenu = Submenu;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BaseMenuActor.SetActive
// (Native, Public, BlueprintCallable)

void ABaseMenuActor::SetActive()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BaseMenuActor.SetActive");

	ABaseMenuActor_SetActive_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BaseMenuActor.ReceiveNewMenuComponentHovered
// (Event, Public, BlueprintEvent)
// Parameters:
// class UMenuBaseComponent*      HoveredComponent               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void ABaseMenuActor::ReceiveNewMenuComponentHovered(class UMenuBaseComponent* HoveredComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BaseMenuActor.ReceiveNewMenuComponentHovered");

	ABaseMenuActor_ReceiveNewMenuComponentHovered_Params params;
	params.HoveredComponent = HoveredComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BaseMenuActor.ReceiveMenuDeactivated
// (Event, Public, BlueprintEvent)

void ABaseMenuActor::ReceiveMenuDeactivated()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BaseMenuActor.ReceiveMenuDeactivated");

	ABaseMenuActor_ReceiveMenuDeactivated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BaseMenuActor.ReceiveMenuActivated
// (Event, Public, BlueprintEvent)

void ABaseMenuActor::ReceiveMenuActivated()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BaseMenuActor.ReceiveMenuActivated");

	ABaseMenuActor_ReceiveMenuActivated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BaseMenuActor.PlayTabChangedSound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMenuTabComponent*       MenuTabComponent               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void ABaseMenuActor::PlayTabChangedSound(class UMenuTabComponent* MenuTabComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BaseMenuActor.PlayTabChangedSound");

	ABaseMenuActor_PlayTabChangedSound_Params params;
	params.MenuTabComponent = MenuTabComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BaseMenuActor.PlayScrollContainerChangedSound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMenuScrollContainerComponent* MenuScrollContainerComponent   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           bIssuedFromConsole             (Parm, ZeroConstructor, IsPlainOldData)

void ABaseMenuActor::PlayScrollContainerChangedSound(class UMenuScrollContainerComponent* MenuScrollContainerComponent, bool bIssuedFromConsole)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BaseMenuActor.PlayScrollContainerChangedSound");

	ABaseMenuActor_PlayScrollContainerChangedSound_Params params;
	params.MenuScrollContainerComponent = MenuScrollContainerComponent;
	params.bIssuedFromConsole = bIssuedFromConsole;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BaseMenuActor.PlayRadiobuttonChangedSound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMenuRadioButtonComponent* MenuRadioButtonComponent       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void ABaseMenuActor::PlayRadiobuttonChangedSound(class UMenuRadioButtonComponent* MenuRadioButtonComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BaseMenuActor.PlayRadiobuttonChangedSound");

	ABaseMenuActor_PlayRadiobuttonChangedSound_Params params;
	params.MenuRadioButtonComponent = MenuRadioButtonComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BaseMenuActor.PlayButtonSoundAtLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 ButtonLocation                 (Parm, IsPlainOldData)
// EMenuButtonState               ButtonState                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsBackButton                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsConsoleButton               (Parm, ZeroConstructor, IsPlainOldData)

void ABaseMenuActor::PlayButtonSoundAtLocation(const struct FVector& ButtonLocation, EMenuButtonState ButtonState, bool bIsBackButton, bool bIsConsoleButton)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BaseMenuActor.PlayButtonSoundAtLocation");

	ABaseMenuActor_PlayButtonSoundAtLocation_Params params;
	params.ButtonLocation = ButtonLocation;
	params.ButtonState = ButtonState;
	params.bIsBackButton = bIsBackButton;
	params.bIsConsoleButton = bIsConsoleButton;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BaseMenuActor.PlayButtonSound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMenuButtonComponent*    MenuButtonComponent            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           bIsBackButton                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsConsoleButton               (Parm, ZeroConstructor, IsPlainOldData)

void ABaseMenuActor::PlayButtonSound(class UMenuButtonComponent* MenuButtonComponent, bool bIsBackButton, bool bIsConsoleButton)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BaseMenuActor.PlayButtonSound");

	ABaseMenuActor_PlayButtonSound_Params params;
	params.MenuButtonComponent = MenuButtonComponent;
	params.bIsBackButton = bIsBackButton;
	params.bIsConsoleButton = bIsConsoleButton;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BaseMenuActor.OnActorInteractReleased
// (Native, Public)

void ABaseMenuActor::OnActorInteractReleased()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BaseMenuActor.OnActorInteractReleased");

	ABaseMenuActor_OnActorInteractReleased_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BaseMenuActor.OnActorInteractPressed
// (Native, Public)
// Parameters:
// class UFrontendInteractionController* Controller                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void ABaseMenuActor::OnActorInteractPressed(class UFrontendInteractionController* Controller)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BaseMenuActor.OnActorInteractPressed");

	ABaseMenuActor_OnActorInteractPressed_Params params;
	params.Controller = Controller;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BaseMenuActor.OnActorHoverEnd
// (Native, Public)
// Parameters:
// bool                           bInteractionKeyPressed         (Parm, ZeroConstructor, IsPlainOldData)

void ABaseMenuActor::OnActorHoverEnd(bool bInteractionKeyPressed)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BaseMenuActor.OnActorHoverEnd");

	ABaseMenuActor_OnActorHoverEnd_Params params;
	params.bInteractionKeyPressed = bInteractionKeyPressed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BaseMenuActor.OnActorHoverBegin
// (Native, Public)
// Parameters:
// class UFrontendInteractionController* Controller                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void ABaseMenuActor::OnActorHoverBegin(class UFrontendInteractionController* Controller)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BaseMenuActor.OnActorHoverBegin");

	ABaseMenuActor_OnActorHoverBegin_Params params;
	params.Controller = Controller;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BaseMenuActor.GetActiveSubmenu
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASubMenuActor*           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ASubMenuActor* ABaseMenuActor::GetActiveSubmenu()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BaseMenuActor.GetActiveSubmenu");

	ABaseMenuActor_GetActiveSubmenu_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.BaseMenuActor.AddSubMenu
// (Native, Public, BlueprintCallable)
// Parameters:
// class ASubMenuActor*           Submenu                        (Parm, ZeroConstructor, IsPlainOldData)
// class ABaseMenuActor*          ParentMenu                     (Parm, ZeroConstructor, IsPlainOldData)

void ABaseMenuActor::AddSubMenu(class ASubMenuActor* Submenu, class ABaseMenuActor* ParentMenu)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BaseMenuActor.AddSubMenu");

	ABaseMenuActor_AddSubMenu_Params params;
	params.Submenu = Submenu;
	params.ParentMenu = ParentMenu;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BlackoutWidget.SetIndicatorOpacity
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                          Opacity                        (Parm, ZeroConstructor, IsPlainOldData)

void UBlackoutWidget::SetIndicatorOpacity(float Opacity)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BlackoutWidget.SetIndicatorOpacity");

	UBlackoutWidget_SetIndicatorOpacity_Params params;
	params.Opacity = Opacity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BlackoutWidget.SetAngleIndicatorRotation
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                          Angle                          (Parm, ZeroConstructor, IsPlainOldData)

void UBlackoutWidget::SetAngleIndicatorRotation(float Angle)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BlackoutWidget.SetAngleIndicatorRotation");

	UBlackoutWidget_SetAngleIndicatorRotation_Params params;
	params.Angle = Angle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BlackoutWidget.Init
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UBlackoutWidget::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BlackoutWidget.Init");

	UBlackoutWidget_Init_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BlackoutWidget.FadeOutWarningText
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UBlackoutWidget::FadeOutWarningText()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BlackoutWidget.FadeOutWarningText");

	UBlackoutWidget_FadeOutWarningText_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BlackoutWidget.FadeOutAngleIndicatorImage
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UBlackoutWidget::FadeOutAngleIndicatorImage()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BlackoutWidget.FadeOutAngleIndicatorImage");

	UBlackoutWidget_FadeOutAngleIndicatorImage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BlackoutWidget.FadeInWarningText
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UBlackoutWidget::FadeInWarningText()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BlackoutWidget.FadeInWarningText");

	UBlackoutWidget_FadeInWarningText_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BlackoutWidget.FadeInAngleIndicatorImage
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UBlackoutWidget::FadeInAngleIndicatorImage()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BlackoutWidget.FadeInAngleIndicatorImage");

	UBlackoutWidget_FadeInAngleIndicatorImage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BodyComponent.StartLocomotion
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<ENTSnapDirection>  Direction                      (Parm, ZeroConstructor, IsPlainOldData)

void UBodyComponent::StartLocomotion(TEnumAsByte<ENTSnapDirection> Direction)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BodyComponent.StartLocomotion");

	UBodyComponent_StartLocomotion_Params params;
	params.Direction = Direction;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BodyComponent.EndLocomotion
// (Final, Native, Public, BlueprintCallable)

void UBodyComponent::EndLocomotion()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BodyComponent.EndLocomotion");

	UBodyComponent_EndLocomotion_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RICEAIController.GetAICoordinator
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ARICEAICoordinator*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ARICEAICoordinator* ARICEAIController::GetAICoordinator()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RICEAIController.GetAICoordinator");

	ARICEAIController_GetAICoordinator_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.BuddyAIPawn.WanderBehaviourFinished
// (Final, Native, Public, BlueprintCallable)

void ABuddyAIPawn::WanderBehaviourFinished()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BuddyAIPawn.WanderBehaviourFinished");

	ABuddyAIPawn_WanderBehaviourFinished_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BuddyAIPawn.TriggerInteraction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBuddyInteractableComponent* Interactable                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// ETriggeredInteractionResult    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ETriggeredInteractionResult ABuddyAIPawn::TriggerInteraction(class UBuddyInteractableComponent* Interactable)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BuddyAIPawn.TriggerInteraction");

	ABuddyAIPawn_TriggerInteraction_Params params;
	params.Interactable = Interactable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.BuddyAIPawn.StopPlayingThrowAndCatch
// (Final, Native, Public, BlueprintCallable)

void ABuddyAIPawn::StopPlayingThrowAndCatch()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BuddyAIPawn.StopPlayingThrowAndCatch");

	ABuddyAIPawn_StopPlayingThrowAndCatch_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BuddyAIPawn.StartPlayingThrowAndCatch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  ball                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           fetchOnly                      (Parm, ZeroConstructor, IsPlainOldData)

void ABuddyAIPawn::StartPlayingThrowAndCatch(class AActor* ball, bool fetchOnly)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BuddyAIPawn.StartPlayingThrowAndCatch");

	ABuddyAIPawn_StartPlayingThrowAndCatch_Params params;
	params.ball = ball;
	params.fetchOnly = fetchOnly;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BuddyAIPawn.SetupIdleBehaviour
// (Final, Native, Public, BlueprintCallable)

void ABuddyAIPawn::SetupIdleBehaviour()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BuddyAIPawn.SetupIdleBehaviour");

	ABuddyAIPawn_SetupIdleBehaviour_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BuddyAIPawn.SetSignal
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   SignalName                     (Parm, ZeroConstructor, IsPlainOldData)

void ABuddyAIPawn::SetSignal(const struct FName& SignalName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BuddyAIPawn.SetSignal");

	ABuddyAIPawn_SetSignal_Params params;
	params.SignalName = SignalName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BuddyAIPawn.SetFollowTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  FollowTarget                   (Parm, ZeroConstructor, IsPlainOldData)

void ABuddyAIPawn::SetFollowTarget(class AActor* FollowTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BuddyAIPawn.SetFollowTarget");

	ABuddyAIPawn_SetFollowTarget_Params params;
	params.FollowTarget = FollowTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BuddyAIPawn.SearchForWanderTarget
// (Final, Native, Public, BlueprintCallable)

void ABuddyAIPawn::SearchForWanderTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BuddyAIPawn.SearchForWanderTarget");

	ABuddyAIPawn_SearchForWanderTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BuddyAIPawn.SearchForPointOfInterest
// (Final, Native, Public, BlueprintCallable)

void ABuddyAIPawn::SearchForPointOfInterest()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BuddyAIPawn.SearchForPointOfInterest");

	ABuddyAIPawn_SearchForPointOfInterest_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BuddyAIPawn.OnThrowCatchComplete
// (Event, Public, BlueprintEvent)

void ABuddyAIPawn::OnThrowCatchComplete()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BuddyAIPawn.OnThrowCatchComplete");

	ABuddyAIPawn_OnThrowCatchComplete_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BuddyAIPawn.OnPickupTakenFromMe
// (Event, Public, BlueprintEvent)

void ABuddyAIPawn::OnPickupTakenFromMe()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BuddyAIPawn.OnPickupTakenFromMe");

	ABuddyAIPawn_OnPickupTakenFromMe_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BuddyAIPawn.OnPickupReleased
// (Event, Public, BlueprintEvent)

void ABuddyAIPawn::OnPickupReleased()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BuddyAIPawn.OnPickupReleased");

	ABuddyAIPawn_OnPickupReleased_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BuddyAIPawn.OnPickupGrabSuccess
// (Event, Public, BlueprintEvent)

void ABuddyAIPawn::OnPickupGrabSuccess()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BuddyAIPawn.OnPickupGrabSuccess");

	ABuddyAIPawn_OnPickupGrabSuccess_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BuddyAIPawn.OnPickupGrabFailed
// (Event, Public, BlueprintEvent)

void ABuddyAIPawn::OnPickupGrabFailed()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BuddyAIPawn.OnPickupGrabFailed");

	ABuddyAIPawn_OnPickupGrabFailed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BuddyAIPawn.ForgetAllSignals
// (Final, Native, Public, BlueprintCallable)

void ABuddyAIPawn::ForgetAllSignals()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BuddyAIPawn.ForgetAllSignals");

	ABuddyAIPawn_ForgetAllSignals_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BuddyAIPawn.ClearSignal
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   SignalName                     (Parm, ZeroConstructor, IsPlainOldData)

void ABuddyAIPawn::ClearSignal(const struct FName& SignalName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BuddyAIPawn.ClearSignal");

	ABuddyAIPawn_ClearSignal_Params params;
	params.SignalName = SignalName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BuddyAIPawn.ClearFollowTarget
// (Final, Native, Public, BlueprintCallable)

void ABuddyAIPawn::ClearFollowTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BuddyAIPawn.ClearFollowTarget");

	ABuddyAIPawn_ClearFollowTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BuddyAIPawn.AnimProxy_ObjectThrow
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                           oneHand                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          throwDistance                  (Parm, ZeroConstructor, IsPlainOldData)

void ABuddyAIPawn::AnimProxy_ObjectThrow(bool oneHand, float throwDistance)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BuddyAIPawn.AnimProxy_ObjectThrow");

	ABuddyAIPawn_AnimProxy_ObjectThrow_Params params;
	params.oneHand = oneHand;
	params.throwDistance = throwDistance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BuddyAIPawn.AnimProxy_ObjectPickup
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                           oneHand                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          Height                         (Parm, ZeroConstructor, IsPlainOldData)

void ABuddyAIPawn::AnimProxy_ObjectPickup(bool oneHand, float Height)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BuddyAIPawn.AnimProxy_ObjectPickup");

	ABuddyAIPawn_AnimProxy_ObjectPickup_Params params;
	params.oneHand = oneHand;
	params.Height = Height;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BuddyAIPawn.AnimProxy_ObjectLetGo
// (Event, Public, BlueprintEvent)

void ABuddyAIPawn::AnimProxy_ObjectLetGo()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BuddyAIPawn.AnimProxy_ObjectLetGo");

	ABuddyAIPawn_AnimProxy_ObjectLetGo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BuddyAIPawn.AnimProxy_ObjectHandOver
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                           oneHand                        (Parm, ZeroConstructor, IsPlainOldData)

void ABuddyAIPawn::AnimProxy_ObjectHandOver(bool oneHand)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BuddyAIPawn.AnimProxy_ObjectHandOver");

	ABuddyAIPawn_AnimProxy_ObjectHandOver_Params params;
	params.oneHand = oneHand;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BuddyAIPawn.AnimProxy_ObjectCatchSuccess
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                           oneHand                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          catchAngle                     (Parm, ZeroConstructor, IsPlainOldData)

void ABuddyAIPawn::AnimProxy_ObjectCatchSuccess(bool oneHand, float catchAngle)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BuddyAIPawn.AnimProxy_ObjectCatchSuccess");

	ABuddyAIPawn_AnimProxy_ObjectCatchSuccess_Params params;
	params.oneHand = oneHand;
	params.catchAngle = catchAngle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BuddyAIPawn.AnimProxy_ObjectCatchReady
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                           oneHand                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          catchAngle                     (Parm, ZeroConstructor, IsPlainOldData)

void ABuddyAIPawn::AnimProxy_ObjectCatchReady(bool oneHand, float catchAngle)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BuddyAIPawn.AnimProxy_ObjectCatchReady");

	ABuddyAIPawn_AnimProxy_ObjectCatchReady_Params params;
	params.oneHand = oneHand;
	params.catchAngle = catchAngle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BuddyAIPawn.AnimProxy_ObjectCatchFail
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                           oneHand                        (Parm, ZeroConstructor, IsPlainOldData)

void ABuddyAIPawn::AnimProxy_ObjectCatchFail(bool oneHand)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BuddyAIPawn.AnimProxy_ObjectCatchFail");

	ABuddyAIPawn_AnimProxy_ObjectCatchFail_Params params;
	params.oneHand = oneHand;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BuddyAIPawnMovement.PushMovementType
// (Native, Public, BlueprintCallable)
// Parameters:
// EBuddyAIMovementType           MovementType                   (Parm, ZeroConstructor, IsPlainOldData)

void UBuddyAIPawnMovement::PushMovementType(EBuddyAIMovementType MovementType)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BuddyAIPawnMovement.PushMovementType");

	UBuddyAIPawnMovement_PushMovementType_Params params;
	params.MovementType = MovementType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BuddyAIPawnMovement.PopMovementType
// (Native, Public, BlueprintCallable)

void UBuddyAIPawnMovement::PopMovementType()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BuddyAIPawnMovement.PopMovementType");

	UBuddyAIPawnMovement_PopMovementType_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BuddyFloatingMovementComponent.PushMovementType
// (Native, Public, BlueprintCallable)
// Parameters:
// EBuddyAIMovementType           MovementType                   (Parm, ZeroConstructor, IsPlainOldData)

void UBuddyFloatingMovementComponent::PushMovementType(EBuddyAIMovementType MovementType)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BuddyFloatingMovementComponent.PushMovementType");

	UBuddyFloatingMovementComponent_PushMovementType_Params params;
	params.MovementType = MovementType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BuddyFloatingMovementComponent.PopMovementType
// (Native, Public, BlueprintCallable)

void UBuddyFloatingMovementComponent::PopMovementType()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BuddyFloatingMovementComponent.PopMovementType");

	UBuddyFloatingMovementComponent_PopMovementType_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BuddyInteractableComponent.TriggeredByPlayer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class APawn*                   BuddyPawn                      (Parm, ZeroConstructor, IsPlainOldData)
// ETriggeredInteractionResult    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ETriggeredInteractionResult UBuddyInteractableComponent::TriggeredByPlayer(class APawn* BuddyPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BuddyInteractableComponent.TriggeredByPlayer");

	UBuddyInteractableComponent_TriggeredByPlayer_Params params;
	params.BuddyPawn = BuddyPawn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.BuddyInteractableComponent.StartInteraction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAIInstructionComponent* InstructionComponent           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UBuddyInteractableComponent::StartInteraction(class UAIInstructionComponent* InstructionComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BuddyInteractableComponent.StartInteraction");

	UBuddyInteractableComponent_StartInteraction_Params params;
	params.InstructionComponent = InstructionComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.BuddyInteractableComponent.CanStartInteraction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBuddyInteractableType         Type                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UBuddyInteractableComponent::CanStartInteraction(EBuddyInteractableType Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.BuddyInteractableComponent.CanStartInteraction");

	UBuddyInteractableComponent_CanStartInteraction_Params params;
	params.Type = Type;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.PhysicsInteraction.UnlockInteraction
// (Final, Native, Public, BlueprintCallable)

void UPhysicsInteraction::UnlockInteraction()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PhysicsInteraction.UnlockInteraction");

	UPhysicsInteraction_UnlockInteraction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.PhysicsInteraction.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bInEnabled                     (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsInteraction::SetEnabled(bool bInEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PhysicsInteraction.SetEnabled");

	UPhysicsInteraction_SetEnabled_Params params;
	params.bInEnabled = bInEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.PhysicsInteraction.LockInteraction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InLockTime                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          InLockSpeedOverride            (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsInteraction::LockInteraction(float InLockTime, float InLockSpeedOverride)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PhysicsInteraction.LockInteraction");

	UPhysicsInteraction_LockInteraction_Params params;
	params.InLockTime = InLockTime;
	params.InLockSpeedOverride = InLockSpeedOverride;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.PhysicsInteraction.GetInteractionName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName UPhysicsInteraction::GetInteractionName()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PhysicsInteraction.GetInteractionName");

	UPhysicsInteraction_GetInteractionName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.PhysicsInteraction.GetEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPhysicsInteraction::GetEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PhysicsInteraction.GetEnabled");

	UPhysicsInteraction_GetEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.PhysicsInteraction.GetDesiredBoneTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform UPhysicsInteraction::GetDesiredBoneTransform()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PhysicsInteraction.GetDesiredBoneTransform");

	UPhysicsInteraction_GetDesiredBoneTransform_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.PhysicsInteraction.GetCurrentVelocity
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPhysicsInteraction::GetCurrentVelocity()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PhysicsInteraction.GetCurrentVelocity");

	UPhysicsInteraction_GetCurrentVelocity_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.PhysicsInteraction.GetCurrentTouchingComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UPrimitiveComponent*     ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UPrimitiveComponent* UPhysicsInteraction::GetCurrentTouchingComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PhysicsInteraction.GetCurrentTouchingComponent");

	UPhysicsInteraction_GetCurrentTouchingComponent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.PhysicsInteraction.GetCurrentTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPhysicsInteraction::GetCurrentTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PhysicsInteraction.GetCurrentTime");

	UPhysicsInteraction_GetCurrentTime_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.CableInteractionComponent.SetStartOfCableMeshAndSocket
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*         Mesh                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   SocketName                     (Parm, ZeroConstructor, IsPlainOldData)

void UCableInteractionComponent::SetStartOfCableMeshAndSocket(class USceneComponent* Mesh, const struct FName& SocketName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CableInteractionComponent.SetStartOfCableMeshAndSocket");

	UCableInteractionComponent_SetStartOfCableMeshAndSocket_Params params;
	params.Mesh = Mesh;
	params.SocketName = SocketName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.CableInteractionComponent.SetEndOfCableMeshAndSocket
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*         Mesh                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   SocketName                     (Parm, ZeroConstructor, IsPlainOldData)

void UCableInteractionComponent::SetEndOfCableMeshAndSocket(class USceneComponent* Mesh, const struct FName& SocketName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CableInteractionComponent.SetEndOfCableMeshAndSocket");

	UCableInteractionComponent_SetEndOfCableMeshAndSocket_Params params;
	params.Mesh = Mesh;
	params.SocketName = SocketName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.CableInteractionComponent.AddContactPoint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*         Mesh                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   SocketName                     (Parm, ZeroConstructor, IsPlainOldData)

void UCableInteractionComponent::AddContactPoint(class USceneComponent* Mesh, const struct FName& SocketName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CableInteractionComponent.AddContactPoint");

	UCableInteractionComponent_AddContactPoint_Params params;
	params.Mesh = Mesh;
	params.SocketName = SocketName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SubMenuActor.SwitchToParentMenu
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ASubMenuActor::SwitchToParentMenu()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SubMenuActor.SwitchToParentMenu");

	ASubMenuActor_SwitchToParentMenu_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SubMenuActor.SwitchToMenu
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABaseMenuActor*          OtherMenu                      (Parm, ZeroConstructor, IsPlainOldData)

void ASubMenuActor::SwitchToMenu(class ABaseMenuActor* OtherMenu)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SubMenuActor.SwitchToMenu");

	ASubMenuActor_SwitchToMenu_Params params;
	params.OtherMenu = OtherMenu;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SubMenuActor.SetTooltipText
// (Event, Public, HasOutParms, BlueprintEvent)
// Parameters:
// struct FText                   text                           (ConstParm, Parm, OutParm, ReferenceParm)

void ASubMenuActor::SetTooltipText(const struct FText& text)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SubMenuActor.SetTooltipText");

	ASubMenuActor_SetTooltipText_Params params;
	params.text = text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SubMenuActor.SetParentMenu
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABaseMenuActor*          Menu                           (Parm, ZeroConstructor, IsPlainOldData)

void ASubMenuActor::SetParentMenu(class ABaseMenuActor* Menu)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SubMenuActor.SetParentMenu");

	ASubMenuActor_SetParentMenu_Params params;
	params.Menu = Menu;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SubMenuActor.SetInactive
// (Native, Public, BlueprintCallable)

void ASubMenuActor::SetInactive()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SubMenuActor.SetInactive");

	ASubMenuActor_SetInactive_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SubMenuActor.SetConsoleMenu
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABaseMenuActor*          ConsoleActor                   (Parm, ZeroConstructor, IsPlainOldData)

void ASubMenuActor::SetConsoleMenu(class ABaseMenuActor* ConsoleActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SubMenuActor.SetConsoleMenu");

	ASubMenuActor_SetConsoleMenu_Params params;
	params.ConsoleActor = ConsoleActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SubMenuActor.SetActive
// (Native, Public, BlueprintCallable)

void ASubMenuActor::SetActive()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SubMenuActor.SetActive");

	ASubMenuActor_SetActive_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SubMenuActor.ReceiveTwistInput
// (Native, Public, BlueprintCallable)
// Parameters:
// float                          TwistValue                     (Parm, ZeroConstructor, IsPlainOldData)

void ASubMenuActor::ReceiveTwistInput(float TwistValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SubMenuActor.ReceiveTwistInput");

	ASubMenuActor_ReceiveTwistInput_Params params;
	params.TwistValue = TwistValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SubMenuActor.OnBackButtonPressed
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FPressedButtonComponent ButtonComponent                (ConstParm, Parm, OutParm, ReferenceParm)

void ASubMenuActor::OnBackButtonPressed(const struct FPressedButtonComponent& ButtonComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SubMenuActor.OnBackButtonPressed");

	ASubMenuActor_OnBackButtonPressed_Params params;
	params.ButtonComponent = ButtonComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SubMenuActor.IsActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ASubMenuActor::IsActive()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SubMenuActor.IsActive");

	ASubMenuActor_IsActive_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.SubMenuActor.Initialize
// (Native, Public, BlueprintCallable)
// Parameters:
// class ABaseMenuActor*          ParentMenu                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSetStartsActive               (Parm, ZeroConstructor, IsPlainOldData)

void ASubMenuActor::Initialize(class ABaseMenuActor* ParentMenu, bool bSetStartsActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SubMenuActor.Initialize");

	ASubMenuActor_Initialize_Params params;
	params.ParentMenu = ParentMenu;
	params.bSetStartsActive = bSetStartsActive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SubMenuActor.GetActiveMenuComponentByTag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   Tag                            (Parm, ZeroConstructor, IsPlainOldData)
// class UMenuBaseComponent*      ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UMenuBaseComponent* ASubMenuActor::GetActiveMenuComponentByTag(const struct FName& Tag)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SubMenuActor.GetActiveMenuComponentByTag");

	ASubMenuActor_GetActiveMenuComponentByTag_Params params;
	params.Tag = Tag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.ChapterSelectMenu.OnTabChanged
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FChangedMenuComponent   MenuComponent                  (ConstParm, Parm, OutParm, ReferenceParm)

void AChapterSelectMenu::OnTabChanged(const struct FChangedMenuComponent& MenuComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ChapterSelectMenu.OnTabChanged");

	AChapterSelectMenu_OnTabChanged_Params params;
	params.MenuComponent = MenuComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ChapterSelectMenu.OnBackButtonPressed
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FPressedButtonComponent MenuComponent                  (ConstParm, Parm, OutParm, ReferenceParm)

void AChapterSelectMenu::OnBackButtonPressed(const struct FPressedButtonComponent& MenuComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ChapterSelectMenu.OnBackButtonPressed");

	AChapterSelectMenu_OnBackButtonPressed_Params params;
	params.MenuComponent = MenuComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuBaseComponent.ShowComponent
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bIncludeAttachedMenuElements   (Parm, ZeroConstructor, IsPlainOldData)

void UMenuBaseComponent::ShowComponent(bool bIncludeAttachedMenuElements)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuBaseComponent.ShowComponent");

	UMenuBaseComponent_ShowComponent_Params params;
	params.bIncludeAttachedMenuElements = bIncludeAttachedMenuElements;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuBaseComponent.HideComponent
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bIncludeAttachedMenuElements   (Parm, ZeroConstructor, IsPlainOldData)

void UMenuBaseComponent::HideComponent(bool bIncludeAttachedMenuElements)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuBaseComponent.HideComponent");

	UMenuBaseComponent_HideComponent_Params params;
	params.bIncludeAttachedMenuElements = bIncludeAttachedMenuElements;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuBaseComponent.EndHover
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UMenuBaseComponent::EndHover()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuBaseComponent.EndHover");

	UMenuBaseComponent_EndHover_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.MenuBaseComponent.DisableComponent
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bDisabled                      (Parm, ZeroConstructor, IsPlainOldData)

void UMenuBaseComponent::DisableComponent(bool bDisabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuBaseComponent.DisableComponent");

	UMenuBaseComponent_DisableComponent_Params params;
	params.bDisabled = bDisabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuBaseComponent.BeginHover
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UMenuBaseComponent::BeginHover()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuBaseComponent.BeginHover");

	UMenuBaseComponent_BeginHover_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.ChapterSelectMenuItem.UnlockItem
// (Final, Native, Public, BlueprintCallable)

void UChapterSelectMenuItem::UnlockItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ChapterSelectMenuItem.UnlockItem");

	UChapterSelectMenuItem_UnlockItem_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ChapterSelectMenuItem.TryLoadChapter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UChapterSelectMenuItem::TryLoadChapter()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ChapterSelectMenuItem.TryLoadChapter");

	UChapterSelectMenuItem_TryLoadChapter_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.CheckpointListener.OnCheckpointResumed
// (Event, Public, BlueprintEvent)
// Parameters:
// class UWKNDProgressionCheckpointData* ResumedCheckpoint              (Parm, ZeroConstructor, IsPlainOldData)
// class AWKNDCheckpointTeleporter* CheckpointTeleporter           (Parm, ZeroConstructor, IsPlainOldData)

void UCheckpointListener::OnCheckpointResumed(class UWKNDProgressionCheckpointData* ResumedCheckpoint, class AWKNDCheckpointTeleporter* CheckpointTeleporter)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CheckpointListener.OnCheckpointResumed");

	UCheckpointListener_OnCheckpointResumed_Params params;
	params.ResumedCheckpoint = ResumedCheckpoint;
	params.CheckpointTeleporter = CheckpointTeleporter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.CinematicBlendingComponent.StartBlend
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ATargetPoint*            BlendEndPosition               (Parm, ZeroConstructor, IsPlainOldData)
// class UCurveFloat*             BlendCurve                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendStartDelay                (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendDuration                  (Parm, ZeroConstructor, IsPlainOldData)

void UCinematicBlendingComponent::StartBlend(class ATargetPoint* BlendEndPosition, class UCurveFloat* BlendCurve, float BlendStartDelay, float BlendDuration)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CinematicBlendingComponent.StartBlend");

	UCinematicBlendingComponent_StartBlend_Params params;
	params.BlendEndPosition = BlendEndPosition;
	params.BlendCurve = BlendCurve;
	params.BlendStartDelay = BlendStartDelay;
	params.BlendDuration = BlendDuration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.CinematicPositioningInterface.MoveToStartPosition
// (Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class ATargetPoint*            StartPosition                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FScriptDelegate         Callback                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void UCinematicPositioningInterface::MoveToStartPosition(class ATargetPoint* StartPosition, const struct FScriptDelegate& Callback)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CinematicPositioningInterface.MoveToStartPosition");

	UCinematicPositioningInterface_MoveToStartPosition_Params params;
	params.StartPosition = StartPosition;
	params.Callback = Callback;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.CinematicPositioningInterface.CancelAllMovementCommands
// (Native, Public, BlueprintCallable)

void UCinematicPositioningInterface::CancelAllMovementCommands()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CinematicPositioningInterface.CancelAllMovementCommands");

	UCinematicPositioningInterface_CancelAllMovementCommands_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ClimbObject.UnlockClimbHand
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           unlockClimbHold                (Parm, ZeroConstructor, IsPlainOldData)

void AClimbObject::UnlockClimbHand(bool unlockClimbHold)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ClimbObject.UnlockClimbHand");

	AClimbObject_UnlockClimbHand_Params params;
	params.unlockClimbHold = unlockClimbHold;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ClimbObject.SetZOffset
// (Final, Native, Public)
// Parameters:
// EControllerHand                Hand                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Offset                         (Parm, ZeroConstructor, IsPlainOldData)

void AClimbObject::SetZOffset(EControllerHand Hand, float Offset)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ClimbObject.SetZOffset");

	AClimbObject_SetZOffset_Params params;
	params.Hand = Hand;
	params.Offset = Offset;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ClimbObject.SetEnabledClimbable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           Enabled                        (Parm, ZeroConstructor, IsPlainOldData)

void AClimbObject::SetEnabledClimbable(bool Enabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ClimbObject.SetEnabledClimbable");

	AClimbObject_SetEnabledClimbable_Params params;
	params.Enabled = Enabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ClimbObject.ReceiveOnReleased
// (Event, Public, BlueprintEvent)
// Parameters:
// class AWKNDMotionController*   Controller                     (Parm, ZeroConstructor, IsPlainOldData)

void AClimbObject::ReceiveOnReleased(class AWKNDMotionController* Controller)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ClimbObject.ReceiveOnReleased");

	AClimbObject_ReceiveOnReleased_Params params;
	params.Controller = Controller;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ClimbObject.ReceiveOnGrabbed
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                           upperHalf                      (Parm, ZeroConstructor, IsPlainOldData)
// class AWKNDMotionController*   Controller                     (Parm, ZeroConstructor, IsPlainOldData)

void AClimbObject::ReceiveOnGrabbed(bool upperHalf, class AWKNDMotionController* Controller)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ClimbObject.ReceiveOnGrabbed");

	AClimbObject_ReceiveOnGrabbed_Params params;
	params.upperHalf = upperHalf;
	params.Controller = Controller;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ClimbObject.IsUpperHalf
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AClimbObject::IsUpperHalf()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ClimbObject.IsUpperHalf");

	AClimbObject_IsUpperHalf_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.ClimbObject.Highlight
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                           Highlight                      (Parm, ZeroConstructor, IsPlainOldData)

void AClimbObject::Highlight(bool Highlight)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ClimbObject.Highlight");

	AClimbObject_Highlight_Params params;
	params.Highlight = Highlight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ClimbObject.GetGripScale
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AClimbObject::GetGripScale()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ClimbObject.GetGripScale");

	AClimbObject_GetGripScale_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.ClimbObject.GetFacingVector
// (Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector AClimbObject::GetFacingVector()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ClimbObject.GetFacingVector");

	AClimbObject_GetFacingVector_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.CombatPointManager.ResetCombatPoints
// (Final, Native, Public, BlueprintCallable)

void ACombatPointManager::ResetCombatPoints()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatPointManager.ResetCombatPoints");

	ACombatPointManager_ResetCombatPoints_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.CombatPointManager.ReleaseCombatPoint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class UCombatPointOccupant> SquadMember                    (Parm, ZeroConstructor, IsPlainOldData)

void ACombatPointManager::ReleaseCombatPoint(const TScriptInterface<class UCombatPointOccupant>& SquadMember)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatPointManager.ReleaseCombatPoint");

	ACombatPointManager_ReleaseCombatPoint_Params params;
	params.SquadMember = SquadMember;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.CombatPointManager.OccupyCombatPoint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)
// TScriptInterface<class UCombatPointOccupant> SquadMember                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACombatPointManager::OccupyCombatPoint(int Index, const TScriptInterface<class UCombatPointOccupant>& SquadMember)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatPointManager.OccupyCombatPoint");

	ACombatPointManager_OccupyCombatPoint_Params params;
	params.Index = Index;
	params.SquadMember = SquadMember;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.CombatPointManager.InitCombatPoints
// (Final, Native, Public, BlueprintCallable)

void ACombatPointManager::InitCombatPoints()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatPointManager.InitCombatPoints");

	ACombatPointManager_InitCombatPoints_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.CombatPointManager.GetVacantCombatPointsForAttacker
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class UCombatPointOccupant> Attacker                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// TArray<struct FKFCircleCombatPoint> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<struct FKFCircleCombatPoint> ACombatPointManager::GetVacantCombatPointsForAttacker(const TScriptInterface<class UCombatPointOccupant>& Attacker)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatPointManager.GetVacantCombatPointsForAttacker");

	ACombatPointManager_GetVacantCombatPointsForAttacker_Params params;
	params.Attacker = Attacker;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.CombatPointManager.GetVacantCombatPointsByType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ENPCCombatType                 Type                           (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FKFCircleCombatPoint> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<struct FKFCircleCombatPoint> ACombatPointManager::GetVacantCombatPointsByType(ENPCCombatType Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatPointManager.GetVacantCombatPointsByType");

	ACombatPointManager_GetVacantCombatPointsByType_Params params;
	params.Type = Type;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.CombatPointManager.GetRandomVacantCombatPoint
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ENPCCombatType                 NPCCombatType                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FKFCircleCombatPoint    CombatPoint                    (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACombatPointManager::GetRandomVacantCombatPoint(ENPCCombatType NPCCombatType, struct FKFCircleCombatPoint* CombatPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatPointManager.GetRandomVacantCombatPoint");

	ACombatPointManager_GetRandomVacantCombatPoint_Params params;
	params.NPCCombatType = NPCCombatType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CombatPoint != nullptr)
		*CombatPoint = params.CombatPoint;

	return params.ReturnValue;
}


// Function WKND.CombatPointManager.GetRandomPointOnYZPlane
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          MaxX                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaxY                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 AnchorLocation                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 PlaneLocation                  (Parm, OutParm, IsPlainOldData)

void ACombatPointManager::GetRandomPointOnYZPlane(float MaxX, float MaxY, const struct FVector& AnchorLocation, struct FVector* PlaneLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatPointManager.GetRandomPointOnYZPlane");

	ACombatPointManager_GetRandomPointOnYZPlane_Params params;
	params.MaxX = MaxX;
	params.MaxY = MaxY;
	params.AnchorLocation = AnchorLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PlaneLocation != nullptr)
		*PlaneLocation = params.PlaneLocation;
}


// Function WKND.CombatPointManager.GetLocationAroundTargetActor
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          Angle                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          Height                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, OutParm, IsPlainOldData)

void ACombatPointManager::GetLocationAroundTargetActor(float Angle, float Distance, float Height, struct FVector* Location)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatPointManager.GetLocationAroundTargetActor");

	ACombatPointManager_GetLocationAroundTargetActor_Params params;
	params.Angle = Angle;
	params.Distance = Distance;
	params.Height = Height;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Location != nullptr)
		*Location = params.Location;
}


// Function WKND.CombatPointManager.GetCombatPointForAttacker
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class UCombatPointOccupant> Attacker                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FKFCircleCombatPoint    CombatPoint                    (Parm, OutParm)

void ACombatPointManager::GetCombatPointForAttacker(const TScriptInterface<class UCombatPointOccupant>& Attacker, struct FKFCircleCombatPoint* CombatPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatPointManager.GetCombatPointForAttacker");

	ACombatPointManager_GetCombatPointForAttacker_Params params;
	params.Attacker = Attacker;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CombatPoint != nullptr)
		*CombatPoint = params.CombatPoint;
}


// Function WKND.CombatSquad.UpdateSquadActionCooldown
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)

void ACombatSquad::UpdateSquadActionCooldown(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatSquad.UpdateSquadActionCooldown");

	ACombatSquad_UpdateSquadActionCooldown_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.CombatSquad.SelectSquadMembers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FScriptDelegate         Predicate                      (Parm, ZeroConstructor)
// int                            NumMembersToSelect             (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TScriptInterface<class UCombatSquadBehaviourInterface>> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<TScriptInterface<class UCombatSquadBehaviourInterface>> ACombatSquad::SelectSquadMembers(const struct FScriptDelegate& Predicate, int NumMembersToSelect)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatSquad.SelectSquadMembers");

	ACombatSquad_SelectSquadMembers_Params params;
	params.Predicate = Predicate;
	params.NumMembersToSelect = NumMembersToSelect;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.CombatSquad.ResetSquad
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ACombatSquad::ResetSquad()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatSquad.ResetSquad");

	ACombatSquad_ResetSquad_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.CombatSquad.RemoveNullMembersFromSquad
// (Final, Native, Public, BlueprintCallable)

void ACombatSquad::RemoveNullMembersFromSquad()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatSquad.RemoveNullMembersFromSquad");

	ACombatSquad_RemoveNullMembersFromSquad_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.CombatSquad.RemoveMemberFromSquad
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class UCombatSquadBehaviourInterface> Member                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSendEvent                     (Parm, ZeroConstructor, IsPlainOldData)

void ACombatSquad::RemoveMemberFromSquad(const TScriptInterface<class UCombatSquadBehaviourInterface>& Member, bool bSendEvent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatSquad.RemoveMemberFromSquad");

	ACombatSquad_RemoveMemberFromSquad_Params params;
	params.Member = Member;
	params.bSendEvent = bSendEvent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.CombatSquad.PrintLog
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// struct FString                 Message                        (Parm, ZeroConstructor)

void ACombatSquad::PrintLog(const struct FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatSquad.PrintLog");

	ACombatSquad_PrintLog_Params params;
	params.Message = Message;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.CombatSquad.IsInCombat
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACombatSquad::IsInCombat()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatSquad.IsInCombat");

	ACombatSquad_IsInCombat_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.CombatSquad.HandleSquadAction
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACombatSquad::HandleSquadAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatSquad.HandleSquadAction");

	ACombatSquad_HandleSquadAction_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.CombatSquad.HandleMemberRemoved
// (Native, Event, Protected, HasOutParms, BlueprintEvent)
// Parameters:
// TScriptInterface<class UCombatSquadBehaviourInterface> Member                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void ACombatSquad::HandleMemberRemoved(const TScriptInterface<class UCombatSquadBehaviourInterface>& Member)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatSquad.HandleMemberRemoved");

	ACombatSquad_HandleMemberRemoved_Params params;
	params.Member = Member;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.CombatSquad.HandleMemberKilledEvent
// (Final, Native, Protected)
// Parameters:
// class AActor*                  DeadActor                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FWKNDDamageInfo         KillDamageInfo                 (Parm)

void ACombatSquad::HandleMemberKilledEvent(class AActor* DeadActor, const struct FWKNDDamageInfo& KillDamageInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatSquad.HandleMemberKilledEvent");

	ACombatSquad_HandleMemberKilledEvent_Params params;
	params.DeadActor = DeadActor;
	params.KillDamageInfo = KillDamageInfo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.CombatSquad.HandleMemberKilled
// (Native, Event, Protected, HasOutParms, BlueprintEvent)
// Parameters:
// TScriptInterface<class UCombatSquadBehaviourInterface> Member                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void ACombatSquad::HandleMemberKilled(const TScriptInterface<class UCombatSquadBehaviourInterface>& Member)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatSquad.HandleMemberKilled");

	ACombatSquad_HandleMemberKilled_Params params;
	params.Member = Member;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.CombatSquad.HandleMemberAdded
// (Native, Event, Protected, HasOutParms, BlueprintEvent)
// Parameters:
// TScriptInterface<class UCombatSquadBehaviourInterface> NewMember                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void ACombatSquad::HandleMemberAdded(const TScriptInterface<class UCombatSquadBehaviourInterface>& NewMember)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatSquad.HandleMemberAdded");

	ACombatSquad_HandleMemberAdded_Params params;
	params.NewMember = NewMember;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.CombatSquad.GetSquadSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int ACombatSquad::GetSquadSize()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatSquad.GetSquadSize");

	ACombatSquad_GetSquadSize_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.CombatSquad.GetSquadMembersOfClass
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// class UClass*                  ActorClass                     (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          OutActors                      (Parm, OutParm, ZeroConstructor)

void ACombatSquad::GetSquadMembersOfClass(class UClass* ActorClass, TArray<class AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatSquad.GetSquadMembersOfClass");

	ACombatSquad_GetSquadMembersOfClass_Params params;
	params.ActorClass = ActorClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutActors != nullptr)
		*OutActors = params.OutActors;
}


// Function WKND.CombatSquad.GetSquadMembersByType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ENPCCombatType                 CombatType                     (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TScriptInterface<class UCombatSquadBehaviourInterface>> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<TScriptInterface<class UCombatSquadBehaviourInterface>> ACombatSquad::GetSquadMembersByType(ENPCCombatType CombatType)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatSquad.GetSquadMembersByType");

	ACombatSquad_GetSquadMembersByType_Params params;
	params.CombatType = CombatType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.CombatSquad.GetSquadMembers
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<TScriptInterface<class UCombatSquadBehaviourInterface>> OutAttackers                   (Parm, OutParm, ZeroConstructor)

void ACombatSquad::GetSquadMembers(TArray<TScriptInterface<class UCombatSquadBehaviourInterface>>* OutAttackers)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatSquad.GetSquadMembers");

	ACombatSquad_GetSquadMembers_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutAttackers != nullptr)
		*OutAttackers = params.OutAttackers;
}


// Function WKND.CombatSquad.GetSquadMemberByIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            Index                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TScriptInterface<class UCombatSquadBehaviourInterface> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TScriptInterface<class UCombatSquadBehaviourInterface> ACombatSquad::GetSquadMemberByIndex(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatSquad.GetSquadMemberByIndex");

	ACombatSquad_GetSquadMemberByIndex_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.CombatSquad.GetRandomSquadMember
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class UCombatSquadBehaviourInterface> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TScriptInterface<class UCombatSquadBehaviourInterface> ACombatSquad::GetRandomSquadMember()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatSquad.GetRandomSquadMember");

	ACombatSquad_GetRandomSquadMember_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.CombatSquad.EndCombat
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ACombatSquad::EndCombat()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatSquad.EndCombat");

	ACombatSquad_EndCombat_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.CombatSquad.BeginCombat
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ACombatSquad::BeginCombat()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatSquad.BeginCombat");

	ACombatSquad_BeginCombat_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.CombatSquad.AttemptSquadAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACombatSquad::AttemptSquadAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatSquad.AttemptSquadAction");

	ACombatSquad_AttemptSquadAction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.CombatSquad.AddMemberToSquad
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class UCombatSquadBehaviourInterface> NewMember                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSendEvent                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACombatSquad::AddMemberToSquad(const TScriptInterface<class UCombatSquadBehaviourInterface>& NewMember, bool bSendEvent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatSquad.AddMemberToSquad");

	ACombatSquad_AddMemberToSquad_Params params;
	params.NewMember = NewMember;
	params.bSendEvent = bSendEvent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.CombatSquad.AddMembersToSquad
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<TScriptInterface<class UCombatSquadBehaviourInterface>> NewMembers                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void ACombatSquad::AddMembersToSquad(TArray<TScriptInterface<class UCombatSquadBehaviourInterface>> NewMembers)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatSquad.AddMembersToSquad");

	ACombatSquad_AddMembersToSquad_Params params;
	params.NewMembers = NewMembers;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.CombatSquadBehaviourInterface.StopAttack
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UCombatSquadBehaviourInterface::StopAttack()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatSquadBehaviourInterface.StopAttack");

	UCombatSquadBehaviourInterface_StopAttack_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.CombatSquadBehaviourInterface.StartRangedAttack
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UCombatSquadBehaviourInterface::StartRangedAttack()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatSquadBehaviourInterface.StartRangedAttack");

	UCombatSquadBehaviourInterface_StartRangedAttack_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.CombatSquadBehaviourInterface.StartMeleeAttack
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UCombatSquadBehaviourInterface::StartMeleeAttack()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatSquadBehaviourInterface.StartMeleeAttack");

	UCombatSquadBehaviourInterface_StartMeleeAttack_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.CombatSquadBehaviourInterface.StartAttack
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                  Opponent                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          DelayBeforeAttack              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UCombatSquadBehaviourInterface::StartAttack(class AActor* Opponent, float DelayBeforeAttack)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatSquadBehaviourInterface.StartAttack");

	UCombatSquadBehaviourInterface_StartAttack_Params params;
	params.Opponent = Opponent;
	params.DelayBeforeAttack = DelayBeforeAttack;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.CombatSquadBehaviourInterface.SetOpponent
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ACombatPointManager*     Opponent                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UCombatSquadBehaviourInterface::SetOpponent(class ACombatPointManager* Opponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatSquadBehaviourInterface.SetOpponent");

	UCombatSquadBehaviourInterface_SetOpponent_Params params;
	params.Opponent = Opponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.CombatSquadBehaviourInterface.OnRemovedFromCombatSquad
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ACombatSquad*            Squad                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UCombatSquadBehaviourInterface::OnRemovedFromCombatSquad(class ACombatSquad* Squad)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatSquadBehaviourInterface.OnRemovedFromCombatSquad");

	UCombatSquadBehaviourInterface_OnRemovedFromCombatSquad_Params params;
	params.Squad = Squad;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.CombatSquadBehaviourInterface.OnAddedToCombatSquad
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ACombatSquad*            Squad                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UCombatSquadBehaviourInterface::OnAddedToCombatSquad(class ACombatSquad* Squad)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatSquadBehaviourInterface.OnAddedToCombatSquad");

	UCombatSquadBehaviourInterface_OnAddedToCombatSquad_Params params;
	params.Squad = Squad;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.CombatSquadBehaviourInterface.Kill
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UCombatSquadBehaviourInterface::Kill()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatSquadBehaviourInterface.Kill");

	UCombatSquadBehaviourInterface_Kill_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.CombatSquadBehaviourInterface.IsAttacking
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UCombatSquadBehaviourInterface::IsAttacking()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatSquadBehaviourInterface.IsAttacking");

	UCombatSquadBehaviourInterface_IsAttacking_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.CombatSquadBehaviourInterface.GetNPCCombatType
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// ENPCCombatType                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ENPCCombatType UCombatSquadBehaviourInterface::GetNPCCombatType()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatSquadBehaviourInterface.GetNPCCombatType");

	UCombatSquadBehaviourInterface_GetNPCCombatType_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.CombatSquadBehaviourInterface.GetHealthComponent
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UWKNDHealthComponent*    ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UWKNDHealthComponent* UCombatSquadBehaviourInterface::GetHealthComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatSquadBehaviourInterface.GetHealthComponent");

	UCombatSquadBehaviourInterface_GetHealthComponent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.CombatSquadBehaviourInterface.Despawn
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UCombatSquadBehaviourInterface::Despawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatSquadBehaviourInterface.Despawn");

	UCombatSquadBehaviourInterface_Despawn_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.CombatSquadBehaviourInterface.CanAttack
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UCombatSquadBehaviourInterface::CanAttack()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatSquadBehaviourInterface.CanAttack");

	UCombatSquadBehaviourInterface_CanAttack_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.CombatSquadBehaviourInterface.BindHandleAttackComplete
// (Native, Event, Public, HasOutParms, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FScriptDelegate         HandleAttackCompleteDelegate   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UCombatSquadBehaviourInterface::BindHandleAttackComplete(const struct FScriptDelegate& HandleAttackCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatSquadBehaviourInterface.BindHandleAttackComplete");

	UCombatSquadBehaviourInterface_BindHandleAttackComplete_Params params;
	params.HandleAttackCompleteDelegate = HandleAttackCompleteDelegate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.ConsoleMenuActor.SetButtonConfigMaterialParameter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            ConfigID                       (Parm, ZeroConstructor, IsPlainOldData)

void AConsoleMenuActor::SetButtonConfigMaterialParameter(int ConfigID)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ConsoleMenuActor.SetButtonConfigMaterialParameter");

	AConsoleMenuActor_SetButtonConfigMaterialParameter_Params params;
	params.ConfigID = ConfigID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ConstructionComponent.SetTargetMesh
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UStaticMeshComponent*    Mesh                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UConstructionComponent::SetTargetMesh(class UStaticMeshComponent* Mesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ConstructionComponent.SetTargetMesh");

	UConstructionComponent_SetTargetMesh_Params params;
	params.Mesh = Mesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ConstructionComponent.ReleasePart
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ARPOCBuildPart*          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ARPOCBuildPart* UConstructionComponent::ReleasePart()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ConstructionComponent.ReleasePart");

	UConstructionComponent_ReleasePart_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.ConstructionComponent.GetCombinedWeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UConstructionComponent::GetCombinedWeight()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ConstructionComponent.GetCombinedWeight");

	UConstructionComponent_GetCombinedWeight_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.ConstructionComponent.EndComponentOverlap
// (Final, Native, Public)
// Parameters:
// class UPrimitiveComponent*     OverlappedComponent            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            OtherBodyIndex                 (Parm, ZeroConstructor, IsPlainOldData)

void UConstructionComponent::EndComponentOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ConstructionComponent.EndComponentOverlap");

	UConstructionComponent_EndComponentOverlap_Params params;
	params.OverlappedComponent = OverlappedComponent;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ConstructionComponent.BeginComponentOverlap
// (Final, Native, Public, HasOutParms)
// Parameters:
// class UPrimitiveComponent*     OverlappedComponent            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            OtherBodyIndex                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFromSweep                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepResult                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void UConstructionComponent::BeginComponentOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ConstructionComponent.BeginComponentOverlap");

	UConstructionComponent_BeginComponentOverlap_Params params;
	params.OverlappedComponent = OverlappedComponent;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;
	params.bFromSweep = bFromSweep;
	params.SweepResult = SweepResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ConstructionComponent.AllowsDeconstruction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UConstructionComponent::AllowsDeconstruction()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ConstructionComponent.AllowsDeconstruction");

	UConstructionComponent_AllowsDeconstruction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.ConstructionComponent.AddPart
// (Native, Public, BlueprintCallable)
// Parameters:
// class ARPOCBuildPart*          Part                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UConstructionComponent::AddPart(class ARPOCBuildPart* Part)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ConstructionComponent.AddPart");

	UConstructionComponent_AddPart_Params params;
	params.Part = Part;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.CorvaxianBoxLatticeAnimation.RetractSinglePiston
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          extension                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          SpeedMultiplier                (Parm, ZeroConstructor, IsPlainOldData)

void UCorvaxianBoxLatticeAnimation::RetractSinglePiston(const struct FName& BoneName, float extension, float SpeedMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CorvaxianBoxLatticeAnimation.RetractSinglePiston");

	UCorvaxianBoxLatticeAnimation_RetractSinglePiston_Params params;
	params.BoneName = BoneName;
	params.extension = extension;
	params.SpeedMultiplier = SpeedMultiplier;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.CorvaxianBoxLatticeAnimation.RetractAllPistons
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InTotalPlayTime                (Parm, ZeroConstructor, IsPlainOldData)
// float                          extension                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          SpeedMultiplier                (Parm, ZeroConstructor, IsPlainOldData)
// float                          InPistonAnimationInterval      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InPistonRandomSpeedVaration    (Parm, ZeroConstructor, IsPlainOldData)

void UCorvaxianBoxLatticeAnimation::RetractAllPistons(float InTotalPlayTime, float extension, float SpeedMultiplier, float InPistonAnimationInterval, float InPistonRandomSpeedVaration)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CorvaxianBoxLatticeAnimation.RetractAllPistons");

	UCorvaxianBoxLatticeAnimation_RetractAllPistons_Params params;
	params.InTotalPlayTime = InTotalPlayTime;
	params.extension = extension;
	params.SpeedMultiplier = SpeedMultiplier;
	params.InPistonAnimationInterval = InPistonAnimationInterval;
	params.InPistonRandomSpeedVaration = InPistonRandomSpeedVaration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.CorvaxianBoxLatticeAnimation.PlayRandomPatternAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InTotalPlayTime                (Parm, ZeroConstructor, IsPlainOldData)
// float                          extension                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          SpeedMultiplier                (Parm, ZeroConstructor, IsPlainOldData)
// float                          InPistonAnimationInterval      (Parm, ZeroConstructor, IsPlainOldData)

void UCorvaxianBoxLatticeAnimation::PlayRandomPatternAnimation(float InTotalPlayTime, float extension, float SpeedMultiplier, float InPistonAnimationInterval)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CorvaxianBoxLatticeAnimation.PlayRandomPatternAnimation");

	UCorvaxianBoxLatticeAnimation_PlayRandomPatternAnimation_Params params;
	params.InTotalPlayTime = InTotalPlayTime;
	params.extension = extension;
	params.SpeedMultiplier = SpeedMultiplier;
	params.InPistonAnimationInterval = InPistonAnimationInterval;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.CorvaxianBoxLatticeAnimation.InitializeLattice
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPoseableMeshComponent*  PoseableMesh                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   InBonePrefix                   (Parm, ZeroConstructor, IsPlainOldData)

void UCorvaxianBoxLatticeAnimation::InitializeLattice(class UPoseableMeshComponent* PoseableMesh, const struct FName& InBonePrefix)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CorvaxianBoxLatticeAnimation.InitializeLattice");

	UCorvaxianBoxLatticeAnimation_InitializeLattice_Params params;
	params.PoseableMesh = PoseableMesh;
	params.InBonePrefix = InBonePrefix;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.CorvaxianBoxLatticeAnimation.GetPoseableMeshComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UPoseableMeshComponent*  ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UPoseableMeshComponent* UCorvaxianBoxLatticeAnimation::GetPoseableMeshComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CorvaxianBoxLatticeAnimation.GetPoseableMeshComponent");

	UCorvaxianBoxLatticeAnimation_GetPoseableMeshComponent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.CorvaxianBoxLatticeAnimation.ExtendSinglePiston
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          extension                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          SpeedMultiplier                (Parm, ZeroConstructor, IsPlainOldData)

void UCorvaxianBoxLatticeAnimation::ExtendSinglePiston(const struct FName& BoneName, float extension, float SpeedMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CorvaxianBoxLatticeAnimation.ExtendSinglePiston");

	UCorvaxianBoxLatticeAnimation_ExtendSinglePiston_Params params;
	params.BoneName = BoneName;
	params.extension = extension;
	params.SpeedMultiplier = SpeedMultiplier;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.CorvaxianBoxLatticeAnimation.ExtendAllPistons
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InTotalPlayTime                (Parm, ZeroConstructor, IsPlainOldData)
// float                          extension                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          SpeedMultiplier                (Parm, ZeroConstructor, IsPlainOldData)
// float                          InPistonAnimationInterval      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InPistonRandomSpeedVaration    (Parm, ZeroConstructor, IsPlainOldData)

void UCorvaxianBoxLatticeAnimation::ExtendAllPistons(float InTotalPlayTime, float extension, float SpeedMultiplier, float InPistonAnimationInterval, float InPistonRandomSpeedVaration)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CorvaxianBoxLatticeAnimation.ExtendAllPistons");

	UCorvaxianBoxLatticeAnimation_ExtendAllPistons_Params params;
	params.InTotalPlayTime = InTotalPlayTime;
	params.extension = extension;
	params.SpeedMultiplier = SpeedMultiplier;
	params.InPistonAnimationInterval = InPistonAnimationInterval;
	params.InPistonRandomSpeedVaration = InPistonRandomSpeedVaration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.DirectionTrackingComponent.ResetDirectionTrackingTransform
// (Final, Native, Public, BlueprintCallable)

void UDirectionTrackingComponent::ResetDirectionTrackingTransform()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.DirectionTrackingComponent.ResetDirectionTrackingTransform");

	UDirectionTrackingComponent_ResetDirectionTrackingTransform_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.DirectionTrackingComponent.RemoveTargetForLookAt_Component
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*         TargetComponent                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UDirectionTrackingComponent::RemoveTargetForLookAt_Component(class USceneComponent* TargetComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.DirectionTrackingComponent.RemoveTargetForLookAt_Component");

	UDirectionTrackingComponent_RemoveTargetForLookAt_Component_Params params;
	params.TargetComponent = TargetComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.DirectionTrackingComponent.RemoveTargetForLookAt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Target                         (Parm, ZeroConstructor, IsPlainOldData)

void UDirectionTrackingComponent::RemoveTargetForLookAt(class AActor* Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.DirectionTrackingComponent.RemoveTargetForLookAt");

	UDirectionTrackingComponent_RemoveTargetForLookAt_Params params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.DirectionTrackingComponent.CheckLookStatus_Location
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 CheckLocation                  (Parm, IsPlainOldData)
// bool                           bRequireLookAt                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UDirectionTrackingComponent::CheckLookStatus_Location(const struct FVector& CheckLocation, bool bRequireLookAt)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.DirectionTrackingComponent.CheckLookStatus_Location");

	UDirectionTrackingComponent_CheckLookStatus_Location_Params params;
	params.CheckLocation = CheckLocation;
	params.bRequireLookAt = bRequireLookAt;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.DirectionTrackingComponent.CheckLookStatus_Component
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*         CheckComponent                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           bRequireLookAt                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UDirectionTrackingComponent::CheckLookStatus_Component(class USceneComponent* CheckComponent, bool bRequireLookAt)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.DirectionTrackingComponent.CheckLookStatus_Component");

	UDirectionTrackingComponent_CheckLookStatus_Component_Params params;
	params.CheckComponent = CheckComponent;
	params.bRequireLookAt = bRequireLookAt;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.DirectionTrackingComponent.CheckLookStatus_Actor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  CheckActor                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bRequireLookAt                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UDirectionTrackingComponent::CheckLookStatus_Actor(class AActor* CheckActor, bool bRequireLookAt)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.DirectionTrackingComponent.CheckLookStatus_Actor");

	UDirectionTrackingComponent_CheckLookStatus_Actor_Params params;
	params.CheckActor = CheckActor;
	params.bRequireLookAt = bRequireLookAt;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.DirectionTrackingComponent.Check2DAngleToTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  CheckTarget                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UDirectionTrackingComponent::Check2DAngleToTarget(class AActor* CheckTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.DirectionTrackingComponent.Check2DAngleToTarget");

	UDirectionTrackingComponent_Check2DAngleToTarget_Params params;
	params.CheckTarget = CheckTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.DirectionTrackingComponent.AddTargetForLookAway
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  NewTarget                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSingleShot                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          AngleTolerance                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          DurationRequired               (Parm, ZeroConstructor, IsPlainOldData)
// struct FScriptDelegate         ReportDoneEvent                (Parm, ZeroConstructor)

void UDirectionTrackingComponent::AddTargetForLookAway(class AActor* NewTarget, bool bSingleShot, float AngleTolerance, float DurationRequired, const struct FScriptDelegate& ReportDoneEvent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.DirectionTrackingComponent.AddTargetForLookAway");

	UDirectionTrackingComponent_AddTargetForLookAway_Params params;
	params.NewTarget = NewTarget;
	params.bSingleShot = bSingleShot;
	params.AngleTolerance = AngleTolerance;
	params.DurationRequired = DurationRequired;
	params.ReportDoneEvent = ReportDoneEvent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.DirectionTrackingComponent.AddTargetForLookAt_Component
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*         NewTargetComponent             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           bSingleShot                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          AngleTolerance                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          DurationRequired               (Parm, ZeroConstructor, IsPlainOldData)
// struct FScriptDelegate         ReportDoneEvent                (Parm, ZeroConstructor)
// bool                           bTriggerOnlyOnce               (Parm, ZeroConstructor, IsPlainOldData)

void UDirectionTrackingComponent::AddTargetForLookAt_Component(class USceneComponent* NewTargetComponent, bool bSingleShot, float AngleTolerance, float DurationRequired, const struct FScriptDelegate& ReportDoneEvent, bool bTriggerOnlyOnce)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.DirectionTrackingComponent.AddTargetForLookAt_Component");

	UDirectionTrackingComponent_AddTargetForLookAt_Component_Params params;
	params.NewTargetComponent = NewTargetComponent;
	params.bSingleShot = bSingleShot;
	params.AngleTolerance = AngleTolerance;
	params.DurationRequired = DurationRequired;
	params.ReportDoneEvent = ReportDoneEvent;
	params.bTriggerOnlyOnce = bTriggerOnlyOnce;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.DirectionTrackingComponent.AddTargetForLookAt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  NewTarget                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSingleShot                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          AngleTolerance                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          DurationRequired               (Parm, ZeroConstructor, IsPlainOldData)
// struct FScriptDelegate         ReportDoneEvent                (Parm, ZeroConstructor)
// bool                           bTriggerOnlyOnce               (Parm, ZeroConstructor, IsPlainOldData)

void UDirectionTrackingComponent::AddTargetForLookAt(class AActor* NewTarget, bool bSingleShot, float AngleTolerance, float DurationRequired, const struct FScriptDelegate& ReportDoneEvent, bool bTriggerOnlyOnce)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.DirectionTrackingComponent.AddTargetForLookAt");

	UDirectionTrackingComponent_AddTargetForLookAt_Params params;
	params.NewTarget = NewTarget;
	params.bSingleShot = bSingleShot;
	params.AngleTolerance = AngleTolerance;
	params.DurationRequired = DurationRequired;
	params.ReportDoneEvent = ReportDoneEvent;
	params.bTriggerOnlyOnce = bTriggerOnlyOnce;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.DirectionTrackingComponent.AddMotionMonitor
// (Final, Native, Public)
// Parameters:
// bool                           bSuccessOnAbove                (Parm, ZeroConstructor, IsPlainOldData)
// float                          Threshold                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          DurationRequired               (Parm, ZeroConstructor, IsPlainOldData)
// struct FScriptDelegate         ReportDoneEvent                (Parm, ZeroConstructor)

void UDirectionTrackingComponent::AddMotionMonitor(bool bSuccessOnAbove, float Threshold, float DurationRequired, const struct FScriptDelegate& ReportDoneEvent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.DirectionTrackingComponent.AddMotionMonitor");

	UDirectionTrackingComponent_AddMotionMonitor_Params params;
	params.bSuccessOnAbove = bSuccessOnAbove;
	params.Threshold = Threshold;
	params.DurationRequired = DurationRequired;
	params.ReportDoneEvent = ReportDoneEvent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.EpisodesMenuActor.OnRestartButtonPressed
// (Final, Native, Private, HasOutParms)
// Parameters:
// struct FPressedButtonComponent ButtonComponent                (ConstParm, Parm, OutParm, ReferenceParm)

void AEpisodesMenuActor::OnRestartButtonPressed(const struct FPressedButtonComponent& ButtonComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.EpisodesMenuActor.OnRestartButtonPressed");

	AEpisodesMenuActor_OnRestartButtonPressed_Params params;
	params.ButtonComponent = ButtonComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.EpisodesMenuActor.OnPlayButtonPressed
// (Final, Native, Private, HasOutParms)
// Parameters:
// struct FPressedButtonComponent ButtonComponent                (ConstParm, Parm, OutParm, ReferenceParm)

void AEpisodesMenuActor::OnPlayButtonPressed(const struct FPressedButtonComponent& ButtonComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.EpisodesMenuActor.OnPlayButtonPressed");

	AEpisodesMenuActor_OnPlayButtonPressed_Params params;
	params.ButtonComponent = ButtonComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.EpisodesMenuActor.OnEpisodeRadioButtonValueChanged
// (Final, Native, Private, HasOutParms)
// Parameters:
// struct FChangedMenuComponent   ChangedMenuComponent           (ConstParm, Parm, OutParm, ReferenceParm)

void AEpisodesMenuActor::OnEpisodeRadioButtonValueChanged(const struct FChangedMenuComponent& ChangedMenuComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.EpisodesMenuActor.OnEpisodeRadioButtonValueChanged");

	AEpisodesMenuActor_OnEpisodeRadioButtonValueChanged_Params params;
	params.ChangedMenuComponent = ChangedMenuComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ExtendedDojoMainMenuActor.UnlockAllWaves
// (Final, Native, Public, BlueprintCallable)

void AExtendedDojoMainMenuActor::UnlockAllWaves()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ExtendedDojoMainMenuActor.UnlockAllWaves");

	AExtendedDojoMainMenuActor_UnlockAllWaves_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ExtendedDojoMainMenuActor.TryLoadDojoWave
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// struct FName                   WaveName                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AExtendedDojoMainMenuActor::TryLoadDojoWave(const struct FName& WaveName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ExtendedDojoMainMenuActor.TryLoadDojoWave");

	AExtendedDojoMainMenuActor_TryLoadDojoWave_Params params;
	params.WaveName = WaveName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.ExtendedDojoMainMenuActor.ShowConfirmationPrompt
// (Final, Native, Protected, HasOutParms, BlueprintCallable)
// Parameters:
// struct FText                   WarningText                    (Parm, OutParm)

void AExtendedDojoMainMenuActor::ShowConfirmationPrompt(struct FText* WarningText)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ExtendedDojoMainMenuActor.ShowConfirmationPrompt");

	AExtendedDojoMainMenuActor_ShowConfirmationPrompt_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (WarningText != nullptr)
		*WarningText = params.WarningText;
}


// Function WKND.ExtendedDojoMainMenuActor.SetPauseManager
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AWKNDPauseManager*       PauseManager                   (Parm, ZeroConstructor, IsPlainOldData)

void AExtendedDojoMainMenuActor::SetPauseManager(class AWKNDPauseManager* PauseManager)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ExtendedDojoMainMenuActor.SetPauseManager");

	AExtendedDojoMainMenuActor_SetPauseManager_Params params;
	params.PauseManager = PauseManager;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ExtendedDojoMainMenuActor.SetDojoLevel
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// struct FName                   NewDojoLevelName               (Parm, ZeroConstructor, IsPlainOldData)

void AExtendedDojoMainMenuActor::SetDojoLevel(const struct FName& NewDojoLevelName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ExtendedDojoMainMenuActor.SetDojoLevel");

	AExtendedDojoMainMenuActor_SetDojoLevel_Params params;
	params.NewDojoLevelName = NewDojoLevelName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ExtendedDojoMainMenuActor.RequestChangeDojoLevel
// (Final, Native, Protected, BlueprintCallable)

void AExtendedDojoMainMenuActor::RequestChangeDojoLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ExtendedDojoMainMenuActor.RequestChangeDojoLevel");

	AExtendedDojoMainMenuActor_RequestChangeDojoLevel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ExtendedDojoMainMenuActor.ReceiveConfirmationPromptClosed
// (Event, Public, BlueprintEvent)

void AExtendedDojoMainMenuActor::ReceiveConfirmationPromptClosed()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ExtendedDojoMainMenuActor.ReceiveConfirmationPromptClosed");

	AExtendedDojoMainMenuActor_ReceiveConfirmationPromptClosed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ExtendedDojoMainMenuActor.ReceiveConfirmationPromptCalled
// (Event, Public, HasOutParms, BlueprintEvent)
// Parameters:
// struct FText                   WarningText                    (ConstParm, Parm, OutParm, ReferenceParm)

void AExtendedDojoMainMenuActor::ReceiveConfirmationPromptCalled(const struct FText& WarningText)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ExtendedDojoMainMenuActor.ReceiveConfirmationPromptCalled");

	AExtendedDojoMainMenuActor_ReceiveConfirmationPromptCalled_Params params;
	params.WarningText = WarningText;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ExtendedDojoMainMenuActor.OnResumeGamePressed
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FPressedButtonComponent ButtonComponent                (ConstParm, Parm, OutParm, ReferenceParm)

void AExtendedDojoMainMenuActor::OnResumeGamePressed(const struct FPressedButtonComponent& ButtonComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ExtendedDojoMainMenuActor.OnResumeGamePressed");

	AExtendedDojoMainMenuActor_OnResumeGamePressed_Params params;
	params.ButtonComponent = ButtonComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ExtendedDojoMainMenuActor.OnQuitGamePressed
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FPressedButtonComponent ButtonComponent                (ConstParm, Parm, OutParm, ReferenceParm)

void AExtendedDojoMainMenuActor::OnQuitGamePressed(const struct FPressedButtonComponent& ButtonComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ExtendedDojoMainMenuActor.OnQuitGamePressed");

	AExtendedDojoMainMenuActor_OnQuitGamePressed_Params params;
	params.ButtonComponent = ButtonComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ExtendedDojoMainMenuActor.OnConfirmationPressed
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FPressedButtonComponent ButtonComponent                (ConstParm, Parm, OutParm, ReferenceParm)

void AExtendedDojoMainMenuActor::OnConfirmationPressed(const struct FPressedButtonComponent& ButtonComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ExtendedDojoMainMenuActor.OnConfirmationPressed");

	AExtendedDojoMainMenuActor_OnConfirmationPressed_Params params;
	params.ButtonComponent = ButtonComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ExtendedDojoMainMenuActor.OnCancelPressed
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FPressedButtonComponent ButtonComponent                (ConstParm, Parm, OutParm, ReferenceParm)

void AExtendedDojoMainMenuActor::OnCancelPressed(const struct FPressedButtonComponent& ButtonComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ExtendedDojoMainMenuActor.OnCancelPressed");

	AExtendedDojoMainMenuActor_OnCancelPressed_Params params;
	params.ButtonComponent = ButtonComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ExtendedDojoMainMenuActor.OnBackToMainMenuPressed
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FPressedButtonComponent ButtonComponent                (ConstParm, Parm, OutParm, ReferenceParm)

void AExtendedDojoMainMenuActor::OnBackToMainMenuPressed(const struct FPressedButtonComponent& ButtonComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ExtendedDojoMainMenuActor.OnBackToMainMenuPressed");

	AExtendedDojoMainMenuActor_OnBackToMainMenuPressed_Params params;
	params.ButtonComponent = ButtonComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ExtendedDojoMainMenuActor.CloseConfirmationPrompt
// (Final, Native, Protected, BlueprintCallable)

void AExtendedDojoMainMenuActor::CloseConfirmationPrompt()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ExtendedDojoMainMenuActor.CloseConfirmationPrompt");

	AExtendedDojoMainMenuActor_CloseConfirmationPrompt_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ExtendedDojoMainMenuActor.CanUnlockAllWaves
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AExtendedDojoMainMenuActor::CanUnlockAllWaves()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ExtendedDojoMainMenuActor.CanUnlockAllWaves");

	AExtendedDojoMainMenuActor_CanUnlockAllWaves_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.ExtendedDojoRewardsMenuActor.UnlockAllRewards
// (Final, Native, Public, BlueprintCallable)

void AExtendedDojoRewardsMenuActor::UnlockAllRewards()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ExtendedDojoRewardsMenuActor.UnlockAllRewards");

	AExtendedDojoRewardsMenuActor_UnlockAllRewards_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ExtendedDojoRewardsMenuActor.OnBackButtonPressed
// (Native, Event, Public, HasOutParms, BlueprintEvent)
// Parameters:
// struct FPressedButtonComponent MenuComponent                  (ConstParm, Parm, OutParm, ReferenceParm)

void AExtendedDojoRewardsMenuActor::OnBackButtonPressed(const struct FPressedButtonComponent& MenuComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ExtendedDojoRewardsMenuActor.OnBackButtonPressed");

	AExtendedDojoRewardsMenuActor_OnBackButtonPressed_Params params;
	params.MenuComponent = MenuComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ExtendedDojoRewardsMenuActor.HandleNewEnvironmentSelection
// (Event, Protected, BlueprintEvent)
// Parameters:
// struct FName                   LevelName                      (Parm, ZeroConstructor, IsPlainOldData)

void AExtendedDojoRewardsMenuActor::HandleNewEnvironmentSelection(const struct FName& LevelName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ExtendedDojoRewardsMenuActor.HandleNewEnvironmentSelection");

	AExtendedDojoRewardsMenuActor_HandleNewEnvironmentSelection_Params params;
	params.LevelName = LevelName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ExtendedDojoRewardsMenuActor.CheckForNewEnvironmentSelection
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// struct FName                   LevelName                      (Parm, ZeroConstructor, IsPlainOldData)

void AExtendedDojoRewardsMenuActor::CheckForNewEnvironmentSelection(const struct FName& LevelName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ExtendedDojoRewardsMenuActor.CheckForNewEnvironmentSelection");

	AExtendedDojoRewardsMenuActor_CheckForNewEnvironmentSelection_Params params;
	params.LevelName = LevelName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ExtendedDojoRewardsMenuActor.CanUnlockAllRewards
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AExtendedDojoRewardsMenuActor::CanUnlockAllRewards()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ExtendedDojoRewardsMenuActor.CanUnlockAllRewards");

	AExtendedDojoRewardsMenuActor_CanUnlockAllRewards_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.ExtrasMenuActor.UnlockAllWaves
// (Final, Native, Protected, BlueprintCallable)

void AExtrasMenuActor::UnlockAllWaves()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ExtrasMenuActor.UnlockAllWaves");

	AExtrasMenuActor_UnlockAllWaves_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ExtrasMenuActor.TryLoadDojoWave
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UExtendedDojoWaveMenuItem* WaveItemToLoad                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AExtrasMenuActor::TryLoadDojoWave(class UExtendedDojoWaveMenuItem* WaveItemToLoad)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ExtrasMenuActor.TryLoadDojoWave");

	AExtrasMenuActor_TryLoadDojoWave_Params params;
	params.WaveItemToLoad = WaveItemToLoad;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.ExtrasMenuActor.SpawnVisualWaveItems
// (Event, Protected, BlueprintEvent)

void AExtrasMenuActor::SpawnVisualWaveItems()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ExtrasMenuActor.SpawnVisualWaveItems");

	AExtrasMenuActor_SpawnVisualWaveItems_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ExtrasMenuActor.ReceiveAllWavesUnlocked
// (Event, Public, BlueprintEvent)

void AExtrasMenuActor::ReceiveAllWavesUnlocked()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ExtrasMenuActor.ReceiveAllWavesUnlocked");

	AExtrasMenuActor_ReceiveAllWavesUnlocked_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ExtrasMenuActor.PlaySelectedWaveSurrogate
// (Event, Public, BlueprintEvent)

void AExtrasMenuActor::PlaySelectedWaveSurrogate()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ExtrasMenuActor.PlaySelectedWaveSurrogate");

	AExtrasMenuActor_PlaySelectedWaveSurrogate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ExtrasMenuActor.OnTabChanged
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FChangedMenuComponent   MenuComponent                  (ConstParm, Parm, OutParm, ReferenceParm)

void AExtrasMenuActor::OnTabChanged(const struct FChangedMenuComponent& MenuComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ExtrasMenuActor.OnTabChanged");

	AExtrasMenuActor_OnTabChanged_Params params;
	params.MenuComponent = MenuComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ExtrasMenuActor.OnBackButtonPressed
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FPressedButtonComponent MenuComponent                  (ConstParm, Parm, OutParm, ReferenceParm)

void AExtrasMenuActor::OnBackButtonPressed(const struct FPressedButtonComponent& MenuComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ExtrasMenuActor.OnBackButtonPressed");

	AExtrasMenuActor_OnBackButtonPressed_Params params;
	params.MenuComponent = MenuComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ForceItemComponentBase.SetTetherObject
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*     InTetherObject                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UForceItemComponentBase::SetTetherObject(class UPrimitiveComponent* InTetherObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ForceItemComponentBase.SetTetherObject");

	UForceItemComponentBase_SetTetherObject_Params params;
	params.InTetherObject = InTetherObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ForceItemComponentBase.SetSocketPointOrigin
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*         InSocketPointOrigin            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UForceItemComponentBase::SetSocketPointOrigin(class USceneComponent* InSocketPointOrigin)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ForceItemComponentBase.SetSocketPointOrigin");

	UForceItemComponentBase_SetSocketPointOrigin_Params params;
	params.InSocketPointOrigin = InSocketPointOrigin;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ForceItemComponentBase.SetPhysicsObject
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*     PhysicsObject                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UForceItemComponentBase::SetPhysicsObject(class UPrimitiveComponent* PhysicsObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ForceItemComponentBase.SetPhysicsObject");

	UForceItemComponentBase_SetPhysicsObject_Params params;
	params.PhysicsObject = PhysicsObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ForceItemComponentBase.SetIsTethered
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           InIsTethered                   (Parm, ZeroConstructor, IsPlainOldData)

void UForceItemComponentBase::SetIsTethered(bool InIsTethered)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ForceItemComponentBase.SetIsTethered");

	UForceItemComponentBase_SetIsTethered_Params params;
	params.InIsTethered = InIsTethered;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ForceItemComponentBase.SendVibrationImpulse
// (Final, Native, Protected)

void UForceItemComponentBase::SendVibrationImpulse()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ForceItemComponentBase.SendVibrationImpulse");

	UForceItemComponentBase_SendVibrationImpulse_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ForceItemComponentBase.OnHit
// (Final, Native, Protected, HasOutParms, HasDefaults)
// Parameters:
// class UPrimitiveComponent*     HitComponent                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 NormalImpulse                  (Parm, IsPlainOldData)
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void UForceItemComponentBase::OnHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ForceItemComponentBase.OnHit");

	UForceItemComponentBase_OnHit_Params params;
	params.HitComponent = HitComponent;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.NormalImpulse = NormalImpulse;
	params.Hit = Hit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ForceItemComponentBase.IsTethered
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UForceItemComponentBase::IsTethered()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ForceItemComponentBase.IsTethered");

	UForceItemComponentBase_IsTethered_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.ForceItemComponentBase.HasCompletedLiftOffGround
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UForceItemComponentBase::HasCompletedLiftOffGround()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ForceItemComponentBase.HasCompletedLiftOffGround");

	UForceItemComponentBase_HasCompletedLiftOffGround_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.ForceItemComponentBase.HasCollidedAfterForceSlowMove
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UForceItemComponentBase::HasCollidedAfterForceSlowMove()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ForceItemComponentBase.HasCollidedAfterForceSlowMove");

	UForceItemComponentBase_HasCollidedAfterForceSlowMove_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.ForceItemComponentBase.GetTetherObject
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UPrimitiveComponent*     ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UPrimitiveComponent* UForceItemComponentBase::GetTetherObject()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ForceItemComponentBase.GetTetherObject");

	UForceItemComponentBase_GetTetherObject_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.ForceItemComponentBase.GetPhysicsObject
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UPrimitiveComponent*     ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UPrimitiveComponent* UForceItemComponentBase::GetPhysicsObject()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ForceItemComponentBase.GetPhysicsObject");

	UForceItemComponentBase_GetPhysicsObject_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.ForceItemComponentBase.GetHostSocket
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UForceSocketComponent*   ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UForceSocketComponent* UForceItemComponentBase::GetHostSocket()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ForceItemComponentBase.GetHostSocket");

	UForceItemComponentBase_GetHostSocket_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.ForceItemComponentBase.ForceThrow
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Impulse                        (Parm, IsPlainOldData)
// class UForcePowerTargetBase*   Target                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UForceItemComponentBase::ForceThrow(const struct FVector& Impulse, class UForcePowerTargetBase* Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ForceItemComponentBase.ForceThrow");

	UForceItemComponentBase_ForceThrow_Params params;
	params.Impulse = Impulse;
	params.Target = Target;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ForceItemComponentBase.ForceSlowMove
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Impulse                        (Parm, IsPlainOldData)

void UForceItemComponentBase::ForceSlowMove(const struct FVector& Impulse)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ForceItemComponentBase.ForceSlowMove");

	UForceItemComponentBase_ForceSlowMove_Params params;
	params.Impulse = Impulse;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ForceItemComponentBase.BeginForceGrab
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  InGrabbingMotionController     (Parm, ZeroConstructor, IsPlainOldData)

void UForceItemComponentBase::BeginForceGrab(class AActor* InGrabbingMotionController)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ForceItemComponentBase.BeginForceGrab");

	UForceItemComponentBase_BeginForceGrab_Params params;
	params.InGrabbingMotionController = InGrabbingMotionController;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ForcePowerComponentBase.SubmitTargetForConsideration
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UForcePowerTargetBase*   ForceTarget                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UForcePowerComponentBase::SubmitTargetForConsideration(class UForcePowerTargetBase* ForceTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ForcePowerComponentBase.SubmitTargetForConsideration");

	UForcePowerComponentBase_SubmitTargetForConsideration_Params params;
	params.ForceTarget = ForceTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ForcePowerTargetBase.NotifyHitByForceItem
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UForceItemComponentBase* ForceItem                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 NormalImpulse                  (Parm, IsPlainOldData)
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void UForcePowerTargetBase::NotifyHitByForceItem(class UForceItemComponentBase* ForceItem, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ForcePowerTargetBase.NotifyHitByForceItem");

	UForcePowerTargetBase_NotifyHitByForceItem_Params params;
	params.ForceItem = ForceItem;
	params.NormalImpulse = NormalImpulse;
	params.Hit = Hit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ForcePowerTargetBase.CalculateFutureLocationGivenCurrentVelocity
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// float                          SecondsIntoFuture              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector UForcePowerTargetBase::CalculateFutureLocationGivenCurrentVelocity(float SecondsIntoFuture)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ForcePowerTargetBase.CalculateFutureLocationGivenCurrentVelocity");

	UForcePowerTargetBase_CalculateFutureLocationGivenCurrentVelocity_Params params;
	params.SecondsIntoFuture = SecondsIntoFuture;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.ForceSocketComponent.SetPhysicsConstraintAttachHost
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*     InPhysicsConstraintAttachHost  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UForceSocketComponent::SetPhysicsConstraintAttachHost(class UPrimitiveComponent* InPhysicsConstraintAttachHost)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ForceSocketComponent.SetPhysicsConstraintAttachHost");

	UForceSocketComponent_SetPhysicsConstraintAttachHost_Params params;
	params.InPhysicsConstraintAttachHost = InPhysicsConstraintAttachHost;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ForceSocketComponent.SetOverlapVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UShapeComponent*         InOverlapVolume                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UForceSocketComponent::SetOverlapVolume(class UShapeComponent* InOverlapVolume)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ForceSocketComponent.SetOverlapVolume");

	UForceSocketComponent_SetOverlapVolume_Params params;
	params.InOverlapVolume = InOverlapVolume;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ForceSocketComponent.ReleaseLockedItem
// (Final, Native, Public, BlueprintCallable)

void UForceSocketComponent::ReleaseLockedItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ForceSocketComponent.ReleaseLockedItem");

	UForceSocketComponent_ReleaseLockedItem_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ForceSocketComponent.OnHandInteraction
// (Final, Native, Protected)
// Parameters:
// EXLABInteractionEventType      EventType                      (Parm, ZeroConstructor, IsPlainOldData)
// TScriptInterface<class UXLABInteractionHandler> Handler                        (Parm, ZeroConstructor, IsPlainOldData)
// TScriptInterface<class UXLABInteractive> Interactive                    (Parm, ZeroConstructor, IsPlainOldData)

void UForceSocketComponent::OnHandInteraction(EXLABInteractionEventType EventType, const TScriptInterface<class UXLABInteractionHandler>& Handler, const TScriptInterface<class UXLABInteractive>& Interactive)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ForceSocketComponent.OnHandInteraction");

	UForceSocketComponent_OnHandInteraction_Params params;
	params.EventType = EventType;
	params.Handler = Handler;
	params.Interactive = Interactive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ForceSocketComponent.OnEndOverlap
// (Final, Native, Protected)
// Parameters:
// class UPrimitiveComponent*     OverlappedComponent            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            OtherBodyIndex                 (Parm, ZeroConstructor, IsPlainOldData)

void UForceSocketComponent::OnEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ForceSocketComponent.OnEndOverlap");

	UForceSocketComponent_OnEndOverlap_Params params;
	params.OverlappedComponent = OverlappedComponent;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ForceSocketComponent.OnBeginOverlap
// (Final, Native, Protected, HasOutParms)
// Parameters:
// class UPrimitiveComponent*     OverlappedComponent            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            OtherBodyIndex                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFromSweep                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepResult                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void UForceSocketComponent::OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ForceSocketComponent.OnBeginOverlap");

	UForceSocketComponent_OnBeginOverlap_Params params;
	params.OverlappedComponent = OverlappedComponent;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;
	params.bFromSweep = bFromSweep;
	params.SweepResult = SweepResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ForceSocketComponent.GetOverlapVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UShapeComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UShapeComponent* UForceSocketComponent::GetOverlapVolume()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ForceSocketComponent.GetOverlapVolume");

	UForceSocketComponent_GetOverlapVolume_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.FrontendInteractionController.UpdateUsedHandForInteraction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EControllerHand                ControllerHand                 (Parm, ZeroConstructor, IsPlainOldData)

void UFrontendInteractionController::UpdateUsedHandForInteraction(EControllerHand ControllerHand)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionController.UpdateUsedHandForInteraction");

	UFrontendInteractionController_UpdateUsedHandForInteraction_Params params;
	params.ControllerHand = ControllerHand;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.FrontendInteractionController.SetTraceLength
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Length                         (Parm, ZeroConstructor, IsPlainOldData)

void UFrontendInteractionController::SetTraceLength(float Length)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionController.SetTraceLength");

	UFrontendInteractionController_SetTraceLength_Params params;
	params.Length = Length;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.FrontendInteractionController.SetTraceChannel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<ECollisionChannel> CollisionChannel               (Parm, ZeroConstructor, IsPlainOldData)

void UFrontendInteractionController::SetTraceChannel(TEnumAsByte<ECollisionChannel> CollisionChannel)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionController.SetTraceChannel");

	UFrontendInteractionController_SetTraceChannel_Params params;
	params.CollisionChannel = CollisionChannel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.FrontendInteractionController.SetInteractionMethod
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EInteractionMethodEnum         NewInteractionMethod           (Parm, ZeroConstructor, IsPlainOldData)

void UFrontendInteractionController::SetInteractionMethod(EInteractionMethodEnum NewInteractionMethod)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionController.SetInteractionMethod");

	UFrontendInteractionController_SetInteractionMethod_Params params;
	params.NewInteractionMethod = NewInteractionMethod;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.FrontendInteractionController.ReleaseInteractionKey
// (Final, Native, Public, BlueprintCallable)

void UFrontendInteractionController::ReleaseInteractionKey()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionController.ReleaseInteractionKey");

	UFrontendInteractionController_ReleaseInteractionKey_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.FrontendInteractionController.PressInteractionKey
// (Final, Native, Public, BlueprintCallable)

void UFrontendInteractionController::PressInteractionKey()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionController.PressInteractionKey");

	UFrontendInteractionController_PressInteractionKey_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.FrontendInteractionController.IsInteractionKeyPressed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UFrontendInteractionController::IsInteractionKeyPressed()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionController.IsInteractionKeyPressed");

	UFrontendInteractionController_IsInteractionKeyPressed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.FrontendInteractionController.GetMotionControllerComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMotionControllerComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UMotionControllerComponent* UFrontendInteractionController::GetMotionControllerComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionController.GetMotionControllerComponent");

	UFrontendInteractionController_GetMotionControllerComponent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.FrontendInteractionController.GetMotionController
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AWKNDMotionController*   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AWKNDMotionController* UFrontendInteractionController::GetMotionController()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionController.GetMotionController");

	UFrontendInteractionController_GetMotionController_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.FrontendInteractionController.GetLaserHitResults
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FHitResult              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FHitResult UFrontendInteractionController::GetLaserHitResults()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionController.GetLaserHitResults");

	UFrontendInteractionController_GetLaserHitResults_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.FrontendInteractionController.GetInteractionMethod
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EInteractionMethodEnum         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EInteractionMethodEnum UFrontendInteractionController::GetInteractionMethod()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionController.GetInteractionMethod");

	UFrontendInteractionController_GetInteractionMethod_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.FrontendInteractionController.GetHoveredActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* UFrontendInteractionController::GetHoveredActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionController.GetHoveredActor");

	UFrontendInteractionController_GetHoveredActor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.FrontendInteractionController.GetHandHitResult
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FHitResult              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FHitResult UFrontendInteractionController::GetHandHitResult()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionController.GetHandHitResult");

	UFrontendInteractionController_GetHandHitResult_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.FrontendInteractionController.Deactivate
// (Native, Public, BlueprintCallable)

void UFrontendInteractionController::Deactivate()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionController.Deactivate");

	UFrontendInteractionController_Deactivate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.FrontendInteractionController.Activate
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bReset                         (Parm, ZeroConstructor, IsPlainOldData)

void UFrontendInteractionController::Activate(bool bReset)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionController.Activate");

	UFrontendInteractionController_Activate_Params params;
	params.bReset = bReset;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.FrontendInteractionInterface.UpButton_Release
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UFrontendInteractionInterface::UpButton_Release()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionInterface.UpButton_Release");

	UFrontendInteractionInterface_UpButton_Release_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.FrontendInteractionInterface.UpButton_Press
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UFrontendInteractionInterface::UpButton_Press()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionInterface.UpButton_Press");

	UFrontendInteractionInterface_UpButton_Press_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.FrontendInteractionInterface.UpButton_HoverEnd
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UFrontendInteractionInterface::UpButton_HoverEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionInterface.UpButton_HoverEnd");

	UFrontendInteractionInterface_UpButton_HoverEnd_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.FrontendInteractionInterface.UpButton_HoverBegin
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UFrontendInteractionInterface::UpButton_HoverBegin()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionInterface.UpButton_HoverBegin");

	UFrontendInteractionInterface_UpButton_HoverBegin_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.FrontendInteractionInterface.RadialButton_ValueChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                          TwistValue                     (Parm, ZeroConstructor, IsPlainOldData)

void UFrontendInteractionInterface::RadialButton_ValueChanged(float TwistValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionInterface.RadialButton_ValueChanged");

	UFrontendInteractionInterface_RadialButton_ValueChanged_Params params;
	params.TwistValue = TwistValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.FrontendInteractionInterface.DownButton_Release
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UFrontendInteractionInterface::DownButton_Release()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionInterface.DownButton_Release");

	UFrontendInteractionInterface_DownButton_Release_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.FrontendInteractionInterface.DownButton_Press
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UFrontendInteractionInterface::DownButton_Press()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionInterface.DownButton_Press");

	UFrontendInteractionInterface_DownButton_Press_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.FrontendInteractionInterface.DownButton_HoverEnd
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UFrontendInteractionInterface::DownButton_HoverEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionInterface.DownButton_HoverEnd");

	UFrontendInteractionInterface_DownButton_HoverEnd_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.FrontendInteractionInterface.DownButton_HoverBegin
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UFrontendInteractionInterface::DownButton_HoverBegin()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionInterface.DownButton_HoverBegin");

	UFrontendInteractionInterface_DownButton_HoverBegin_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.FrontendInteractionInterface.Button4_Release
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UFrontendInteractionInterface::Button4_Release()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionInterface.Button4_Release");

	UFrontendInteractionInterface_Button4_Release_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.FrontendInteractionInterface.Button4_Press
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UFrontendInteractionInterface::Button4_Press()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionInterface.Button4_Press");

	UFrontendInteractionInterface_Button4_Press_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.FrontendInteractionInterface.Button4_HoverEnd
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UFrontendInteractionInterface::Button4_HoverEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionInterface.Button4_HoverEnd");

	UFrontendInteractionInterface_Button4_HoverEnd_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.FrontendInteractionInterface.Button4_HoverBegin
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UFrontendInteractionInterface::Button4_HoverBegin()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionInterface.Button4_HoverBegin");

	UFrontendInteractionInterface_Button4_HoverBegin_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.FrontendInteractionInterface.Button3_Release
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UFrontendInteractionInterface::Button3_Release()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionInterface.Button3_Release");

	UFrontendInteractionInterface_Button3_Release_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.FrontendInteractionInterface.Button3_Press
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UFrontendInteractionInterface::Button3_Press()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionInterface.Button3_Press");

	UFrontendInteractionInterface_Button3_Press_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.FrontendInteractionInterface.Button3_HoverEnd
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UFrontendInteractionInterface::Button3_HoverEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionInterface.Button3_HoverEnd");

	UFrontendInteractionInterface_Button3_HoverEnd_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.FrontendInteractionInterface.Button3_HoverBegin
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UFrontendInteractionInterface::Button3_HoverBegin()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionInterface.Button3_HoverBegin");

	UFrontendInteractionInterface_Button3_HoverBegin_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.FrontendInteractionInterface.Button2_Release
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UFrontendInteractionInterface::Button2_Release()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionInterface.Button2_Release");

	UFrontendInteractionInterface_Button2_Release_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.FrontendInteractionInterface.Button2_Press
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UFrontendInteractionInterface::Button2_Press()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionInterface.Button2_Press");

	UFrontendInteractionInterface_Button2_Press_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.FrontendInteractionInterface.Button2_HoverEnd
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UFrontendInteractionInterface::Button2_HoverEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionInterface.Button2_HoverEnd");

	UFrontendInteractionInterface_Button2_HoverEnd_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.FrontendInteractionInterface.Button2_HoverBegin
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UFrontendInteractionInterface::Button2_HoverBegin()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionInterface.Button2_HoverBegin");

	UFrontendInteractionInterface_Button2_HoverBegin_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.FrontendInteractionInterface.Button1_Release
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UFrontendInteractionInterface::Button1_Release()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionInterface.Button1_Release");

	UFrontendInteractionInterface_Button1_Release_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.FrontendInteractionInterface.Button1_Press
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UFrontendInteractionInterface::Button1_Press()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionInterface.Button1_Press");

	UFrontendInteractionInterface_Button1_Press_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.FrontendInteractionInterface.Button1_HoverEnd
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UFrontendInteractionInterface::Button1_HoverEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionInterface.Button1_HoverEnd");

	UFrontendInteractionInterface_Button1_HoverEnd_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.FrontendInteractionInterface.Button1_HoverBegin
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UFrontendInteractionInterface::Button1_HoverBegin()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionInterface.Button1_HoverBegin");

	UFrontendInteractionInterface_Button1_HoverBegin_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.FrontendInteractionInterface.BackButton_Release
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UFrontendInteractionInterface::BackButton_Release()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionInterface.BackButton_Release");

	UFrontendInteractionInterface_BackButton_Release_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.FrontendInteractionInterface.BackButton_Press
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UFrontendInteractionInterface::BackButton_Press()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionInterface.BackButton_Press");

	UFrontendInteractionInterface_BackButton_Press_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.FrontendInteractionInterface.BackButton_HoverEnd
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UFrontendInteractionInterface::BackButton_HoverEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionInterface.BackButton_HoverEnd");

	UFrontendInteractionInterface_BackButton_HoverEnd_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.FrontendInteractionInterface.BackButton_HoverBegin
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UFrontendInteractionInterface::BackButton_HoverBegin()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.FrontendInteractionInterface.BackButton_HoverBegin");

	UFrontendInteractionInterface_BackButton_HoverBegin_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.GeneralUtils.SetRelativeBoneRotation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UPoseableMeshComponent*  PoseableMesh                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 EulerAngles                    (Parm, IsPlainOldData)

void UGeneralUtils::STATIC_SetRelativeBoneRotation(class UPoseableMeshComponent* PoseableMesh, const struct FName& BoneName, const struct FVector& EulerAngles)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GeneralUtils.SetRelativeBoneRotation");

	UGeneralUtils_SetRelativeBoneRotation_Params params;
	params.PoseableMesh = PoseableMesh;
	params.BoneName = BoneName;
	params.EulerAngles = EulerAngles;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.GeneralUtils.SetRelativeBoneLocation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UPoseableMeshComponent*  PoseableMesh                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, IsPlainOldData)

void UGeneralUtils::STATIC_SetRelativeBoneLocation(class UPoseableMeshComponent* PoseableMesh, const struct FName& BoneName, const struct FVector& Location)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GeneralUtils.SetRelativeBoneLocation");

	UGeneralUtils_SetRelativeBoneLocation_Params params;
	params.PoseableMesh = PoseableMesh;
	params.BoneName = BoneName;
	params.Location = Location;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.GeneralUtils.NeedsEntitlementsCheck
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGeneralUtils::STATIC_NeedsEntitlementsCheck()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GeneralUtils.NeedsEntitlementsCheck");

	UGeneralUtils_NeedsEntitlementsCheck_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.GeneralUtils.ModulateOverTime
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          GameTimeInSeconds              (Parm, ZeroConstructor, IsPlainOldData)
// float                          MinValue                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaxValue                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          CycleTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UGeneralUtils::STATIC_ModulateOverTime(float GameTimeInSeconds, float MinValue, float MaxValue, float CycleTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GeneralUtils.ModulateOverTime");

	UGeneralUtils_ModulateOverTime_Params params;
	params.GameTimeInSeconds = GameTimeInSeconds;
	params.MinValue = MinValue;
	params.MaxValue = MaxValue;
	params.CycleTime = CycleTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.GeneralUtils.MakeActorAndAttachedHiddenInGameRecur
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                  TargetActor                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           hidden                         (Parm, ZeroConstructor, IsPlainOldData)

void UGeneralUtils::STATIC_MakeActorAndAttachedHiddenInGameRecur(class AActor* TargetActor, bool hidden)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GeneralUtils.MakeActorAndAttachedHiddenInGameRecur");

	UGeneralUtils_MakeActorAndAttachedHiddenInGameRecur_Params params;
	params.TargetActor = TargetActor;
	params.hidden = hidden;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.GeneralUtils.IsLowQualityHardware
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGeneralUtils::STATIC_IsLowQualityHardware()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GeneralUtils.IsLowQualityHardware");

	UGeneralUtils_IsLowQualityHardware_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.GeneralUtils.GetWKNDPlayerPawn
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AWKNDPlayerPawn*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AWKNDPlayerPawn* UGeneralUtils::STATIC_GetWKNDPlayerPawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GeneralUtils.GetWKNDPlayerPawn");

	UGeneralUtils_GetWKNDPlayerPawn_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.GeneralUtils.GetTelemetryManager
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UTelemetryManager*       ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UTelemetryManager* UGeneralUtils::STATIC_GetTelemetryManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GeneralUtils.GetTelemetryManager");

	UGeneralUtils_GetTelemetryManager_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.GeneralUtils.GetRewardsManager
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class URewardsManager*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class URewardsManager* UGeneralUtils::STATIC_GetRewardsManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GeneralUtils.GetRewardsManager");

	UGeneralUtils_GetRewardsManager_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.GeneralUtils.GetRatingsManager
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class URatingsManager*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class URatingsManager* UGeneralUtils::STATIC_GetRatingsManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GeneralUtils.GetRatingsManager");

	UGeneralUtils_GetRatingsManager_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.GeneralUtils.GetComponentsByInterfaceAndTag
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                  OwnerActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  InterfaceUClass                (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   Tag                            (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class UActorComponent*> ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class UActorComponent*> UGeneralUtils::STATIC_GetComponentsByInterfaceAndTag(class AActor* OwnerActor, class UClass* InterfaceUClass, const struct FName& Tag)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GeneralUtils.GetComponentsByInterfaceAndTag");

	UGeneralUtils_GetComponentsByInterfaceAndTag_Params params;
	params.OwnerActor = OwnerActor;
	params.InterfaceUClass = InterfaceUClass;
	params.Tag = Tag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.GeneralUtils.GetComponentsByInterface
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                  OwnerActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  InterfaceUClass                (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class UActorComponent*> ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class UActorComponent*> UGeneralUtils::STATIC_GetComponentsByInterface(class AActor* OwnerActor, class UClass* InterfaceUClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GeneralUtils.GetComponentsByInterface");

	UGeneralUtils_GetComponentsByInterface_Params params;
	params.OwnerActor = OwnerActor;
	params.InterfaceUClass = InterfaceUClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.GeneralUtils.GetComponentByInterface
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                  OwnerActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  InterfaceUClass                (Parm, ZeroConstructor, IsPlainOldData)
// class UActorComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UActorComponent* UGeneralUtils::STATIC_GetComponentByInterface(class AActor* OwnerActor, class UClass* InterfaceUClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GeneralUtils.GetComponentByInterface");

	UGeneralUtils_GetComponentByInterface_Params params;
	params.OwnerActor = OwnerActor;
	params.InterfaceUClass = InterfaceUClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.GeneralUtils.DisableTickCollisionPhysicsGrabbable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                  TargetActor                    (Parm, ZeroConstructor, IsPlainOldData)

void UGeneralUtils::STATIC_DisableTickCollisionPhysicsGrabbable(class AActor* TargetActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GeneralUtils.DisableTickCollisionPhysicsGrabbable");

	UGeneralUtils_DisableTickCollisionPhysicsGrabbable_Params params;
	params.TargetActor = TargetActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RunningAverage.GetTotalSamplesTaken
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int URunningAverage::GetTotalSamplesTaken()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RunningAverage.GetTotalSamplesTaken");

	URunningAverage_GetTotalSamplesTaken_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RunningAverage.Clear
// (Final, Native, Public, BlueprintCallable)

void URunningAverage::Clear()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RunningAverage.Clear");

	URunningAverage_Clear_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RunningAverage.CalculateAverage
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float URunningAverage::CalculateAverage()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RunningAverage.CalculateAverage");

	URunningAverage_CalculateAverage_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RunningAverage.AddSample
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Sample                         (Parm, ZeroConstructor, IsPlainOldData)

void URunningAverage::AddSample(float Sample)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RunningAverage.AddSample");

	URunningAverage_AddSample_Params params;
	params.Sample = Sample;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.GhostingTriggerComponent.ShouldGhost
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGhostingTriggerComponent::ShouldGhost()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GhostingTriggerComponent.ShouldGhost");

	UGhostingTriggerComponent_ShouldGhost_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.GhostingTriggerComponent.SetShouldGhostWithMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bShouldGhost                   (Parm, ZeroConstructor, IsPlainOldData)
// EGhostingReason                GhostingReason                 (Parm, ZeroConstructor, IsPlainOldData)
// EGhostingMode                  NewGhostingMode                (Parm, ZeroConstructor, IsPlainOldData)

void UGhostingTriggerComponent::SetShouldGhostWithMode(bool bShouldGhost, EGhostingReason GhostingReason, EGhostingMode NewGhostingMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GhostingTriggerComponent.SetShouldGhostWithMode");

	UGhostingTriggerComponent_SetShouldGhostWithMode_Params params;
	params.bShouldGhost = bShouldGhost;
	params.GhostingReason = GhostingReason;
	params.NewGhostingMode = NewGhostingMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.GhostingTriggerComponent.SetShouldGhost
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bShouldGhost                   (Parm, ZeroConstructor, IsPlainOldData)
// EGhostingReason                GhostingReason                 (Parm, ZeroConstructor, IsPlainOldData)

void UGhostingTriggerComponent::SetShouldGhost(bool bShouldGhost, EGhostingReason GhostingReason)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GhostingTriggerComponent.SetShouldGhost");

	UGhostingTriggerComponent_SetShouldGhost_Params params;
	params.bShouldGhost = bShouldGhost;
	params.GhostingReason = GhostingReason;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.GhostingTriggerComponent.SetPrimitiveComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*     Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UGhostingTriggerComponent::SetPrimitiveComponent(class UPrimitiveComponent* Component)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GhostingTriggerComponent.SetPrimitiveComponent");

	UGhostingTriggerComponent_SetPrimitiveComponent_Params params;
	params.Component = Component;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.GhostingTriggerComponent.SetMaterialParameterName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)

void UGhostingTriggerComponent::SetMaterialParameterName(const struct FName& ParameterName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GhostingTriggerComponent.SetMaterialParameterName");

	UGhostingTriggerComponent_SetMaterialParameterName_Params params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.GhostingTriggerComponent.RemoveTrackedComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*     ComponentToRemove              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UGhostingTriggerComponent::RemoveTrackedComponent(class UPrimitiveComponent* ComponentToRemove)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GhostingTriggerComponent.RemoveTrackedComponent");

	UGhostingTriggerComponent_RemoveTrackedComponent_Params params;
	params.ComponentToRemove = ComponentToRemove;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.GhostingTriggerComponent.OnOverlapEnd
// (Final, Native, Private)
// Parameters:
// class UPrimitiveComponent*     OverlappedComponent            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            OtherBodyIndex                 (Parm, ZeroConstructor, IsPlainOldData)

void UGhostingTriggerComponent::OnOverlapEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GhostingTriggerComponent.OnOverlapEnd");

	UGhostingTriggerComponent_OnOverlapEnd_Params params;
	params.OverlappedComponent = OverlappedComponent;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.GhostingTriggerComponent.OnOverlapBegin
// (Final, Native, Private, HasOutParms)
// Parameters:
// class UPrimitiveComponent*     OverlappedComponent            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            OtherBodyIndex                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFromSweep                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepResult                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void UGhostingTriggerComponent::OnOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GhostingTriggerComponent.OnOverlapBegin");

	UGhostingTriggerComponent_OnOverlapBegin_Params params;
	params.OverlappedComponent = OverlappedComponent;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;
	params.bFromSweep = bFromSweep;
	params.SweepResult = SweepResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.GhostingTriggerComponent.GetDynamicMaterialInstances
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UMaterialInstanceDynamic*> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class UMaterialInstanceDynamic*> UGhostingTriggerComponent::GetDynamicMaterialInstances()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GhostingTriggerComponent.GetDynamicMaterialInstances");

	UGhostingTriggerComponent_GetDynamicMaterialInstances_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.GhostingTriggerComponent.DeactivateGhosting
// (Native, Public, BlueprintCallable)

void UGhostingTriggerComponent::DeactivateGhosting()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GhostingTriggerComponent.DeactivateGhosting");

	UGhostingTriggerComponent_DeactivateGhosting_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.GhostingTriggerComponent.AddTrackedComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*     ComponentToAdd                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UGhostingTriggerComponent::AddTrackedComponent(class UPrimitiveComponent* ComponentToAdd)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GhostingTriggerComponent.AddTrackedComponent");

	UGhostingTriggerComponent_AddTrackedComponent_Params params;
	params.ComponentToAdd = ComponentToAdd;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.GhostingTriggerComponent.ActivateGhosting
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bSkipAutomaticChecks           (Parm, ZeroConstructor, IsPlainOldData)

void UGhostingTriggerComponent::ActivateGhosting(bool bSkipAutomaticChecks)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GhostingTriggerComponent.ActivateGhosting");

	UGhostingTriggerComponent_ActivateGhosting_Params params;
	params.bSkipAutomaticChecks = bSkipAutomaticChecks;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.GrabbableCrankingComponent.SetAllowedRotationDirection
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                 Emitter                        (Parm, ZeroConstructor, IsPlainOldData)
// EAllowedRotationDirection      AllowedRotationDirection       (Parm, ZeroConstructor, IsPlainOldData)

void UGrabbableCrankingComponent::SetAllowedRotationDirection(class UObject* Emitter, EAllowedRotationDirection AllowedRotationDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GrabbableCrankingComponent.SetAllowedRotationDirection");

	UGrabbableCrankingComponent_SetAllowedRotationDirection_Params params;
	params.Emitter = Emitter;
	params.AllowedRotationDirection = AllowedRotationDirection;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.GrabbableCrankingComponent.LockAtCurrentRotation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                 Emitter                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ShouldLock                     (Parm, ZeroConstructor, IsPlainOldData)

void UGrabbableCrankingComponent::LockAtCurrentRotation(class UObject* Emitter, bool ShouldLock)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GrabbableCrankingComponent.LockAtCurrentRotation");

	UGrabbableCrankingComponent_LockAtCurrentRotation_Params params;
	params.Emitter = Emitter;
	params.ShouldLock = ShouldLock;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.GrabbableCrankingComponent.GetPoseableMeshComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UPoseableMeshComponent*  ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UPoseableMeshComponent* UGrabbableCrankingComponent::GetPoseableMeshComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GrabbableCrankingComponent.GetPoseableMeshComponent");

	UGrabbableCrankingComponent_GetPoseableMeshComponent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.GrabbableCrankingComponent.GetCurrentRotationAngle
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 Emitter                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UGrabbableCrankingComponent::GetCurrentRotationAngle(class UObject* Emitter)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GrabbableCrankingComponent.GetCurrentRotationAngle");

	UGrabbableCrankingComponent_GetCurrentRotationAngle_Params params;
	params.Emitter = Emitter;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.GrabbableDeformerComponent.SetSkeletalMeshComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*  SkeletalMeshComponent          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UGrabbableDeformerComponent::SetSkeletalMeshComponent(class USkeletalMeshComponent* SkeletalMeshComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GrabbableDeformerComponent.SetSkeletalMeshComponent");

	UGrabbableDeformerComponent_SetSkeletalMeshComponent_Params params;
	params.SkeletalMeshComponent = SkeletalMeshComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.GrabbableDeformerComponent.SetDeformationAmount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   EmitterTag                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeformationAmount              (Parm, ZeroConstructor, IsPlainOldData)

void UGrabbableDeformerComponent::SetDeformationAmount(const struct FName& EmitterTag, float DeformationAmount)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GrabbableDeformerComponent.SetDeformationAmount");

	UGrabbableDeformerComponent_SetDeformationAmount_Params params;
	params.EmitterTag = EmitterTag;
	params.DeformationAmount = DeformationAmount;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.GrabbableDeformerComponent.GetSkeletalMeshComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class USkeletalMeshComponent*  ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class USkeletalMeshComponent* UGrabbableDeformerComponent::GetSkeletalMeshComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GrabbableDeformerComponent.GetSkeletalMeshComponent");

	UGrabbableDeformerComponent_GetSkeletalMeshComponent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.GrabbableMoverComponent.SetPoseableMeshComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPoseableMeshComponent*  PoseableMesh                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UGrabbableMoverComponent::SetPoseableMeshComponent(class UPoseableMeshComponent* PoseableMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GrabbableMoverComponent.SetPoseableMeshComponent");

	UGrabbableMoverComponent_SetPoseableMeshComponent_Params params;
	params.PoseableMesh = PoseableMesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.GrabbableMoverComponent.OverrideCurrentBoneExtension
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                 Emitter                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          NewBoneExtension               (Parm, ZeroConstructor, IsPlainOldData)

void UGrabbableMoverComponent::OverrideCurrentBoneExtension(class UObject* Emitter, float NewBoneExtension)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GrabbableMoverComponent.OverrideCurrentBoneExtension");

	UGrabbableMoverComponent_OverrideCurrentBoneExtension_Params params;
	params.Emitter = Emitter;
	params.NewBoneExtension = NewBoneExtension;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.GrabbableMoverComponent.LockAtCurrentLocation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                 Emitter                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ShouldLock                     (Parm, ZeroConstructor, IsPlainOldData)

void UGrabbableMoverComponent::LockAtCurrentLocation(class UObject* Emitter, bool ShouldLock)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GrabbableMoverComponent.LockAtCurrentLocation");

	UGrabbableMoverComponent_LockAtCurrentLocation_Params params;
	params.Emitter = Emitter;
	params.ShouldLock = ShouldLock;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.GrabbableMoverComponent.GetPoseableMeshComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UPoseableMeshComponent*  ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UPoseableMeshComponent* UGrabbableMoverComponent::GetPoseableMeshComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GrabbableMoverComponent.GetPoseableMeshComponent");

	UGrabbableMoverComponent_GetPoseableMeshComponent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.GrabbableSpinnerComponent.LockRotation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*         Emitter                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           ShouldLock                     (Parm, ZeroConstructor, IsPlainOldData)

void UGrabbableSpinnerComponent::LockRotation(class USceneComponent* Emitter, bool ShouldLock)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GrabbableSpinnerComponent.LockRotation");

	UGrabbableSpinnerComponent_LockRotation_Params params;
	params.Emitter = Emitter;
	params.ShouldLock = ShouldLock;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.GrabbableSpinnerComponent.LockAllRotation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ShouldLock                     (Parm, ZeroConstructor, IsPlainOldData)

void UGrabbableSpinnerComponent::LockAllRotation(bool ShouldLock)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GrabbableSpinnerComponent.LockAllRotation");

	UGrabbableSpinnerComponent_LockAllRotation_Params params;
	params.ShouldLock = ShouldLock;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.GrabbableSpinnerComponent.GetPoseableMeshComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UPoseableMeshComponent*  ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UPoseableMeshComponent* UGrabbableSpinnerComponent::GetPoseableMeshComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GrabbableSpinnerComponent.GetPoseableMeshComponent");

	UGrabbableSpinnerComponent_GetPoseableMeshComponent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.GrabbableSpinnerComponent.GetAngularMomentum
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class USceneComponent*         Emitter                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UGrabbableSpinnerComponent::GetAngularMomentum(class USceneComponent* Emitter)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GrabbableSpinnerComponent.GetAngularMomentum");

	UGrabbableSpinnerComponent_GetAngularMomentum_Params params;
	params.Emitter = Emitter;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.GrabbableTouchComponent.ResetTouch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                 Emitter                        (Parm, ZeroConstructor, IsPlainOldData)

void UGrabbableTouchComponent::ResetTouch(class UObject* Emitter)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GrabbableTouchComponent.ResetTouch");

	UGrabbableTouchComponent_ResetTouch_Params params;
	params.Emitter = Emitter;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.GrabbableTwisterComponent.SetSkeletalMeshComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*  SkeletalMesh                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UGrabbableTwisterComponent::SetSkeletalMeshComponent(class USkeletalMeshComponent* SkeletalMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GrabbableTwisterComponent.SetSkeletalMeshComponent");

	UGrabbableTwisterComponent_SetSkeletalMeshComponent_Params params;
	params.SkeletalMesh = SkeletalMesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.GrabbableTwisterComponent.SetPoseableMeshComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPoseableMeshComponent*  PoseableMesh                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UGrabbableTwisterComponent::SetPoseableMeshComponent(class UPoseableMeshComponent* PoseableMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GrabbableTwisterComponent.SetPoseableMeshComponent");

	UGrabbableTwisterComponent_SetPoseableMeshComponent_Params params;
	params.PoseableMesh = PoseableMesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.GrabbableTwisterComponent.SetMinMaxAngleConstraintForEmitter
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 Emitter                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               MinMaxAngleConstraint          (Parm, IsPlainOldData)

void UGrabbableTwisterComponent::SetMinMaxAngleConstraintForEmitter(class UObject* Emitter, const struct FVector2D& MinMaxAngleConstraint)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GrabbableTwisterComponent.SetMinMaxAngleConstraintForEmitter");

	UGrabbableTwisterComponent_SetMinMaxAngleConstraintForEmitter_Params params;
	params.Emitter = Emitter;
	params.MinMaxAngleConstraint = MinMaxAngleConstraint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.GrabbableTwisterComponent.SetBoneNameForEmitter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                 Emitter                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)

void UGrabbableTwisterComponent::SetBoneNameForEmitter(class UObject* Emitter, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GrabbableTwisterComponent.SetBoneNameForEmitter");

	UGrabbableTwisterComponent_SetBoneNameForEmitter_Params params;
	params.Emitter = Emitter;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.GrabbableTwisterComponent.NotifyTwistingStopped
// (Final, Native, Public, BlueprintCallable)

void UGrabbableTwisterComponent::NotifyTwistingStopped()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GrabbableTwisterComponent.NotifyTwistingStopped");

	UGrabbableTwisterComponent_NotifyTwistingStopped_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.GrabbableTwisterComponent.LockAtCurrentRotation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                 Emitter                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ShouldLock                     (Parm, ZeroConstructor, IsPlainOldData)

void UGrabbableTwisterComponent::LockAtCurrentRotation(class UObject* Emitter, bool ShouldLock)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GrabbableTwisterComponent.LockAtCurrentRotation");

	UGrabbableTwisterComponent_LockAtCurrentRotation_Params params;
	params.Emitter = Emitter;
	params.ShouldLock = ShouldLock;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.GrabbableTwisterComponent.GetSkeletalMeshComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class USkeletalMeshComponent*  ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class USkeletalMeshComponent* UGrabbableTwisterComponent::GetSkeletalMeshComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GrabbableTwisterComponent.GetSkeletalMeshComponent");

	UGrabbableTwisterComponent_GetSkeletalMeshComponent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.GrabbableTwisterComponent.GetPoseableMeshComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UPoseableMeshComponent*  ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UPoseableMeshComponent* UGrabbableTwisterComponent::GetPoseableMeshComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GrabbableTwisterComponent.GetPoseableMeshComponent");

	UGrabbableTwisterComponent_GetPoseableMeshComponent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.GrabbableTwisterComponent.GetCurrentTwistAngle
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 Emitter                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UGrabbableTwisterComponent::GetCurrentTwistAngle(class UObject* Emitter)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GrabbableTwisterComponent.GetCurrentTwistAngle");

	UGrabbableTwisterComponent_GetCurrentTwistAngle_Params params;
	params.Emitter = Emitter;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.GrabbableTwisterComponent.EnableTwisterForEmitter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                 Emitter                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ShouldEnable                   (Parm, ZeroConstructor, IsPlainOldData)

void UGrabbableTwisterComponent::EnableTwisterForEmitter(class UObject* Emitter, bool ShouldEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GrabbableTwisterComponent.EnableTwisterForEmitter");

	UGrabbableTwisterComponent_EnableTwisterForEmitter_Params params;
	params.Emitter = Emitter;
	params.ShouldEnable = ShouldEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.GripAdjustComponent.EndGripAdjustment
// (Final, Native, Public, BlueprintCallable)

void UGripAdjustComponent::EndGripAdjustment()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GripAdjustComponent.EndGripAdjustment");

	UGripAdjustComponent_EndGripAdjustment_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.GripAdjustComponent.BeginGripAdjustment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class URPOCGrabLocatorComponent* Grab                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class USceneComponent*         Pivot                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UGripAdjustComponent::BeginGripAdjustment(class URPOCGrabLocatorComponent* Grab, class USceneComponent* Pivot)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GripAdjustComponent.BeginGripAdjustment");

	UGripAdjustComponent_BeginGripAdjustment_Params params;
	params.Grab = Grab;
	params.Pivot = Pivot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.GripAdjustComponent.AdjustByAxis
// (Final, Native, Public, HasOutParms, HasDefaults)
// Parameters:
// struct FVector                 Forward                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 Normal                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 Direction                      (Parm, OutParm, IsPlainOldData)

void UGripAdjustComponent::AdjustByAxis(const struct FVector& Forward, const struct FVector& Normal, struct FVector* Direction)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.GripAdjustComponent.AdjustByAxis");

	UGripAdjustComponent_AdjustByAxis_Params params;
	params.Forward = Forward;
	params.Normal = Normal;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Direction != nullptr)
		*Direction = params.Direction;
}


// Function WKND.HandClimbComponent.UpdateClimber
// (Final, Native, Public)
// Parameters:
// class AActor*                  climber                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)

void UHandClimbComponent::UpdateClimber(class AActor* climber, float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.HandClimbComponent.UpdateClimber");

	UHandClimbComponent_UpdateClimber_Params params;
	params.climber = climber;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.HandClimbComponent.TryGrabClimbHold
// (Final, Native, Public)
// Parameters:
// class AClimbObject*            ClimbObject                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UHandClimbComponent::TryGrabClimbHold(class AClimbObject* ClimbObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.HandClimbComponent.TryGrabClimbHold");

	UHandClimbComponent_TryGrabClimbHold_Params params;
	params.ClimbObject = ClimbObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.HandClimbComponent.StopClimbHold
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           Force                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           WithFallBehaviour              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UHandClimbComponent::StopClimbHold(bool Force, bool WithFallBehaviour)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.HandClimbComponent.StopClimbHold");

	UHandClimbComponent_StopClimbHold_Params params;
	params.Force = Force;
	params.WithFallBehaviour = WithFallBehaviour;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.HandClimbComponent.StartFall
// (Final, Native, Protected)
// Parameters:
// class AClimbDismount*          DismountPoint                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UHandClimbComponent::StartFall(class AClimbDismount* DismountPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.HandClimbComponent.StartFall");

	UHandClimbComponent_StartFall_Params params;
	params.DismountPoint = DismountPoint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.HandClimbComponent.StartClimbShock
// (Final, Native, Public)
// Parameters:
// float                          Magnitude                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UHandClimbComponent::StartClimbShock(float Magnitude, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.HandClimbComponent.StartClimbShock");

	UHandClimbComponent_StartClimbShock_Params params;
	params.Magnitude = Magnitude;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.HandClimbComponent.SetOtherClimber
// (Final, Native, Public)
// Parameters:
// class UHandClimbComponent*     Other                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UHandClimbComponent::SetOtherClimber(class UHandClimbComponent* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.HandClimbComponent.SetOtherClimber");

	UHandClimbComponent_SetOtherClimber_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.HandClimbComponent.SetFallSpeed
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UHandClimbComponent::SetFallSpeed(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.HandClimbComponent.SetFallSpeed");

	UHandClimbComponent_SetFallSpeed_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.HandClimbComponent.SetCurrentClimber
// (Final, Native, Public)
// Parameters:
// EClimbPrimaryToken             Token                          (Parm, ZeroConstructor, IsPlainOldData)

void UHandClimbComponent::SetCurrentClimber(EClimbPrimaryToken Token)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.HandClimbComponent.SetCurrentClimber");

	UHandClimbComponent_SetCurrentClimber_Params params;
	params.Token = Token;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.HandClimbComponent.SetClimbOffset
// (Final, Native, Public, HasDefaults)
// Parameters:
// struct FVector                 Offset                         (ConstParm, Parm, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          LerpSpeed                      (Parm, ZeroConstructor, IsPlainOldData)

void UHandClimbComponent::SetClimbOffset(const struct FVector& Offset, float DeltaTime, float LerpSpeed)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.HandClimbComponent.SetClimbOffset");

	UHandClimbComponent_SetClimbOffset_Params params;
	params.Offset = Offset;
	params.DeltaTime = DeltaTime;
	params.LerpSpeed = LerpSpeed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.HandClimbComponent.IsPrimary
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UHandClimbComponent::IsPrimary()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.HandClimbComponent.IsPrimary");

	UHandClimbComponent_IsPrimary_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.HandClimbComponent.IsLocked
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UHandClimbComponent::IsLocked()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.HandClimbComponent.IsLocked");

	UHandClimbComponent_IsLocked_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.HandClimbComponent.IsGrabbed
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UHandClimbComponent::IsGrabbed()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.HandClimbComponent.IsGrabbed");

	UHandClimbComponent_IsGrabbed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.HandClimbComponent.IsFalling
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UHandClimbComponent::IsFalling()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.HandClimbComponent.IsFalling");

	UHandClimbComponent_IsFalling_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.HandClimbComponent.HitGround
// (Final, Native, Protected)

void UHandClimbComponent::HitGround()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.HandClimbComponent.HitGround");

	UHandClimbComponent_HitGround_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.HandClimbComponent.GetClimbDistanceThisFrame
// (Final, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UHandClimbComponent::GetClimbDistanceThisFrame()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.HandClimbComponent.GetClimbDistanceThisFrame");

	UHandClimbComponent_GetClimbDistanceThisFrame_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.HandClimbComponent.GetClimbData
// (Final, Native, Public, HasOutParms, HasDefaults)
// Parameters:
// struct FVector                 Grab                           (Parm, OutParm, IsPlainOldData)
// struct FVector                 Forward                        (Parm, OutParm, IsPlainOldData)

void UHandClimbComponent::GetClimbData(struct FVector* Grab, struct FVector* Forward)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.HandClimbComponent.GetClimbData");

	UHandClimbComponent_GetClimbData_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Grab != nullptr)
		*Grab = params.Grab;
	if (Forward != nullptr)
		*Forward = params.Forward;
}


// Function WKND.HandClimbComponent.FallProgress
// (Final, Native, Protected)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UHandClimbComponent::FallProgress(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.HandClimbComponent.FallProgress");

	UHandClimbComponent_FallProgress_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.HandClimbComponent.BeginFallHaptics
// (Final, Native, Protected)

void UHandClimbComponent::BeginFallHaptics()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.HandClimbComponent.BeginFallHaptics");

	UHandClimbComponent_BeginFallHaptics_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.HBVRTransitionComponent.TriggerTransition
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVRCameraTransitionType        Type                           (Parm, ZeroConstructor, IsPlainOldData)

void UHBVRTransitionComponent::TriggerTransition(EVRCameraTransitionType Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.HBVRTransitionComponent.TriggerTransition");

	UHBVRTransitionComponent_TriggerTransition_Params params;
	params.Type = Type;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.HBVRTransitionComponent.EndTransition
// (Final, Native, Public, BlueprintCallable)

void UHBVRTransitionComponent::EndTransition()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.HBVRTransitionComponent.EndTransition");

	UHBVRTransitionComponent_EndTransition_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.HBVRTransitionData.TransitionEnd
// (Event, Public, BlueprintEvent)
// Parameters:
// class UMaterialInstanceDynamic* Material                       (Parm, ZeroConstructor, IsPlainOldData)

void UHBVRTransitionData::TransitionEnd(class UMaterialInstanceDynamic* Material)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.HBVRTransitionData.TransitionEnd");

	UHBVRTransitionData_TransitionEnd_Params params;
	params.Material = Material;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.HBVRTransitionData.TransitionBegin
// (Event, Public, BlueprintEvent)
// Parameters:
// class UMaterialInstanceDynamic* Material                       (Parm, ZeroConstructor, IsPlainOldData)

void UHBVRTransitionData::TransitionBegin(class UMaterialInstanceDynamic* Material)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.HBVRTransitionData.TransitionBegin");

	UHBVRTransitionData_TransitionBegin_Params params;
	params.Material = Material;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.CombatPointOccupant.OnAssignedToCombatPoint
// (Native, Event, Public, HasOutParms, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FKFCircleCombatPoint    CombatPoint                    (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UCombatPointOccupant::OnAssignedToCombatPoint(const struct FKFCircleCombatPoint& CombatPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatPointOccupant.OnAssignedToCombatPoint");

	UCombatPointOccupant_OnAssignedToCombatPoint_Params params;
	params.CombatPoint = CombatPoint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.CombatPointOccupant.GetPreferredCombatPoint
// (Native, Event, Public, HasOutParms, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TArray<struct FKFCircleCombatPoint> AvailableCombatPoints          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UCombatPointOccupant::GetPreferredCombatPoint(TArray<struct FKFCircleCombatPoint> AvailableCombatPoints)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatPointOccupant.GetPreferredCombatPoint");

	UCombatPointOccupant_GetPreferredCombatPoint_Params params;
	params.AvailableCombatPoints = AvailableCombatPoints;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.CombatPointOccupant.CanOccupyCombatPoint
// (Native, Event, Public, HasOutParms, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FKFCircleCombatPoint    CombatPoint                    (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UCombatPointOccupant::CanOccupyCombatPoint(const struct FKFCircleCombatPoint& CombatPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.CombatPointOccupant.CanOccupyCombatPoint");

	UCombatPointOccupant_CanOccupyCombatPoint_Params params;
	params.CombatPoint = CombatPoint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.InteractionUtils.IsBestInteractiveValid
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FXLABBestInteractiveData BestInteractive                (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UInteractionUtils::STATIC_IsBestInteractiveValid(const struct FXLABBestInteractiveData& BestInteractive)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.InteractionUtils.IsBestInteractiveValid");

	UInteractionUtils_IsBestInteractiveValid_Params params;
	params.BestInteractive = BestInteractive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.InteractionUtils.GetInteractionReceiverForHand
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// EControllerHand                Hand                           (Parm, ZeroConstructor, IsPlainOldData)
// TScriptInterface<class UXLABInteractionHandler> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TScriptInterface<class UXLABInteractionHandler> UInteractionUtils::STATIC_GetInteractionReceiverForHand(class UObject* WorldContextObject, EControllerHand Hand)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.InteractionUtils.GetInteractionReceiverForHand");

	UInteractionUtils_GetInteractionReceiverForHand_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Hand = Hand;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.InteractionUtils.GetGroupForActor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// TScriptInterface<class UXLABInteractiveGroup> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TScriptInterface<class UXLABInteractiveGroup> UInteractionUtils::STATIC_GetGroupForActor(class AActor* Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.InteractionUtils.GetGroupForActor");

	UInteractionUtils_GetGroupForActor_Params params;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.InteractionUtils.AdjustByAxis
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Forward                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 RotationAxis                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 DirectionToController          (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           Abs                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UInteractionUtils::STATIC_AdjustByAxis(const struct FVector& Forward, const struct FVector& RotationAxis, const struct FVector& DirectionToController, bool Abs)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.InteractionUtils.AdjustByAxis");

	UInteractionUtils_AdjustByAxis_Params params;
	params.Forward = Forward;
	params.RotationAxis = RotationAxis;
	params.DirectionToController = DirectionToController;
	params.Abs = Abs;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.KungFuCircleSquad.StartAttackCooldown
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// ENPCCombatType                 NPCCombatType                  (Parm, ZeroConstructor, IsPlainOldData)

void AKungFuCircleSquad::StartAttackCooldown(ENPCCombatType NPCCombatType)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.KungFuCircleSquad.StartAttackCooldown");

	AKungFuCircleSquad_StartAttackCooldown_Params params;
	params.NPCCombatType = NPCCombatType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.KungFuCircleSquad.ResetCombatPoints
// (Final, Native, Protected, BlueprintCallable)

void AKungFuCircleSquad::ResetCombatPoints()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.KungFuCircleSquad.ResetCombatPoints");

	AKungFuCircleSquad_ResetCombatPoints_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.KungFuCircleSquad.ResetAttackCooldowns
// (Final, Native, Protected, BlueprintCallable)

void AKungFuCircleSquad::ResetAttackCooldowns()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.KungFuCircleSquad.ResetAttackCooldowns");

	AKungFuCircleSquad_ResetAttackCooldowns_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.KungFuCircleSquad.ResetAttackCooldownByType
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// ENPCCombatType                 NPCCombatType                  (Parm, ZeroConstructor, IsPlainOldData)

void AKungFuCircleSquad::ResetAttackCooldownByType(ENPCCombatType NPCCombatType)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.KungFuCircleSquad.ResetAttackCooldownByType");

	AKungFuCircleSquad_ResetAttackCooldownByType_Params params;
	params.NPCCombatType = NPCCombatType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.KungFuCircleSquad.ReleaseCombatPoint
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// TScriptInterface<class UCombatSquadBehaviourInterface> SquadMember                    (Parm, ZeroConstructor, IsPlainOldData)

void AKungFuCircleSquad::ReleaseCombatPoint(const TScriptInterface<class UCombatSquadBehaviourInterface>& SquadMember)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.KungFuCircleSquad.ReleaseCombatPoint");

	AKungFuCircleSquad_ReleaseCombatPoint_Params params;
	params.SquadMember = SquadMember;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.KungFuCircleSquad.OccupyCombatPoint
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  SquadMember                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AKungFuCircleSquad::OccupyCombatPoint(int Index, class AActor* SquadMember)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.KungFuCircleSquad.OccupyCombatPoint");

	AKungFuCircleSquad_OccupyCombatPoint_Params params;
	params.Index = Index;
	params.SquadMember = SquadMember;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.KungFuCircleSquad.IsDisengaged
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class UCombatSquadBehaviourInterface> Member                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AKungFuCircleSquad::IsDisengaged(const TScriptInterface<class UCombatSquadBehaviourInterface>& Member)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.KungFuCircleSquad.IsDisengaged");

	AKungFuCircleSquad_IsDisengaged_Params params;
	params.Member = Member;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.KungFuCircleSquad.IsCurrentlyOnCooldown
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ENPCCombatType                 CooldownType                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AKungFuCircleSquad::IsCurrentlyOnCooldown(ENPCCombatType CooldownType)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.KungFuCircleSquad.IsCurrentlyOnCooldown");

	AKungFuCircleSquad_IsCurrentlyOnCooldown_Params params;
	params.CooldownType = CooldownType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.KungFuCircleSquad.HandleCooldownReset
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// ENPCCombatType                 CooldownType                   (Parm, ZeroConstructor, IsPlainOldData)

void AKungFuCircleSquad::HandleCooldownReset(ENPCCombatType CooldownType)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.KungFuCircleSquad.HandleCooldownReset");

	AKungFuCircleSquad_HandleCooldownReset_Params params;
	params.CooldownType = CooldownType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.KungFuCircleSquad.GetVacantCombatPointsByType
// (Final, Native, Protected, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FKFCircleCombatPoint> VacantMeleePoints              (Parm, OutParm, ZeroConstructor)
// TArray<struct FKFCircleCombatPoint> VacantRangedPoints             (Parm, OutParm, ZeroConstructor)
// TArray<struct FKFCircleCombatPoint> VacantMixedPoints              (Parm, OutParm, ZeroConstructor)

void AKungFuCircleSquad::GetVacantCombatPointsByType(TArray<struct FKFCircleCombatPoint>* VacantMeleePoints, TArray<struct FKFCircleCombatPoint>* VacantRangedPoints, TArray<struct FKFCircleCombatPoint>* VacantMixedPoints)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.KungFuCircleSquad.GetVacantCombatPointsByType");

	AKungFuCircleSquad_GetVacantCombatPointsByType_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (VacantMeleePoints != nullptr)
		*VacantMeleePoints = params.VacantMeleePoints;
	if (VacantRangedPoints != nullptr)
		*VacantRangedPoints = params.VacantRangedPoints;
	if (VacantMixedPoints != nullptr)
		*VacantMixedPoints = params.VacantMixedPoints;
}


// Function WKND.KungFuCircleSquad.GetRandomVacantCombatPoint
// (Final, Native, Protected, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ENPCCombatType                 NPCCombatType                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FKFCircleCombatPoint    CombatPoint                    (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AKungFuCircleSquad::GetRandomVacantCombatPoint(ENPCCombatType NPCCombatType, struct FKFCircleCombatPoint* CombatPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.KungFuCircleSquad.GetRandomVacantCombatPoint");

	AKungFuCircleSquad_GetRandomVacantCombatPoint_Params params;
	params.NPCCombatType = NPCCombatType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CombatPoint != nullptr)
		*CombatPoint = params.CombatPoint;

	return params.ReturnValue;
}


// Function WKND.KungFuCircleSquad.GetRandomPointOnYZPlane
// (Final, Native, Protected, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          MaxX                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaxY                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 AnchorLocation                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 PlaneLocation                  (Parm, OutParm, IsPlainOldData)

void AKungFuCircleSquad::GetRandomPointOnYZPlane(float MaxX, float MaxY, const struct FVector& AnchorLocation, struct FVector* PlaneLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.KungFuCircleSquad.GetRandomPointOnYZPlane");

	AKungFuCircleSquad_GetRandomPointOnYZPlane_Params params;
	params.MaxX = MaxX;
	params.MaxY = MaxY;
	params.AnchorLocation = AnchorLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PlaneLocation != nullptr)
		*PlaneLocation = params.PlaneLocation;
}


// Function WKND.KungFuCircleSquad.GetRandomCandidateByCombatType
// (Final, Native, Protected, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ENPCCombatType                 NPCCombatType                  (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  Candidate                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AKungFuCircleSquad::GetRandomCandidateByCombatType(ENPCCombatType NPCCombatType, class AActor** Candidate)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.KungFuCircleSquad.GetRandomCandidateByCombatType");

	AKungFuCircleSquad_GetRandomCandidateByCombatType_Params params;
	params.NPCCombatType = NPCCombatType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Candidate != nullptr)
		*Candidate = params.Candidate;

	return params.ReturnValue;
}


// Function WKND.KungFuCircleSquad.GetRandomCandidate
// (Final, Native, Protected, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                  Candidate                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AKungFuCircleSquad::GetRandomCandidate(class AActor** Candidate)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.KungFuCircleSquad.GetRandomCandidate");

	AKungFuCircleSquad_GetRandomCandidate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Candidate != nullptr)
		*Candidate = params.Candidate;

	return params.ReturnValue;
}


// Function WKND.KungFuCircleSquad.GetLocationAroundTargetActor
// (Final, Native, Protected, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                  TargetActor                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          Angle                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          Height                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, OutParm, IsPlainOldData)

void AKungFuCircleSquad::GetLocationAroundTargetActor(class AActor* TargetActor, float Angle, float Distance, float Height, struct FVector* Location)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.KungFuCircleSquad.GetLocationAroundTargetActor");

	AKungFuCircleSquad_GetLocationAroundTargetActor_Params params;
	params.TargetActor = TargetActor;
	params.Angle = Angle;
	params.Distance = Distance;
	params.Height = Height;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Location != nullptr)
		*Location = params.Location;
}


// Function WKND.KungFuCircleSquad.GetCombatPointForAttacker
// (Final, Native, Protected, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class UCombatSquadBehaviourInterface> Attacker                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FKFCircleCombatPoint    CombatPoint                    (Parm, OutParm)

void AKungFuCircleSquad::GetCombatPointForAttacker(const TScriptInterface<class UCombatSquadBehaviourInterface>& Attacker, struct FKFCircleCombatPoint* CombatPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.KungFuCircleSquad.GetCombatPointForAttacker");

	AKungFuCircleSquad_GetCombatPointForAttacker_Params params;
	params.Attacker = Attacker;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CombatPoint != nullptr)
		*CombatPoint = params.CombatPoint;
}


// Function WKND.KungFuCircleSquad.GetClosestVacantCombatPoint
// (Final, Native, Protected, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                  Attacker                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FKFCircleCombatPoint    CombatPoint                    (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AKungFuCircleSquad::GetClosestVacantCombatPoint(class AActor* Attacker, struct FKFCircleCombatPoint* CombatPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.KungFuCircleSquad.GetClosestVacantCombatPoint");

	AKungFuCircleSquad_GetClosestVacantCombatPoint_Params params;
	params.Attacker = Attacker;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CombatPoint != nullptr)
		*CombatPoint = params.CombatPoint;

	return params.ReturnValue;
}


// Function WKND.KungFuCircleSquad.GetCandidates
// (Final, Native, Protected, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class AActor*>          All                            (Parm, OutParm, ZeroConstructor)
// TArray<class AActor*>          Melee                          (Parm, OutParm, ZeroConstructor)
// TArray<class AActor*>          Ranged                         (Parm, OutParm, ZeroConstructor)
// TArray<class AActor*>          Mixed                          (Parm, OutParm, ZeroConstructor)

void AKungFuCircleSquad::GetCandidates(TArray<class AActor*>* All, TArray<class AActor*>* Melee, TArray<class AActor*>* Ranged, TArray<class AActor*>* Mixed)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.KungFuCircleSquad.GetCandidates");

	AKungFuCircleSquad_GetCandidates_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (All != nullptr)
		*All = params.All;
	if (Melee != nullptr)
		*Melee = params.Melee;
	if (Ranged != nullptr)
		*Ranged = params.Ranged;
	if (Mixed != nullptr)
		*Mixed = params.Mixed;
}


// Function WKND.KungFuCircleSquad.AssignRandomCombatPointToDisengaged
// (Final, Native, Protected, HasOutParms, BlueprintCallable)
// Parameters:
// ENPCCombatType                 CombatType                     (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  Member                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AKungFuCircleSquad::AssignRandomCombatPointToDisengaged(ENPCCombatType CombatType, class AActor** Member)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.KungFuCircleSquad.AssignRandomCombatPointToDisengaged");

	AKungFuCircleSquad_AssignRandomCombatPointToDisengaged_Params params;
	params.CombatType = CombatType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Member != nullptr)
		*Member = params.Member;

	return params.ReturnValue;
}


// Function WKND.KungFuCircleSquad.AddDisengagedMember
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class AActor*                  NewDisengaged                  (Parm, ZeroConstructor, IsPlainOldData)

void AKungFuCircleSquad::AddDisengagedMember(class AActor* NewDisengaged)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.KungFuCircleSquad.AddDisengagedMember");

	AKungFuCircleSquad_AddDisengagedMember_Params params;
	params.NewDisengaged = NewDisengaged;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LightsaberBladeComponent.SetStressOnBlade
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewStress                      (Parm, ZeroConstructor, IsPlainOldData)

void ULightsaberBladeComponent::SetStressOnBlade(float NewStress)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberBladeComponent.SetStressOnBlade");

	ULightsaberBladeComponent_SetStressOnBlade_Params params;
	params.NewStress = NewStress;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LightsaberBladeComponent.SetBladeScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewBladeScale                  (Parm, ZeroConstructor, IsPlainOldData)

void ULightsaberBladeComponent::SetBladeScale(float NewBladeScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberBladeComponent.SetBladeScale");

	ULightsaberBladeComponent_SetBladeScale_Params params;
	params.NewBladeScale = NewBladeScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LightsaberBladeComponent.OnOverlapBegin
// (Final, Native, Public, HasOutParms)
// Parameters:
// class UPrimitiveComponent*     OverlappedComponent            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            OtherBodyIndex                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFromSweep                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepResult                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void ULightsaberBladeComponent::OnOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberBladeComponent.OnOverlapBegin");

	ULightsaberBladeComponent_OnOverlapBegin_Params params;
	params.OverlappedComponent = OverlappedComponent;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;
	params.bFromSweep = bFromSweep;
	params.SweepResult = SweepResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LightsaberBladeComponent.IsGlancing
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ULightsaberBladeComponent::IsGlancing()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberBladeComponent.IsGlancing");

	ULightsaberBladeComponent_IsGlancing_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.LightsaberBladeComponent.IsCutting
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ULightsaberBladeComponent::IsCutting()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberBladeComponent.IsCutting");

	ULightsaberBladeComponent_IsCutting_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.LightsaberBladeComponent.GetTipLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector ULightsaberBladeComponent::GetTipLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberBladeComponent.GetTipLocation");

	ULightsaberBladeComponent_GetTipLocation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.LightsaberBladeComponent.GetStressOnBlade
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ULightsaberBladeComponent::GetStressOnBlade()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberBladeComponent.GetStressOnBlade");

	ULightsaberBladeComponent_GetStressOnBlade_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.LightsaberBladeComponent.GetScaledBladeLength
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ULightsaberBladeComponent::GetScaledBladeLength()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberBladeComponent.GetScaledBladeLength");

	ULightsaberBladeComponent_GetScaledBladeLength_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.LightsaberBladeComponent.GetReverseCutDirection
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector ULightsaberBladeComponent::GetReverseCutDirection()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberBladeComponent.GetReverseCutDirection");

	ULightsaberBladeComponent_GetReverseCutDirection_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.LightsaberBladeComponent.GetLastFrameMovement
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ULightsaberBladeComponent::GetLastFrameMovement()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberBladeComponent.GetLastFrameMovement");

	ULightsaberBladeComponent_GetLastFrameMovement_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.LightsaberBladeComponent.GetHiltLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector ULightsaberBladeComponent::GetHiltLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberBladeComponent.GetHiltLocation");

	ULightsaberBladeComponent_GetHiltLocation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.LightsaberBladeComponent.GetCuttingPlane
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FLightsaberCuttingPlane ReturnValue                    (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm)

struct FLightsaberCuttingPlane ULightsaberBladeComponent::GetCuttingPlane()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberBladeComponent.GetCuttingPlane");

	ULightsaberBladeComponent_GetCuttingPlane_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.LightsaberBladeComponent.GetCutDirection
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector ULightsaberBladeComponent::GetCutDirection()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberBladeComponent.GetCutDirection");

	ULightsaberBladeComponent_GetCutDirection_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.LightsaberBladeComponent.GetBladeSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ULightsaberBladeComponent::GetBladeSpeed()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberBladeComponent.GetBladeSpeed");

	ULightsaberBladeComponent_GetBladeSpeed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.LightsaberBladeComponent.GetBladeScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ULightsaberBladeComponent::GetBladeScale()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberBladeComponent.GetBladeScale");

	ULightsaberBladeComponent_GetBladeScale_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.LightsaberBladeComponent.GetBladeDirection
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector ULightsaberBladeComponent::GetBladeDirection()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberBladeComponent.GetBladeDirection");

	ULightsaberBladeComponent_GetBladeDirection_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.LightsaberCuttingFX.UpdateSplineScorch
// (Final, Native, Public, BlueprintCallable)

void ALightsaberCuttingFX::UpdateSplineScorch()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberCuttingFX.UpdateSplineScorch");

	ALightsaberCuttingFX_UpdateSplineScorch_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LightsaberCuttingFX.UpdateScorchMaterialParams
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ALightsaberCuttingFX::UpdateScorchMaterialParams()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberCuttingFX.UpdateScorchMaterialParams");

	ALightsaberCuttingFX_UpdateScorchMaterialParams_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LightsaberCuttingFX.UpdatePointStabMaterialParams
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ALightsaberCuttingFX::UpdatePointStabMaterialParams()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberCuttingFX.UpdatePointStabMaterialParams");

	ALightsaberCuttingFX_UpdatePointStabMaterialParams_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LightsaberCuttingFX.UpdatePointStab
// (Final, Native, Public, BlueprintCallable)

void ALightsaberCuttingFX::UpdatePointStab()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberCuttingFX.UpdatePointStab");

	ALightsaberCuttingFX_UpdatePointStab_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LightsaberCuttingFX.UpdateGlancePFX
// (Final, Native, Public, BlueprintCallable)

void ALightsaberCuttingFX::UpdateGlancePFX()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberCuttingFX.UpdateGlancePFX");

	ALightsaberCuttingFX_UpdateGlancePFX_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LightsaberCuttingFX.UpdateGlanceDecal
// (Final, Native, Public, BlueprintCallable)

void ALightsaberCuttingFX::UpdateGlanceDecal()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberCuttingFX.UpdateGlanceDecal");

	ALightsaberCuttingFX_UpdateGlanceDecal_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LightsaberCuttingFX.UpdateCuttingPFXParams
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ALightsaberCuttingFX::UpdateCuttingPFXParams()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberCuttingFX.UpdateCuttingPFXParams");

	ALightsaberCuttingFX_UpdateCuttingPFXParams_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LightsaberCuttingFX.StopSplineScorch
// (Final, Native, Public, BlueprintCallable)

void ALightsaberCuttingFX::StopSplineScorch()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberCuttingFX.StopSplineScorch");

	ALightsaberCuttingFX_StopSplineScorch_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LightsaberCuttingFX.StopScorchMaterialParams
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ALightsaberCuttingFX::StopScorchMaterialParams()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberCuttingFX.StopScorchMaterialParams");

	ALightsaberCuttingFX_StopScorchMaterialParams_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LightsaberCuttingFX.StopPointStab
// (Final, Native, Public, BlueprintCallable)

void ALightsaberCuttingFX::StopPointStab()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberCuttingFX.StopPointStab");

	ALightsaberCuttingFX_StopPointStab_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LightsaberCuttingFX.StopGlancePFX
// (Final, Native, Public, BlueprintCallable)

void ALightsaberCuttingFX::StopGlancePFX()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberCuttingFX.StopGlancePFX");

	ALightsaberCuttingFX_StopGlancePFX_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LightsaberCuttingFX.StopCuttingPFX
// (Final, Native, Public, BlueprintCallable)

void ALightsaberCuttingFX::StopCuttingPFX()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberCuttingFX.StopCuttingPFX");

	ALightsaberCuttingFX_StopCuttingPFX_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LightsaberCuttingFX.StartSplineScorch
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Location                       (ConstParm, Parm, IsPlainOldData)

void ALightsaberCuttingFX::StartSplineScorch(const struct FVector& Location)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberCuttingFX.StartSplineScorch");

	ALightsaberCuttingFX_StartSplineScorch_Params params;
	params.Location = Location;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LightsaberCuttingFX.StartPointStab
// (Final, Native, Public, BlueprintCallable)

void ALightsaberCuttingFX::StartPointStab()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberCuttingFX.StartPointStab");

	ALightsaberCuttingFX_StartPointStab_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LightsaberCuttingFX.StartGlancePFX
// (Final, Native, Public, BlueprintCallable)

void ALightsaberCuttingFX::StartGlancePFX()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberCuttingFX.StartGlancePFX");

	ALightsaberCuttingFX_StartGlancePFX_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LightsaberCuttingFX.StartGlanceDecal
// (Final, Native, Public, BlueprintCallable)

void ALightsaberCuttingFX::StartGlanceDecal()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberCuttingFX.StartGlanceDecal");

	ALightsaberCuttingFX_StartGlanceDecal_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LightsaberCuttingFX.ScorchGeneric
// (Final, Native, Public, BlueprintCallable)

void ALightsaberCuttingFX::ScorchGeneric()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberCuttingFX.ScorchGeneric");

	ALightsaberCuttingFX_ScorchGeneric_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LightsaberCuttingFX.ReceiveOnUpdateGlance
// (Event, Public, BlueprintEvent)

void ALightsaberCuttingFX::ReceiveOnUpdateGlance()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberCuttingFX.ReceiveOnUpdateGlance");

	ALightsaberCuttingFX_ReceiveOnUpdateGlance_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LightsaberCuttingFX.ReceiveOnUpdateCut
// (Event, Public, BlueprintEvent)

void ALightsaberCuttingFX::ReceiveOnUpdateCut()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberCuttingFX.ReceiveOnUpdateCut");

	ALightsaberCuttingFX_ReceiveOnUpdateCut_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LightsaberCuttingFX.ReceiveOnStartGlance
// (Event, Public, BlueprintEvent)

void ALightsaberCuttingFX::ReceiveOnStartGlance()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberCuttingFX.ReceiveOnStartGlance");

	ALightsaberCuttingFX_ReceiveOnStartGlance_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LightsaberCuttingFX.ReceiveOnStartCut
// (Event, Public, BlueprintEvent)

void ALightsaberCuttingFX::ReceiveOnStartCut()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberCuttingFX.ReceiveOnStartCut");

	ALightsaberCuttingFX_ReceiveOnStartCut_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LightsaberCuttingFX.ReceiveOnEndGlance
// (Event, Public, BlueprintEvent)

void ALightsaberCuttingFX::ReceiveOnEndGlance()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberCuttingFX.ReceiveOnEndGlance");

	ALightsaberCuttingFX_ReceiveOnEndGlance_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LightsaberCuttingFX.ReceiveOnEndCut
// (Event, Public, BlueprintEvent)

void ALightsaberCuttingFX::ReceiveOnEndCut()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberCuttingFX.ReceiveOnEndCut");

	ALightsaberCuttingFX_ReceiveOnEndCut_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LightsaberCuttingFX.PickGlowMesh
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UInstancedStaticMeshComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UInstancedStaticMeshComponent* ALightsaberCuttingFX::PickGlowMesh()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberCuttingFX.PickGlowMesh");

	ALightsaberCuttingFX_PickGlowMesh_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.LightsaberCuttingFX.OnGlanceUpdated
// (Final, Native, Protected)

void ALightsaberCuttingFX::OnGlanceUpdated()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberCuttingFX.OnGlanceUpdated");

	ALightsaberCuttingFX_OnGlanceUpdated_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LightsaberCuttingFX.OnGlanceStarted
// (Final, Native, Protected)

void ALightsaberCuttingFX::OnGlanceStarted()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberCuttingFX.OnGlanceStarted");

	ALightsaberCuttingFX_OnGlanceStarted_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LightsaberCuttingFX.OnGlanceEnded
// (Final, Native, Protected)

void ALightsaberCuttingFX::OnGlanceEnded()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberCuttingFX.OnGlanceEnded");

	ALightsaberCuttingFX_OnGlanceEnded_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LightsaberCuttingFX.OnGlance
// (Final, Native, Protected, HasDefaults)
// Parameters:
// struct FVector                 Location                       (ConstParm, Parm, IsPlainOldData)
// struct FVector                 Normal                         (ConstParm, Parm, IsPlainOldData)
// float                          BladeSpeed                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsNewCut                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDynamic                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void ALightsaberCuttingFX::OnGlance(const struct FVector& Location, const struct FVector& Normal, float BladeSpeed, bool bIsNewCut, bool bDynamic)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberCuttingFX.OnGlance");

	ALightsaberCuttingFX_OnGlance_Params params;
	params.Location = Location;
	params.Normal = Normal;
	params.BladeSpeed = BladeSpeed;
	params.bIsNewCut = bIsNewCut;
	params.bDynamic = bDynamic;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LightsaberCuttingFX.OnCutUpdated
// (Final, Native, Protected)

void ALightsaberCuttingFX::OnCutUpdated()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberCuttingFX.OnCutUpdated");

	ALightsaberCuttingFX_OnCutUpdated_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LightsaberCuttingFX.OnCutStarted
// (Final, Native, Protected)

void ALightsaberCuttingFX::OnCutStarted()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberCuttingFX.OnCutStarted");

	ALightsaberCuttingFX_OnCutStarted_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LightsaberCuttingFX.OnCutEnded
// (Final, Native, Protected)

void ALightsaberCuttingFX::OnCutEnded()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberCuttingFX.OnCutEnded");

	ALightsaberCuttingFX_OnCutEnded_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LightsaberCuttingFX.OnCut
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FWeaponBladeCollisionPoint BladeColln                     (ConstParm, Parm, OutParm, ReferenceParm)
// float                          AbsoluteDepth                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          ChangeInDistance               (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          StressOnBlade                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsNewCut                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDynamic                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void ALightsaberCuttingFX::OnCut(const struct FWeaponBladeCollisionPoint& BladeColln, float AbsoluteDepth, float ChangeInDistance, float StressOnBlade, bool bIsNewCut, bool bDynamic)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberCuttingFX.OnCut");

	ALightsaberCuttingFX_OnCut_Params params;
	params.BladeColln = BladeColln;
	params.AbsoluteDepth = AbsoluteDepth;
	params.ChangeInDistance = ChangeInDistance;
	params.StressOnBlade = StressOnBlade;
	params.bIsNewCut = bIsNewCut;
	params.bDynamic = bDynamic;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LightsaberCuttingFX.InitScorchMaterialParams
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ALightsaberCuttingFX::InitScorchMaterialParams()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberCuttingFX.InitScorchMaterialParams");

	ALightsaberCuttingFX_InitScorchMaterialParams_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LightsaberCuttingFX.InitPointStabMaterialParams
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ALightsaberCuttingFX::InitPointStabMaterialParams()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberCuttingFX.InitPointStabMaterialParams");

	ALightsaberCuttingFX_InitPointStabMaterialParams_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LightsaberCuttingFX.InitCuttingPFXParams
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ALightsaberCuttingFX::InitCuttingPFXParams()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberCuttingFX.InitCuttingPFXParams");

	ALightsaberCuttingFX_InitCuttingPFXParams_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LightsaberCuttingFX.GetScorchMeshForSurface
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UStaticMesh* ALightsaberCuttingFX::GetScorchMeshForSurface()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberCuttingFX.GetScorchMeshForSurface");

	ALightsaberCuttingFX_GetScorchMeshForSurface_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.LightsaberCuttingFX.GetScorchMaterialForSurface
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterial*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UMaterial* ALightsaberCuttingFX::GetScorchMaterialForSurface()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberCuttingFX.GetScorchMaterialForSurface");

	ALightsaberCuttingFX_GetScorchMaterialForSurface_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.LightsaberCuttingFX.GetPointStabMaterialForSurface
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstance*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UMaterialInstance* ALightsaberCuttingFX::GetPointStabMaterialForSurface()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberCuttingFX.GetPointStabMaterialForSurface");

	ALightsaberCuttingFX_GetPointStabMaterialForSurface_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.LightsaberCuttingFX.ClearAllFX
// (Final, Native, Public, BlueprintCallable)

void ALightsaberCuttingFX::ClearAllFX()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberCuttingFX.ClearAllFX");

	ALightsaberCuttingFX_ClearAllFX_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LightsaberCuttingFX.CheckPointStabClearance
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 OutLocation                    (Parm, OutParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ALightsaberCuttingFX::CheckPointStabClearance(struct FVector* OutLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberCuttingFX.CheckPointStabClearance");

	ALightsaberCuttingFX_CheckPointStabClearance_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutLocation != nullptr)
		*OutLocation = params.OutLocation;

	return params.ReturnValue;
}


// Function WKND.LightsaberCuttingFX.AddNewSplinePoint
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Location                       (ConstParm, Parm, IsPlainOldData)

void ALightsaberCuttingFX::AddNewSplinePoint(const struct FVector& Location)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberCuttingFX.AddNewSplinePoint");

	ALightsaberCuttingFX_AddNewSplinePoint_Params params;
	params.Location = Location;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LightsaberCuttingFX.AddGlow
// (Final, Native, Public, BlueprintCallable)

void ALightsaberCuttingFX::AddGlow()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LightsaberCuttingFX.AddGlow");

	ALightsaberCuttingFX_AddGlow_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LocomotionUtils.VignetteDuringMotion
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ULocomotionUtils::STATIC_VignetteDuringMotion()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LocomotionUtils.VignetteDuringMotion");

	ULocomotionUtils_VignetteDuringMotion_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.LocomotionUtils.UseThumbstickAngleForTeleportFacing
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ULocomotionUtils::STATIC_UseThumbstickAngleForTeleportFacing()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LocomotionUtils.UseThumbstickAngleForTeleportFacing");

	ULocomotionUtils_UseThumbstickAngleForTeleportFacing_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.LocomotionUtils.ThrottleShouldSlideToStoryPoints
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ULocomotionUtils::STATIC_ThrottleShouldSlideToStoryPoints()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LocomotionUtils.ThrottleShouldSlideToStoryPoints");

	ULocomotionUtils_ThrottleShouldSlideToStoryPoints_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.LocomotionUtils.SwapThrottleHands
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ULocomotionUtils::STATIC_SwapThrottleHands()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LocomotionUtils.SwapThrottleHands");

	ULocomotionUtils_SwapThrottleHands_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.LocomotionUtils.SnapTurnsResetSlideCardinals
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ULocomotionUtils::STATIC_SnapTurnsResetSlideCardinals()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LocomotionUtils.SnapTurnsResetSlideCardinals");

	ULocomotionUtils_SnapTurnsResetSlideCardinals_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.LocomotionUtils.SnapTurnsInstant
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ULocomotionUtils::STATIC_SnapTurnsInstant()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LocomotionUtils.SnapTurnsInstant");

	ULocomotionUtils_SnapTurnsInstant_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.LocomotionUtils.SlideUsesLockedCardinalDirections
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ULocomotionUtils::STATIC_SlideUsesLockedCardinalDirections()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LocomotionUtils.SlideUsesLockedCardinalDirections");

	ULocomotionUtils_SlideUsesLockedCardinalDirections_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.LocomotionUtils.IsUsingThrottleLocomotion
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ULocomotionUtils::STATIC_IsUsingThrottleLocomotion()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LocomotionUtils.IsUsingThrottleLocomotion");

	ULocomotionUtils_IsUsingThrottleLocomotion_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.LocomotionUtils.IsUsingTeleportLocomotion
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ULocomotionUtils::STATIC_IsUsingTeleportLocomotion()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LocomotionUtils.IsUsingTeleportLocomotion");

	ULocomotionUtils_IsUsingTeleportLocomotion_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.LocomotionUtils.IsUsingSlideLocomotion
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ULocomotionUtils::STATIC_IsUsingSlideLocomotion()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LocomotionUtils.IsUsingSlideLocomotion");

	ULocomotionUtils_IsUsingSlideLocomotion_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.LocomotionUtils.IsUsingOriginalWKNDLocomotion
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ULocomotionUtils::STATIC_IsUsingOriginalWKNDLocomotion()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LocomotionUtils.IsUsingOriginalWKNDLocomotion");

	ULocomotionUtils_IsUsingOriginalWKNDLocomotion_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.LocomotionUtils.IsUsingOculusLocomotion
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ULocomotionUtils::STATIC_IsUsingOculusLocomotion()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LocomotionUtils.IsUsingOculusLocomotion");

	ULocomotionUtils_IsUsingOculusLocomotion_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.LocomotionUtils.IsUsingNewWKNDLocomotion
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ULocomotionUtils::STATIC_IsUsingNewWKNDLocomotion()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LocomotionUtils.IsUsingNewWKNDLocomotion");

	ULocomotionUtils_IsUsingNewWKNDLocomotion_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.LocomotionUtils.GetTeleportArcCast
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int ULocomotionUtils::STATIC_GetTeleportArcCast()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LocomotionUtils.GetTeleportArcCast");

	ULocomotionUtils_GetTeleportArcCast_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.LocomotionUtils.GetMandatedSnapRotateType
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int ULocomotionUtils::STATIC_GetMandatedSnapRotateType()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LocomotionUtils.GetMandatedSnapRotateType");

	ULocomotionUtils_GetMandatedSnapRotateType_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.LocomotionUtils.GetLocomotionSpeed
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int ULocomotionUtils::STATIC_GetLocomotionSpeed()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LocomotionUtils.GetLocomotionSpeed");

	ULocomotionUtils_GetLocomotionSpeed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.LocomotionUtils.GetLocomotionComfortLevel
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EComfortLevelEnum              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EComfortLevelEnum ULocomotionUtils::STATIC_GetLocomotionComfortLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LocomotionUtils.GetLocomotionComfortLevel");

	ULocomotionUtils_GetLocomotionComfortLevel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.LocomotionUtils.GetCurrentControlScheme
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EWKNDLocomotionControlScheme   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EWKNDLocomotionControlScheme ULocomotionUtils::STATIC_GetCurrentControlScheme()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LocomotionUtils.GetCurrentControlScheme");

	ULocomotionUtils_GetCurrentControlScheme_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.LocomotionUtils.FadeOutDuringAcceleration
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ULocomotionUtils::STATIC_FadeOutDuringAcceleration()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LocomotionUtils.FadeOutDuringAcceleration");

	ULocomotionUtils_FadeOutDuringAcceleration_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.LocomotionUtils.CanBridgeSeparateNavmeshes
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ULocomotionUtils::STATIC_CanBridgeSeparateNavmeshes()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LocomotionUtils.CanBridgeSeparateNavmeshes");

	ULocomotionUtils_CanBridgeSeparateNavmeshes_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.LocomotionUtils.AutoCompleteClimbs
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ULocomotionUtils::STATIC_AutoCompleteClimbs()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LocomotionUtils.AutoCompleteClimbs");

	ULocomotionUtils_AutoCompleteClimbs_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.LocomotionUtils.AllowTeleportToBypassClimbs
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ULocomotionUtils::STATIC_AllowTeleportToBypassClimbs()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LocomotionUtils.AllowTeleportToBypassClimbs");

	ULocomotionUtils_AllowTeleportToBypassClimbs_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.LocomotionUtils.AllowCameraShakes
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ULocomotionUtils::STATIC_AllowCameraShakes()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LocomotionUtils.AllowCameraShakes");

	ULocomotionUtils_AllowCameraShakes_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.LookAtControllerComponent.LookAtEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ULookAtControllerComponent::LookAtEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LookAtControllerComponent.LookAtEnabled");

	ULookAtControllerComponent_LookAtEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.LookAtControllerComponent.EnableLookAtCustom
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          FadeInTime                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ELookAtFadeType>   fadeType                       (Parm, ZeroConstructor, IsPlainOldData)

void ULookAtControllerComponent::EnableLookAtCustom(float FadeInTime, TEnumAsByte<ELookAtFadeType> fadeType)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LookAtControllerComponent.EnableLookAtCustom");

	ULookAtControllerComponent_EnableLookAtCustom_Params params;
	params.FadeInTime = FadeInTime;
	params.fadeType = fadeType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LookAtControllerComponent.EnableLookAt
// (Final, Native, Public, BlueprintCallable)

void ULookAtControllerComponent::EnableLookAt()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LookAtControllerComponent.EnableLookAt");

	ULookAtControllerComponent_EnableLookAt_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LookAtControllerComponent.DisableLookAtCustom
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          FadeOutTime                    (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ELookAtFadeType>   fadeType                       (Parm, ZeroConstructor, IsPlainOldData)

void ULookAtControllerComponent::DisableLookAtCustom(float FadeOutTime, TEnumAsByte<ELookAtFadeType> fadeType)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LookAtControllerComponent.DisableLookAtCustom");

	ULookAtControllerComponent_DisableLookAtCustom_Params params;
	params.FadeOutTime = FadeOutTime;
	params.fadeType = fadeType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.LookAtControllerComponent.DisableLookAt
// (Final, Native, Public, BlueprintCallable)

void ULookAtControllerComponent::DisableLookAt()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.LookAtControllerComponent.DisableLookAt");

	ULookAtControllerComponent_DisableLookAt_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MainMenuActor.QuitGame
// (Final, Native, Private, BlueprintCallable)

void AMainMenuActor::QuitGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MainMenuActor.QuitGame");

	AMainMenuActor_QuitGame_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MainMenuActor.OnStartGameButtonPressed
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FPressedButtonComponent PressedStartButton             (ConstParm, Parm, OutParm, ReferenceParm)

void AMainMenuActor::OnStartGameButtonPressed(const struct FPressedButtonComponent& PressedStartButton)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MainMenuActor.OnStartGameButtonPressed");

	AMainMenuActor_OnStartGameButtonPressed_Params params;
	params.PressedStartButton = PressedStartButton;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MainMenuActor.OnQuitGamePressed
// (Final, Native, Private, HasOutParms)
// Parameters:
// struct FPressedButtonComponent ButtonComponent                (ConstParm, Parm, OutParm, ReferenceParm)

void AMainMenuActor::OnQuitGamePressed(const struct FPressedButtonComponent& ButtonComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MainMenuActor.OnQuitGamePressed");

	AMainMenuActor_OnQuitGamePressed_Params params;
	params.ButtonComponent = ButtonComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MainMenuActor.OnConfirmationPromptCalled
// (Event, Public, HasOutParms, BlueprintEvent)
// Parameters:
// struct FText                   WarningText                    (ConstParm, Parm, OutParm, ReferenceParm)

void AMainMenuActor::OnConfirmationPromptCalled(const struct FText& WarningText)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MainMenuActor.OnConfirmationPromptCalled");

	AMainMenuActor_OnConfirmationPromptCalled_Params params;
	params.WarningText = WarningText;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MainMenuActor.OnConfirmationPressed
// (Final, Native, Private, HasOutParms)
// Parameters:
// struct FPressedButtonComponent ButtonComponent                (ConstParm, Parm, OutParm, ReferenceParm)

void AMainMenuActor::OnConfirmationPressed(const struct FPressedButtonComponent& ButtonComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MainMenuActor.OnConfirmationPressed");

	AMainMenuActor_OnConfirmationPressed_Params params;
	params.ButtonComponent = ButtonComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MainMenuActor.OnCancelPressed
// (Final, Native, Private, HasOutParms)
// Parameters:
// struct FPressedButtonComponent ButtonComponent                (ConstParm, Parm, OutParm, ReferenceParm)

void AMainMenuActor::OnCancelPressed(const struct FPressedButtonComponent& ButtonComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MainMenuActor.OnCancelPressed");

	AMainMenuActor_OnCancelPressed_Params params;
	params.ButtonComponent = ButtonComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MainMenuActor.OnButtonPressed
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FPressedButtonComponent ButtonComponent                (ConstParm, Parm, OutParm, ReferenceParm)

void AMainMenuActor::OnButtonPressed(const struct FPressedButtonComponent& ButtonComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MainMenuActor.OnButtonPressed");

	AMainMenuActor_OnButtonPressed_Params params;
	params.ButtonComponent = ButtonComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MainMenuActor.CreateMenuButtonLink
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ASubMenuActor*           MenuActor                      (Parm, ZeroConstructor, IsPlainOldData)
// class UMenuButtonComponent*    ButtonComponent                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void AMainMenuActor::CreateMenuButtonLink(class ASubMenuActor* MenuActor, class UMenuButtonComponent* ButtonComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MainMenuActor.CreateMenuButtonLink");

	AMainMenuActor_CreateMenuButtonLink_Params params;
	params.MenuActor = MenuActor;
	params.ButtonComponent = ButtonComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MaterialProfiler.StopProfiling
// (Final, Native, Public, BlueprintCallable)

void AMaterialProfiler::StopProfiling()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MaterialProfiler.StopProfiling");

	AMaterialProfiler_StopProfiling_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MaterialProfiler.StartProfiling
// (Final, Native, Public, BlueprintCallable)

void AMaterialProfiler::StartProfiling()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MaterialProfiler.StartProfiling");

	AMaterialProfiler_StartProfiling_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MaterialProfiler.Resume
// (Final, Native, Public, BlueprintCallable)

void AMaterialProfiler::Resume()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MaterialProfiler.Resume");

	AMaterialProfiler_Resume_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MaterialProfiler.ProfileMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*      ProfileMaterial                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AMaterialProfiler::ProfileMaterial(class UMaterialInterface* ProfileMaterial)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MaterialProfiler.ProfileMaterial");

	AMaterialProfiler_ProfileMaterial_Params params;
	params.ProfileMaterial = ProfileMaterial;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.MaterialProfiler.PreviousMaterial
// (Final, Native, Public, BlueprintCallable)

void AMaterialProfiler::PreviousMaterial()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MaterialProfiler.PreviousMaterial");

	AMaterialProfiler_PreviousMaterial_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MaterialProfiler.Pause
// (Final, Native, Public, BlueprintCallable)

void AMaterialProfiler::Pause()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MaterialProfiler.Pause");

	AMaterialProfiler_Pause_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MaterialProfiler.NextMaterial
// (Final, Native, Public, BlueprintCallable)

void AMaterialProfiler::NextMaterial()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MaterialProfiler.NextMaterial");

	AMaterialProfiler_NextMaterial_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MaterialProfiler.ApplyProfileMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bUseNext                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            IndexOverride                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AMaterialProfiler::ApplyProfileMaterial(bool bUseNext, int IndexOverride)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MaterialProfiler.ApplyProfileMaterial");

	AMaterialProfiler_ApplyProfileMaterial_Params params;
	params.bUseNext = bUseNext;
	params.IndexOverride = IndexOverride;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.MaterialProfiler.ApplyNewProfileMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*      ProfileMaterial                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AMaterialProfiler::ApplyNewProfileMaterial(class UMaterialInterface* ProfileMaterial)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MaterialProfiler.ApplyNewProfileMaterial");

	AMaterialProfiler_ApplyNewProfileMaterial_Params params;
	params.ProfileMaterial = ProfileMaterial;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.MathUtils.WithoutZ
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 In                             (Parm, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector UMathUtils::STATIC_WithoutZ(const struct FVector& In)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MathUtils.WithoutZ");

	UMathUtils_WithoutZ_Params params;
	params.In = In;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.MathUtils.WithoutY
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 In                             (Parm, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector UMathUtils::STATIC_WithoutY(const struct FVector& In)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MathUtils.WithoutY");

	UMathUtils_WithoutY_Params params;
	params.In = In;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.MathUtils.WithoutX
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 In                             (Parm, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector UMathUtils::STATIC_WithoutX(const struct FVector& In)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MathUtils.WithoutX");

	UMathUtils_WithoutX_Params params;
	params.In = In;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.MathUtils.TryGetRadiusOfCircleFormedByIntersectionOfHorizontalPlaneWithSphere
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 sphereCenter                   (Parm, IsPlainOldData)
// float                          SphereRadius                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          planeZ                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          outCircleRadius                (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UMathUtils::STATIC_TryGetRadiusOfCircleFormedByIntersectionOfHorizontalPlaneWithSphere(const struct FVector& sphereCenter, float SphereRadius, float planeZ, float* outCircleRadius)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MathUtils.TryGetRadiusOfCircleFormedByIntersectionOfHorizontalPlaneWithSphere");

	UMathUtils_TryGetRadiusOfCircleFormedByIntersectionOfHorizontalPlaneWithSphere_Params params;
	params.sphereCenter = sphereCenter;
	params.SphereRadius = SphereRadius;
	params.planeZ = planeZ;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (outCircleRadius != nullptr)
		*outCircleRadius = params.outCircleRadius;

	return params.ReturnValue;
}


// Function WKND.MathUtils.TryGetPointsWhereTwoCirclesIntersect
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D               center1                        (Parm, IsPlainOldData)
// float                          radius1                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               center2                        (Parm, IsPlainOldData)
// float                          radius2                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               outIntersection1               (Parm, OutParm, IsPlainOldData)
// struct FVector2D               outIntersection2               (Parm, OutParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UMathUtils::STATIC_TryGetPointsWhereTwoCirclesIntersect(const struct FVector2D& center1, float radius1, const struct FVector2D& center2, float radius2, struct FVector2D* outIntersection1, struct FVector2D* outIntersection2)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MathUtils.TryGetPointsWhereTwoCirclesIntersect");

	UMathUtils_TryGetPointsWhereTwoCirclesIntersect_Params params;
	params.center1 = center1;
	params.radius1 = radius1;
	params.center2 = center2;
	params.radius2 = radius2;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (outIntersection1 != nullptr)
		*outIntersection1 = params.outIntersection1;
	if (outIntersection2 != nullptr)
		*outIntersection2 = params.outIntersection2;

	return params.ReturnValue;
}


// Function WKND.MathUtils.TryGetHorizontalCircleSphereIntersection
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 sphereCenter                   (Parm, IsPlainOldData)
// float                          SphereRadius                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 circleCenter                   (Parm, IsPlainOldData)
// float                          circleRadius                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 outIntersection1               (Parm, OutParm, IsPlainOldData)
// struct FVector                 outIntersection2               (Parm, OutParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UMathUtils::STATIC_TryGetHorizontalCircleSphereIntersection(const struct FVector& sphereCenter, float SphereRadius, const struct FVector& circleCenter, float circleRadius, struct FVector* outIntersection1, struct FVector* outIntersection2)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MathUtils.TryGetHorizontalCircleSphereIntersection");

	UMathUtils_TryGetHorizontalCircleSphereIntersection_Params params;
	params.sphereCenter = sphereCenter;
	params.SphereRadius = SphereRadius;
	params.circleCenter = circleCenter;
	params.circleRadius = circleRadius;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (outIntersection1 != nullptr)
		*outIntersection1 = params.outIntersection1;
	if (outIntersection2 != nullptr)
		*outIntersection2 = params.outIntersection2;

	return params.ReturnValue;
}


// Function WKND.MathUtils.TransformQuaternionSlerp
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform              q1                             (Parm, IsPlainOldData)
// struct FTransform              q2                             (Parm, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              Out                            (Parm, IsPlainOldData)
// struct FVector                 EulerDisp                      (Parm, IsPlainOldData)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform UMathUtils::STATIC_TransformQuaternionSlerp(const struct FTransform& q1, const struct FTransform& q2, float Alpha, const struct FTransform& Out, const struct FVector& EulerDisp)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MathUtils.TransformQuaternionSlerp");

	UMathUtils_TransformQuaternionSlerp_Params params;
	params.q1 = q1;
	params.q2 = q2;
	params.Alpha = Alpha;
	params.Out = Out;
	params.EulerDisp = EulerDisp;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.MathUtils.SignedHorizontalAngleBetweenVectors
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 vector1                        (Parm, IsPlainOldData)
// struct FVector                 vector2                        (Parm, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UMathUtils::STATIC_SignedHorizontalAngleBetweenVectors(const struct FVector& vector1, const struct FVector& vector2)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MathUtils.SignedHorizontalAngleBetweenVectors");

	UMathUtils_SignedHorizontalAngleBetweenVectors_Params params;
	params.vector1 = vector1;
	params.vector2 = vector2;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.MathUtils.ProjectPointToLine
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 ToProject                      (Parm, IsPlainOldData)
// struct FVector                 Pt1                            (Parm, IsPlainOldData)
// struct FVector                 Pt2                            (Parm, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector UMathUtils::STATIC_ProjectPointToLine(const struct FVector& ToProject, const struct FVector& Pt1, const struct FVector& Pt2)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MathUtils.ProjectPointToLine");

	UMathUtils_ProjectPointToLine_Params params;
	params.ToProject = ToProject;
	params.Pt1 = Pt1;
	params.Pt2 = Pt2;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.MathUtils.HorizontalAngleBetweenVectors
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 vector1                        (Parm, IsPlainOldData)
// struct FVector                 vector2                        (Parm, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UMathUtils::STATIC_HorizontalAngleBetweenVectors(const struct FVector& vector1, const struct FVector& vector2)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MathUtils.HorizontalAngleBetweenVectors");

	UMathUtils_HorizontalAngleBetweenVectors_Params params;
	params.vector1 = vector1;
	params.vector2 = vector2;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.MathUtils.GetRotationOfVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 Vector                         (Parm, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FRotator UMathUtils::STATIC_GetRotationOfVector(const struct FVector& Vector)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MathUtils.GetRotationOfVector");

	UMathUtils_GetRotationOfVector_Params params;
	params.Vector = Vector;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.MathUtils.GetAngleBetweenVectorsAroundAxisInRadians
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 FirstVector                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 SecondVector                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 Axis                           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UMathUtils::STATIC_GetAngleBetweenVectorsAroundAxisInRadians(const struct FVector& FirstVector, const struct FVector& SecondVector, const struct FVector& Axis)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MathUtils.GetAngleBetweenVectorsAroundAxisInRadians");

	UMathUtils_GetAngleBetweenVectorsAroundAxisInRadians_Params params;
	params.FirstVector = FirstVector;
	params.SecondVector = SecondVector;
	params.Axis = Axis;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.MathUtils.FitCircleToPoints
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// TArray<struct FVector2D>       Points                         (Parm, ZeroConstructor)
// float                          outRadius                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               outCenter                      (Parm, OutParm, IsPlainOldData)

void UMathUtils::STATIC_FitCircleToPoints(TArray<struct FVector2D> Points, float* outRadius, struct FVector2D* outCenter)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MathUtils.FitCircleToPoints");

	UMathUtils_FitCircleToPoints_Params params;
	params.Points = Points;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (outRadius != nullptr)
		*outRadius = params.outRadius;
	if (outCenter != nullptr)
		*outCenter = params.outCenter;
}


// Function WKND.MathUtils.ConvertTransformToRelative_Fixed
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTransform              Transform                      (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FTransform              ParentTransform                (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform UMathUtils::STATIC_ConvertTransformToRelative_Fixed(const struct FTransform& Transform, const struct FTransform& ParentTransform)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MathUtils.ConvertTransformToRelative_Fixed");

	UMathUtils_ConvertTransformToRelative_Fixed_Params params;
	params.Transform = Transform;
	params.ParentTransform = ParentTransform;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.MathUtils.CalculateBallisticTrajectoryToHitTarget
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          InitialSpeed                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          Gravity                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Target                         (Parm, IsPlainOldData)
// bool                           pickLowestAngle                (Parm, ZeroConstructor, IsPlainOldData)
// float                          outTimeToTarget                (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           canHitTarget                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector UMathUtils::STATIC_CalculateBallisticTrajectoryToHitTarget(float InitialSpeed, float Gravity, const struct FVector& Target, bool pickLowestAngle, float* outTimeToTarget, bool* canHitTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MathUtils.CalculateBallisticTrajectoryToHitTarget");

	UMathUtils_CalculateBallisticTrajectoryToHitTarget_Params params;
	params.InitialSpeed = InitialSpeed;
	params.Gravity = Gravity;
	params.Target = Target;
	params.pickLowestAngle = pickLowestAngle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (outTimeToTarget != nullptr)
		*outTimeToTarget = params.outTimeToTarget;
	if (canHitTarget != nullptr)
		*canHitTarget = params.canHitTarget;

	return params.ReturnValue;
}


// Function WKND.MathUtils.AngleBetweenVectors
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 vector1                        (Parm, IsPlainOldData)
// struct FVector                 vector2                        (Parm, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UMathUtils::STATIC_AngleBetweenVectors(const struct FVector& vector1, const struct FVector& vector2)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MathUtils.AngleBetweenVectors");

	UMathUtils_AngleBetweenVectors_Params params;
	params.vector1 = vector1;
	params.vector2 = vector2;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.MenuElement.SpawnTextLabel
// (Final, Native, Public)

void AMenuElement::SpawnTextLabel()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuElement.SpawnTextLabel");

	AMenuElement_SpawnTextLabel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuElement.ShowElement
// (Native, Public, BlueprintCallable)

void AMenuElement::ShowElement()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuElement.ShowElement");

	AMenuElement_ShowElement_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuElement.SetTooltipText
// (Final, Native, Public, BlueprintCallable)

void AMenuElement::SetTooltipText()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuElement.SetTooltipText");

	AMenuElement_SetTooltipText_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuElement.SetLabelText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FText                   text                           (Parm)

void AMenuElement::SetLabelText(const struct FText& text)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuElement.SetLabelText");

	AMenuElement_SetLabelText_Params params;
	params.text = text;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuElement.ResetTooltipText
// (Final, Native, Public, BlueprintCallable)

void AMenuElement::ResetTooltipText()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuElement.ResetTooltipText");

	AMenuElement_ResetTooltipText_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuElement.ReceiveElementEnabled
// (Event, Public, BlueprintEvent)

void AMenuElement::ReceiveElementEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuElement.ReceiveElementEnabled");

	AMenuElement_ReceiveElementEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuElement.ReceiveElementDisabled
// (Event, Public, BlueprintEvent)

void AMenuElement::ReceiveElementDisabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuElement.ReceiveElementDisabled");

	AMenuElement_ReceiveElementDisabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuElement.OnTriggerReleased
// (Native, Protected)

void AMenuElement::OnTriggerReleased()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuElement.OnTriggerReleased");

	AMenuElement_OnTriggerReleased_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuElement.OnTriggerPressed
// (Native, Protected)
// Parameters:
// class UFrontendInteractionController* Controller                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void AMenuElement::OnTriggerPressed(class UFrontendInteractionController* Controller)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuElement.OnTriggerPressed");

	AMenuElement_OnTriggerPressed_Params params;
	params.Controller = Controller;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuElement.OnHoverEnd
// (Native, Protected)
// Parameters:
// bool                           bInteractionKeyPressed         (Parm, ZeroConstructor, IsPlainOldData)

void AMenuElement::OnHoverEnd(bool bInteractionKeyPressed)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuElement.OnHoverEnd");

	AMenuElement_OnHoverEnd_Params params;
	params.bInteractionKeyPressed = bInteractionKeyPressed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuElement.OnHoverBegin
// (Native, Protected)
// Parameters:
// class UFrontendInteractionController* Controller                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void AMenuElement::OnHoverBegin(class UFrontendInteractionController* Controller)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuElement.OnHoverBegin");

	AMenuElement_OnHoverBegin_Params params;
	params.Controller = Controller;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuElement.IsElementEnabled
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AMenuElement::IsElementEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuElement.IsElementEnabled");

	AMenuElement_IsElementEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.MenuElement.HideElement
// (Native, Public, BlueprintCallable)

void AMenuElement::HideElement()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuElement.HideElement");

	AMenuElement_HideElement_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuElement.EnableElement
// (Native, Public, BlueprintCallable)

void AMenuElement::EnableElement()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuElement.EnableElement");

	AMenuElement_EnableElement_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuElement.DisableElement
// (Native, Public, BlueprintCallable)

void AMenuElement::DisableElement()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuElement.DisableElement");

	AMenuElement_DisableElement_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuBaseButton.ToggleButtonState
// (Native, Public, BlueprintCallable)

void AMenuBaseButton::ToggleButtonState()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuBaseButton.ToggleButtonState");

	AMenuBaseButton_ToggleButtonState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuBaseButton.SetStateBasedMaterial
// (Native, Public, BlueprintCallable)

void AMenuBaseButton::SetStateBasedMaterial()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuBaseButton.SetStateBasedMaterial");

	AMenuBaseButton_SetStateBasedMaterial_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuBaseButton.SetButtonState
// (Native, Public, BlueprintCallable)
// Parameters:
// EButtonState                   newButtonState                 (Parm, ZeroConstructor, IsPlainOldData)

void AMenuBaseButton::SetButtonState(EButtonState newButtonState)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuBaseButton.SetButtonState");

	AMenuBaseButton_SetButtonState_Params params;
	params.newButtonState = newButtonState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuBaseButton.ReceiveButtonPress
// (Event, Public, BlueprintEvent)
// Parameters:
// EButtonState                   newButtonState                 (Parm, ZeroConstructor, IsPlainOldData)

void AMenuBaseButton::ReceiveButtonPress(EButtonState newButtonState)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuBaseButton.ReceiveButtonPress");

	AMenuBaseButton_ReceiveButtonPress_Params params;
	params.newButtonState = newButtonState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuBaseButton.PressButton
// (Native, Public, BlueprintCallable)

void AMenuBaseButton::PressButton()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuBaseButton.PressButton");

	AMenuBaseButton_PressButton_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuBaseButton.GetButtonState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EButtonState                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EButtonState AMenuBaseButton::GetButtonState()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuBaseButton.GetButtonState");

	AMenuBaseButton_GetButtonState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.MenuButtonComponent.ReleaseButton
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bPlayAudio                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIssuedFromConsole             (Parm, ZeroConstructor, IsPlainOldData)

void UMenuButtonComponent::ReleaseButton(bool bPlayAudio, bool bIssuedFromConsole)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuButtonComponent.ReleaseButton");

	UMenuButtonComponent_ReleaseButton_Params params;
	params.bPlayAudio = bPlayAudio;
	params.bIssuedFromConsole = bIssuedFromConsole;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuButtonComponent.PressButton
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bPlayAudio                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIssuedFromConsole             (Parm, ZeroConstructor, IsPlainOldData)

void UMenuButtonComponent::PressButton(bool bPlayAudio, bool bIssuedFromConsole)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuButtonComponent.PressButton");

	UMenuButtonComponent_PressButton_Params params;
	params.bPlayAudio = bPlayAudio;
	params.bIssuedFromConsole = bIssuedFromConsole;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuButtonComponent.GetButtonState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMenuButtonState               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EMenuButtonState UMenuButtonComponent::GetButtonState()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuButtonComponent.GetButtonState");

	UMenuButtonComponent_GetButtonState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.MenuContainer.ResetAttachedElements
// (Final, Native, Public, BlueprintCallable)

void AMenuContainer::ResetAttachedElements()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuContainer.ResetAttachedElements");

	AMenuContainer_ResetAttachedElements_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuContainer.FetchAttachedElements
// (Final, Native, Public, BlueprintCallable)

void AMenuContainer::FetchAttachedElements()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuContainer.FetchAttachedElements");

	AMenuContainer_FetchAttachedElements_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuLabel.SetText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FText                   newText                        (Parm)

void AMenuLabel::SetText(const struct FText& newText)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuLabel.SetText");

	AMenuLabel_SetText_Params params;
	params.newText = newText;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuMovingButton.StartButtonMovement
// (Native, Event, Protected, BlueprintEvent)

void AMenuMovingButton::StartButtonMovement()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuMovingButton.StartButtonMovement");

	AMenuMovingButton_StartButtonMovement_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuMovingButton.ButtonLerpRotation
// (Native, Event, Protected, HasDefaults, BlueprintEvent)
// Parameters:
// float                          DeltaSeconds                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                TargetRotation                 (Parm, IsPlainOldData)

void AMenuMovingButton::ButtonLerpRotation(float DeltaSeconds, const struct FRotator& TargetRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuMovingButton.ButtonLerpRotation");

	AMenuMovingButton_ButtonLerpRotation_Params params;
	params.DeltaSeconds = DeltaSeconds;
	params.TargetRotation = TargetRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuMovingButton.ButtonLerpMovement
// (Native, Event, Protected, HasDefaults, BlueprintEvent)
// Parameters:
// float                          DeltaSeconds                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 TargetPosition                 (Parm, IsPlainOldData)

void AMenuMovingButton::ButtonLerpMovement(float DeltaSeconds, const struct FVector& TargetPosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuMovingButton.ButtonLerpMovement");

	AMenuMovingButton_ButtonLerpMovement_Params params;
	params.DeltaSeconds = DeltaSeconds;
	params.TargetPosition = TargetPosition;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuRadioButtonComponent.SwitchToNextButton
// (Final, Native, Public, BlueprintCallable)

void UMenuRadioButtonComponent::SwitchToNextButton()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuRadioButtonComponent.SwitchToNextButton");

	UMenuRadioButtonComponent_SwitchToNextButton_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuRadioButtonComponent.SetActiveRadioButton
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMenuButtonComponent*    ButtonComponent                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UMenuRadioButtonComponent::SetActiveRadioButton(class UMenuButtonComponent* ButtonComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuRadioButtonComponent.SetActiveRadioButton");

	UMenuRadioButtonComponent_SetActiveRadioButton_Params params;
	params.ButtonComponent = ButtonComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuRadioButtonComponent.OnRadioButtonPressed
// (Final, Native, Private, HasOutParms)
// Parameters:
// struct FPressedButtonComponent ButtonComponent                (ConstParm, Parm, OutParm, ReferenceParm)

void UMenuRadioButtonComponent::OnRadioButtonPressed(const struct FPressedButtonComponent& ButtonComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuRadioButtonComponent.OnRadioButtonPressed");

	UMenuRadioButtonComponent_OnRadioButtonPressed_Params params;
	params.ButtonComponent = ButtonComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuRadioButtonComponent.GetActiveRadioButtonIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UMenuRadioButtonComponent::GetActiveRadioButtonIndex()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuRadioButtonComponent.GetActiveRadioButtonIndex");

	UMenuRadioButtonComponent_GetActiveRadioButtonIndex_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.MenuRadioButtonComponent.GetActiveRadioButton
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMenuButtonComponent*    ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UMenuButtonComponent* UMenuRadioButtonComponent::GetActiveRadioButton()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuRadioButtonComponent.GetActiveRadioButton");

	UMenuRadioButtonComponent_GetActiveRadioButton_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.MenuRadioButtons.RecreateRadioButtons
// (Final, Native, Public)

void AMenuRadioButtons::RecreateRadioButtons()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuRadioButtons.RecreateRadioButtons");

	AMenuRadioButtons_RecreateRadioButtons_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuRadioButtons.OnRadioButtonValueChanged
// (Final, Native, Public)
// Parameters:
// class AMenuElement*            TickBoxPtr                     (Parm, ZeroConstructor, IsPlainOldData)

void AMenuRadioButtons::OnRadioButtonValueChanged(class AMenuElement* TickBoxPtr)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuRadioButtons.OnRadioButtonValueChanged");

	AMenuRadioButtons_OnRadioButtonValueChanged_Params params;
	params.TickBoxPtr = TickBoxPtr;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuScrollContainerComponent.StopAutoScroll
// (Final, Native, Public, BlueprintCallable)

void UMenuScrollContainerComponent::StopAutoScroll()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuScrollContainerComponent.StopAutoScroll");

	UMenuScrollContainerComponent_StopAutoScroll_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuScrollContainerComponent.StartAutoScrollUp
// (Final, Native, Public, BlueprintCallable)

void UMenuScrollContainerComponent::StartAutoScrollUp()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuScrollContainerComponent.StartAutoScrollUp");

	UMenuScrollContainerComponent_StartAutoScrollUp_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuScrollContainerComponent.StartAutoScrollDown
// (Final, Native, Public, BlueprintCallable)

void UMenuScrollContainerComponent::StartAutoScrollDown()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuScrollContainerComponent.StartAutoScrollDown");

	UMenuScrollContainerComponent_StartAutoScrollDown_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuScrollContainerComponent.SetSelectedElement
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMenuBaseComponent*      MenuElement                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           bIssuedFromConsole             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UMenuScrollContainerComponent::SetSelectedElement(class UMenuBaseComponent* MenuElement, bool bIssuedFromConsole)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuScrollContainerComponent.SetSelectedElement");

	UMenuScrollContainerComponent_SetSelectedElement_Params params;
	params.MenuElement = MenuElement;
	params.bIssuedFromConsole = bIssuedFromConsole;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.MenuScrollContainerComponent.SetCurrentlySelectedIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            NewIndex                       (Parm, ZeroConstructor, IsPlainOldData)

void UMenuScrollContainerComponent::SetCurrentlySelectedIndex(int NewIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuScrollContainerComponent.SetCurrentlySelectedIndex");

	UMenuScrollContainerComponent_SetCurrentlySelectedIndex_Params params;
	params.NewIndex = NewIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuScrollContainerComponent.GetLastSelectedIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UMenuScrollContainerComponent::GetLastSelectedIndex()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuScrollContainerComponent.GetLastSelectedIndex");

	UMenuScrollContainerComponent_GetLastSelectedIndex_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.MenuScrollContainerComponent.GetIndexForElement
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMenuBaseComponent*      MenuElement                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UMenuScrollContainerComponent::GetIndexForElement(class UMenuBaseComponent* MenuElement)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuScrollContainerComponent.GetIndexForElement");

	UMenuScrollContainerComponent_GetIndexForElement_Params params;
	params.MenuElement = MenuElement;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.MenuScrollContainerComponent.GetElementByIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)
// class UMenuBaseComponent*      ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UMenuBaseComponent* UMenuScrollContainerComponent::GetElementByIndex(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuScrollContainerComponent.GetElementByIndex");

	UMenuScrollContainerComponent_GetElementByIndex_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.MenuScrollContainerComponent.GetCurrentSelectedElement
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMenuBaseComponent*      ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UMenuBaseComponent* UMenuScrollContainerComponent::GetCurrentSelectedElement()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuScrollContainerComponent.GetCurrentSelectedElement");

	UMenuScrollContainerComponent_GetCurrentSelectedElement_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.MenuScrollContainerComponent.GetCurrentlySelectedIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UMenuScrollContainerComponent::GetCurrentlySelectedIndex()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuScrollContainerComponent.GetCurrentlySelectedIndex");

	UMenuScrollContainerComponent_GetCurrentlySelectedIndex_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.MenuScrollContainerComponent.ChangeSelectionTwistInput
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UMenuScrollContainerComponent::ChangeSelectionTwistInput(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuScrollContainerComponent.ChangeSelectionTwistInput");

	UMenuScrollContainerComponent_ChangeSelectionTwistInput_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.MenuScrollContainerComponent.ChangeSelectionByIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIssuedFromConsole             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UMenuScrollContainerComponent::ChangeSelectionByIndex(int Index, bool bIssuedFromConsole)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuScrollContainerComponent.ChangeSelectionByIndex");

	UMenuScrollContainerComponent_ChangeSelectionByIndex_Params params;
	params.Index = Index;
	params.bIssuedFromConsole = bIssuedFromConsole;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.MenuSplineSlider.SetStateBasedMaterial
// (Native, Public, BlueprintCallable)

void AMenuSplineSlider::SetStateBasedMaterial()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuSplineSlider.SetStateBasedMaterial");

	AMenuSplineSlider_SetStateBasedMaterial_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuSplineSlider.GetCurrentSplineIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int AMenuSplineSlider::GetCurrentSplineIndex()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuSplineSlider.GetCurrentSplineIndex");

	AMenuSplineSlider_GetCurrentSplineIndex_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.MenuSplineSlider.GetCurrentSliderValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int AMenuSplineSlider::GetCurrentSliderValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuSplineSlider.GetCurrentSliderValue");

	AMenuSplineSlider_GetCurrentSliderValue_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.MenuTab.OnTabButtonClick
// (Native, Protected)
// Parameters:
// class AMenuElement*            element                        (Parm, ZeroConstructor, IsPlainOldData)

void AMenuTab::OnTabButtonClick(class AMenuElement* element)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuTab.OnTabButtonClick");

	AMenuTab_OnTabButtonClick_Params params;
	params.element = element;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuTab.DetachSlotElements
// (Final, Native, Public)

void AMenuTab::DetachSlotElements()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuTab.DetachSlotElements");

	AMenuTab_DetachSlotElements_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuTab.AttachSlotElements
// (Final, Native, Public)

void AMenuTab::AttachSlotElements()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuTab.AttachSlotElements");

	AMenuTab_AttachSlotElements_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuTabComponent.SetNextTabByIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)

void UMenuTabComponent::SetNextTabByIndex(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuTabComponent.SetNextTabByIndex");

	UMenuTabComponent_SetNextTabByIndex_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuTabComponent.SetActiveTab
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMenuButtonComponent*    TabButton                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UMenuTabComponent::SetActiveTab(class UMenuButtonComponent* TabButton)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuTabComponent.SetActiveTab");

	UMenuTabComponent_SetActiveTab_Params params;
	params.TabButton = TabButton;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuTabComponent.OnTabButtonPressed
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FPressedButtonComponent ButtonComponent                (ConstParm, Parm, OutParm, ReferenceParm)

void UMenuTabComponent::OnTabButtonPressed(const struct FPressedButtonComponent& ButtonComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuTabComponent.OnTabButtonPressed");

	UMenuTabComponent_OnTabButtonPressed_Params params;
	params.ButtonComponent = ButtonComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuTabComponent.HasActiveTab
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UMenuTabComponent::HasActiveTab()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuTabComponent.HasActiveTab");

	UMenuTabComponent_HasActiveTab_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.MenuTabComponent.GetCurrentTabIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UMenuTabComponent::GetCurrentTabIndex()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuTabComponent.GetCurrentTabIndex");

	UMenuTabComponent_GetCurrentTabIndex_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.MenuTabComponent.GetActiveTab
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMenuButtonComponent*    ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UMenuButtonComponent* UMenuTabComponent::GetActiveTab()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuTabComponent.GetActiveTab");

	UMenuTabComponent_GetActiveTab_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.MenuTabComponent.CloseActiveTab
// (Final, Native, Public, BlueprintCallable)

void UMenuTabComponent::CloseActiveTab()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuTabComponent.CloseActiveTab");

	UMenuTabComponent_CloseActiveTab_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuTickBox.ToggleTickState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bBroadcastChange               (Parm, ZeroConstructor, IsPlainOldData)

void AMenuTickBox::ToggleTickState(bool bBroadcastChange)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuTickBox.ToggleTickState");

	AMenuTickBox_ToggleTickState_Params params;
	params.bBroadcastChange = bBroadcastChange;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuTickBox.SetTickState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETickState                     NewState                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bBroadcastChange               (Parm, ZeroConstructor, IsPlainOldData)

void AMenuTickBox::SetTickState(ETickState NewState, bool bBroadcastChange)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuTickBox.SetTickState");

	AMenuTickBox_SetTickState_Params params;
	params.NewState = NewState;
	params.bBroadcastChange = bBroadcastChange;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuTickBox.SetStateBasedMaterial
// (Native, Public, BlueprintCallable)

void AMenuTickBox::SetStateBasedMaterial()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuTickBox.SetStateBasedMaterial");

	AMenuTickBox_SetStateBasedMaterial_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuTickBox.ReceiveOnValueChangedEvent
// (Event, Public, BlueprintEvent)
// Parameters:
// ETickState                     newTickState                   (Parm, ZeroConstructor, IsPlainOldData)

void AMenuTickBox::ReceiveOnValueChangedEvent(ETickState newTickState)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuTickBox.ReceiveOnValueChangedEvent");

	AMenuTickBox_ReceiveOnValueChangedEvent_Params params;
	params.newTickState = newTickState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MenuTickBox.GetTickState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ETickState                     ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ETickState AMenuTickBox::GetTickState()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MenuTickBox.GetTickState");

	AMenuTickBox_GetTickState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.MotionFieldCharacter.OnThrowItem
// (Event, Public, BlueprintEvent)
// Parameters:
// class ARPOCForceThrowLocation* ThrowLocation                  (Parm, ZeroConstructor, IsPlainOldData)
// class ASliceableActor*         Item                           (Parm, ZeroConstructor, IsPlainOldData)

void AMotionFieldCharacter::OnThrowItem(class ARPOCForceThrowLocation* ThrowLocation, class ASliceableActor* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MotionFieldCharacter.OnThrowItem");

	AMotionFieldCharacter_OnThrowItem_Params params;
	params.ThrowLocation = ThrowLocation;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MotionFieldCharacter.OnLocationAndYawReached
// (Final, Native, Public, HasDefaults)
// Parameters:
// struct FVector                 DesiredLocation                (Parm, IsPlainOldData)
// bool                           bMovingToFaceActor             (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  TargetFaceActor                (Parm, ZeroConstructor, IsPlainOldData)

void AMotionFieldCharacter::OnLocationAndYawReached(const struct FVector& DesiredLocation, bool bMovingToFaceActor, class AActor* TargetFaceActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MotionFieldCharacter.OnLocationAndYawReached");

	AMotionFieldCharacter_OnLocationAndYawReached_Params params;
	params.DesiredLocation = DesiredLocation;
	params.bMovingToFaceActor = bMovingToFaceActor;
	params.TargetFaceActor = TargetFaceActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.MotionFieldMovementComponent.GetYawRate_Degrees
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UMotionFieldMovementComponent::GetYawRate_Degrees()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MotionFieldMovementComponent.GetYawRate_Degrees");

	UMotionFieldMovementComponent_GetYawRate_Degrees_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.MotionFieldMovementComponent.GetYaw_Degrees
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UMotionFieldMovementComponent::GetYaw_Degrees()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.MotionFieldMovementComponent.GetYaw_Degrees");

	UMotionFieldMovementComponent_GetYaw_Degrees_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.NTCharacterHapticComponent.FindHapticSet
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<EPhysicalSurface>  SurfaceType                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FNTCharacterHapticSet   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FNTCharacterHapticSet UNTCharacterHapticComponent::FindHapticSet(TEnumAsByte<EPhysicalSurface> SurfaceType)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTCharacterHapticComponent.FindHapticSet");

	UNTCharacterHapticComponent_FindHapticSet_Params params;
	params.SurfaceType = SurfaceType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.NTCharacterHapticComponent.FindHapticDuration
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<EPhysicalSurface>  SurfaceType                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UNTCharacterHapticComponent::FindHapticDuration(TEnumAsByte<EPhysicalSurface> SurfaceType)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTCharacterHapticComponent.FindHapticDuration");

	UNTCharacterHapticComponent_FindHapticDuration_Params params;
	params.SurfaceType = SurfaceType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.NTComboDetectionComponent.SimpleComboDetection
// (Final, Native, Public, HasDefaults)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 WorldPrev                      (Parm, IsPlainOldData)
// struct FVector                 WorldNow                       (Parm, IsPlainOldData)

void UNTComboDetectionComponent::SimpleComboDetection(float DeltaTime, const struct FVector& WorldPrev, const struct FVector& WorldNow)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTComboDetectionComponent.SimpleComboDetection");

	UNTComboDetectionComponent_SimpleComboDetection_Params params;
	params.DeltaTime = DeltaTime;
	params.WorldPrev = WorldPrev;
	params.WorldNow = WorldNow;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.NTComboDetectionComponent.RegisterGestureComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class URPOCGestureDetector*    NewPoseDetector                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UNTComboDetectionComponent::RegisterGestureComponent(class URPOCGestureDetector* NewPoseDetector)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTComboDetectionComponent.RegisterGestureComponent");

	UNTComboDetectionComponent_RegisterGestureComponent_Params params;
	params.NewPoseDetector = NewPoseDetector;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.NTComboDetectionComponent.MakeCurrentStrike
// (Final, Native, Public, HasOutParms, HasDefaults)
// Parameters:
// struct FVector                 GuardPrev                      (Parm, IsPlainOldData)
// struct FVector                 GuardNow                       (Parm, IsPlainOldData)
// struct FVector                 TipPrev                        (Parm, IsPlainOldData)
// struct FVector                 TipNow                         (Parm, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FNTStrike               Result                         (Parm, OutParm)

void UNTComboDetectionComponent::MakeCurrentStrike(const struct FVector& GuardPrev, const struct FVector& GuardNow, const struct FVector& TipPrev, const struct FVector& TipNow, float DeltaTime, struct FNTStrike* Result)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTComboDetectionComponent.MakeCurrentStrike");

	UNTComboDetectionComponent_MakeCurrentStrike_Params params;
	params.GuardPrev = GuardPrev;
	params.GuardNow = GuardNow;
	params.TipPrev = TipPrev;
	params.TipNow = TipNow;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Result != nullptr)
		*Result = params.Result;
}


// Function WKND.NTComboDetectionComponent.GetPoseHeldValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UNTComboDetectionComponent::GetPoseHeldValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTComboDetectionComponent.GetPoseHeldValue");

	UNTComboDetectionComponent_GetPoseHeldValue_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.NTHapticComponent.TriggerHaptics
// (Final, Native, Public, BlueprintCallable)

void UNTHapticComponent::TriggerHaptics()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTHapticComponent.TriggerHaptics");

	UNTHapticComponent_TriggerHaptics_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.NTHapticComponent.StopHaptics
// (Final, Native, Public, BlueprintCallable)

void UNTHapticComponent::StopHaptics()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTHapticComponent.StopHaptics");

	UNTHapticComponent_StopHaptics_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.NTHapticComponent.SetPrimaryHapticHands
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ENTHapticHands                 primaryHands                   (Parm, ZeroConstructor, IsPlainOldData)

void UNTHapticComponent::SetPrimaryHapticHands(ENTHapticHands primaryHands)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTHapticComponent.SetPrimaryHapticHands");

	UNTHapticComponent_SetPrimaryHapticHands_Params params;
	params.primaryHands = primaryHands;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.NTHapticComponent.SetHapticHands
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ENTHapticHands                 primaryHands                   (Parm, ZeroConstructor, IsPlainOldData)
// ENTHapticHands                 secondaryHands                 (Parm, ZeroConstructor, IsPlainOldData)
// class USceneComponent*         Stretch                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           ActivateHaptic                 (Parm, ZeroConstructor, IsPlainOldData)

void UNTHapticComponent::SetHapticHands(ENTHapticHands primaryHands, ENTHapticHands secondaryHands, class USceneComponent* Stretch, bool ActivateHaptic)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTHapticComponent.SetHapticHands");

	UNTHapticComponent_SetHapticHands_Params params;
	params.primaryHands = primaryHands;
	params.secondaryHands = secondaryHands;
	params.Stretch = Stretch;
	params.ActivateHaptic = ActivateHaptic;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.NTHapticComponent.PushHapticValues
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FNTHapticValueByHand    hapticValues                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void UNTHapticComponent::PushHapticValues(const struct FNTHapticValueByHand& hapticValues)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTHapticComponent.PushHapticValues");

	UNTHapticComponent_PushHapticValues_Params params;
	params.hapticValues = hapticValues;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.NTHapticComponent.PlayHapticEffect
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FNTHapticData           HapticData                     (ConstParm, Parm, OutParm, ReferenceParm)

void UNTHapticComponent::PlayHapticEffect(const struct FNTHapticData& HapticData)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTHapticComponent.PlayHapticEffect");

	UNTHapticComponent_PlayHapticEffect_Params params;
	params.HapticData = HapticData;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.NTHapticManagerComponent.RegisterHapticComponent
// (Final, Native, Public)
// Parameters:
// class UNTHapticComponent*      hapticComponent                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UNTHapticManagerComponent::RegisterHapticComponent(class UNTHapticComponent* hapticComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTHapticManagerComponent.RegisterHapticComponent");

	UNTHapticManagerComponent_RegisterHapticComponent_Params params;
	params.hapticComponent = hapticComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.NTHapticManagerComponent.PushHapticValues
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FNTHapticValueByHand    hapticValues                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void UNTHapticManagerComponent::PushHapticValues(const struct FNTHapticValueByHand& hapticValues)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTHapticManagerComponent.PushHapticValues");

	UNTHapticManagerComponent_PushHapticValues_Params params;
	params.hapticValues = hapticValues;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.NTHapticManagerComponent.HapticEffectUpdateScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            ID                             (Parm, ZeroConstructor, IsPlainOldData)
// float                          HapticScale                    (Parm, ZeroConstructor, IsPlainOldData)

void UNTHapticManagerComponent::HapticEffectUpdateScale(int ID, float HapticScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTHapticManagerComponent.HapticEffectUpdateScale");

	UNTHapticManagerComponent_HapticEffectUpdateScale_Params params;
	params.ID = ID;
	params.HapticScale = HapticScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.NTHapticManagerComponent.HapticEffectRequest
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ENTHapticHands                 hands                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FNTHapticData           haptic                         (Parm)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UNTHapticManagerComponent::HapticEffectRequest(ENTHapticHands hands, const struct FNTHapticData& haptic)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTHapticManagerComponent.HapticEffectRequest");

	UNTHapticManagerComponent_HapticEffectRequest_Params params;
	params.hands = hands;
	params.haptic = haptic;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.NTHapticManagerComponent.HapticEffectCancel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            ID                             (Parm, ZeroConstructor, IsPlainOldData)

void UNTHapticManagerComponent::HapticEffectCancel(int ID)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTHapticManagerComponent.HapticEffectCancel");

	UNTHapticManagerComponent_HapticEffectCancel_Params params;
	params.ID = ID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.NTHapticManagerComponent.ClearAllHaptics
// (Final, Native, Public, BlueprintCallable)

void UNTHapticManagerComponent::ClearAllHaptics()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTHapticManagerComponent.ClearAllHaptics");

	UNTHapticManagerComponent_ClearAllHaptics_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.NTNinjaFunctionLibrary.StopVRTransition
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APawn*                   Pawn                           (Parm, ZeroConstructor, IsPlainOldData)
// EVRCameraTransitionType        Type                           (Parm, ZeroConstructor, IsPlainOldData)

void UNTNinjaFunctionLibrary::STATIC_StopVRTransition(class APawn* Pawn, EVRCameraTransitionType Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTNinjaFunctionLibrary.StopVRTransition");

	UNTNinjaFunctionLibrary_StopVRTransition_Params params;
	params.Pawn = Pawn;
	params.Type = Type;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.NTNinjaFunctionLibrary.StartVRTransition
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APawn*                   Pawn                           (Parm, ZeroConstructor, IsPlainOldData)
// EVRCameraTransitionType        Type                           (Parm, ZeroConstructor, IsPlainOldData)

void UNTNinjaFunctionLibrary::STATIC_StartVRTransition(class APawn* Pawn, EVRCameraTransitionType Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTNinjaFunctionLibrary.StartVRTransition");

	UNTNinjaFunctionLibrary_StartVRTransition_Params params;
	params.Pawn = Pawn;
	params.Type = Type;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.NTNinjaFunctionLibrary.ShowHiddenActors
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<class AActor*>          HiddenActors                   (Parm, ZeroConstructor)

void UNTNinjaFunctionLibrary::STATIC_ShowHiddenActors(TArray<class AActor*> HiddenActors)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTNinjaFunctionLibrary.ShowHiddenActors");

	UNTNinjaFunctionLibrary_ShowHiddenActors_Params params;
	params.HiddenActors = HiddenActors;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.NTNinjaFunctionLibrary.LineCheckWithTriangle
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FHitResult              Result                         (Parm, OutParm, IsPlainOldData)
// struct FVector                 v1                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 v2                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 V3                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 Direction                      (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNTNinjaFunctionLibrary::STATIC_LineCheckWithTriangle(const struct FVector& v1, const struct FVector& v2, const struct FVector& V3, const struct FVector& Start, const struct FVector& End, const struct FVector& Direction, struct FHitResult* Result)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTNinjaFunctionLibrary.LineCheckWithTriangle");

	UNTNinjaFunctionLibrary_LineCheckWithTriangle_Params params;
	params.v1 = v1;
	params.v2 = v2;
	params.V3 = V3;
	params.Start = Start;
	params.End = End;
	params.Direction = Direction;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Result != nullptr)
		*Result = params.Result;

	return params.ReturnValue;
}


// Function WKND.NTNinjaFunctionLibrary.IsRunningOnSantaCruz
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNTNinjaFunctionLibrary::STATIC_IsRunningOnSantaCruz()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTNinjaFunctionLibrary.IsRunningOnSantaCruz");

	UNTNinjaFunctionLibrary_IsRunningOnSantaCruz_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.NTNinjaFunctionLibrary.HideActorsInLevel
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class ALevelScriptActor*       LevelScriptActor               (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          HiddenActors                   (Parm, OutParm, ZeroConstructor)

void UNTNinjaFunctionLibrary::STATIC_HideActorsInLevel(class ALevelScriptActor* LevelScriptActor, TArray<class AActor*>* HiddenActors)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTNinjaFunctionLibrary.HideActorsInLevel");

	UNTNinjaFunctionLibrary_HideActorsInLevel_Params params;
	params.LevelScriptActor = LevelScriptActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (HiddenActors != nullptr)
		*HiddenActors = params.HiddenActors;
}


// Function WKND.NTNinjaFunctionLibrary.GetPlaneIntersection
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class USplineComponent*        useSpline                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FPlane                  prePlane                       (Parm, OutParm, IsPlainOldData)
// struct FPlane                  postPlane                      (Parm, OutParm, IsPlainOldData)
// struct FVector                 Point                          (Parm, OutParm, IsPlainOldData)
// struct FVector                 CutNormal                      (Parm, OutParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNTNinjaFunctionLibrary::STATIC_GetPlaneIntersection(class USplineComponent* useSpline, struct FPlane* prePlane, struct FPlane* postPlane, struct FVector* Point, struct FVector* CutNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTNinjaFunctionLibrary.GetPlaneIntersection");

	UNTNinjaFunctionLibrary_GetPlaneIntersection_Params params;
	params.useSpline = useSpline;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (prePlane != nullptr)
		*prePlane = params.prePlane;
	if (postPlane != nullptr)
		*postPlane = params.postPlane;
	if (Point != nullptr)
		*Point = params.Point;
	if (CutNormal != nullptr)
		*CutNormal = params.CutNormal;

	return params.ReturnValue;
}


// Function WKND.NTNinjaFunctionLibrary.ConvertQuatToRotator
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FQuat                   Q                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FRotator UNTNinjaFunctionLibrary::STATIC_ConvertQuatToRotator(const struct FQuat& Q)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTNinjaFunctionLibrary.ConvertQuatToRotator");

	UNTNinjaFunctionLibrary_ConvertQuatToRotator_Params params;
	params.Q = Q;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.NTTokenComponent.UndenyTokens
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<struct FName>           TokenNames                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void UNTTokenComponent::UndenyTokens(TArray<struct FName> TokenNames)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTTokenComponent.UndenyTokens");

	UNTTokenComponent_UndenyTokens_Params params;
	params.TokenNames = TokenNames;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.NTTokenComponent.UndenyToken
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   TokenName                      (Parm, ZeroConstructor, IsPlainOldData)

void UNTTokenComponent::UndenyToken(const struct FName& TokenName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTTokenComponent.UndenyToken");

	UNTTokenComponent_UndenyToken_Params params;
	params.TokenName = TokenName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.NTTokenComponent.SetIsMovingToken
// (Final, Native, Public)
// Parameters:
// bool                           bIsMoving                      (Parm, ZeroConstructor, IsPlainOldData)

void UNTTokenComponent::SetIsMovingToken(bool bIsMoving)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTTokenComponent.SetIsMovingToken");

	UNTTokenComponent_SetIsMovingToken_Params params;
	params.bIsMoving = bIsMoving;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.NTTokenComponent.ResetTokens
// (Final, Native, Public, BlueprintCallable)

void UNTTokenComponent::ResetTokens()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTTokenComponent.ResetTokens");

	UNTTokenComponent_ResetTokens_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.NTTokenComponent.RemoveTokenDeactivatedDelegate
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FName                   TokenName                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FScriptDelegate         Delegate                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void UNTTokenComponent::RemoveTokenDeactivatedDelegate(const struct FName& TokenName, const struct FScriptDelegate& Delegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTTokenComponent.RemoveTokenDeactivatedDelegate");

	UNTTokenComponent_RemoveTokenDeactivatedDelegate_Params params;
	params.TokenName = TokenName;
	params.Delegate = Delegate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.NTTokenComponent.RemoveTokenActivatedDelegate
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FName                   TokenName                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FScriptDelegate         Delegate                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void UNTTokenComponent::RemoveTokenActivatedDelegate(const struct FName& TokenName, const struct FScriptDelegate& Delegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTTokenComponent.RemoveTokenActivatedDelegate");

	UNTTokenComponent_RemoveTokenActivatedDelegate_Params params;
	params.TokenName = TokenName;
	params.Delegate = Delegate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.NTTokenComponent.OnTokenDeleted
// (Event, Public, BlueprintEvent)
// Parameters:
// struct FName                   TokenName                      (Parm, ZeroConstructor, IsPlainOldData)

void UNTTokenComponent::OnTokenDeleted(const struct FName& TokenName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTTokenComponent.OnTokenDeleted");

	UNTTokenComponent_OnTokenDeleted_Params params;
	params.TokenName = TokenName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.NTTokenComponent.OnTokenCreated
// (Event, Public, BlueprintEvent)
// Parameters:
// struct FName                   TokenName                      (Parm, ZeroConstructor, IsPlainOldData)

void UNTTokenComponent::OnTokenCreated(const struct FName& TokenName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTTokenComponent.OnTokenCreated");

	UNTTokenComponent_OnTokenCreated_Params params;
	params.TokenName = TokenName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.NTTokenComponent.HasToken
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   TokenName                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNTTokenComponent::HasToken(const struct FName& TokenName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTTokenComponent.HasToken");

	UNTTokenComponent_HasToken_Params params;
	params.TokenName = TokenName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.NTTokenComponent.HasAnyToken
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FName>           TokenNames                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNTTokenComponent::HasAnyToken(TArray<struct FName> TokenNames)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTTokenComponent.HasAnyToken");

	UNTTokenComponent_HasAnyToken_Params params;
	params.TokenNames = TokenNames;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.NTTokenComponent.HasAllTokens
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FName>           TokenNames                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNTTokenComponent::HasAllTokens(TArray<struct FName> TokenNames)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTTokenComponent.HasAllTokens");

	UNTTokenComponent_HasAllTokens_Params params;
	params.TokenNames = TokenNames;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.NTTokenComponent.GetTokenOwnedTimeUndilated
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   TokenName                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UNTTokenComponent::GetTokenOwnedTimeUndilated(const struct FName& TokenName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTTokenComponent.GetTokenOwnedTimeUndilated");

	UNTTokenComponent_GetTokenOwnedTimeUndilated_Params params;
	params.TokenName = TokenName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.NTTokenComponent.GetTokenOwnedTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   TokenName                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UNTTokenComponent::GetTokenOwnedTime(const struct FName& TokenName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTTokenComponent.GetTokenOwnedTime");

	UNTTokenComponent_GetTokenOwnedTime_Params params;
	params.TokenName = TokenName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.NTTokenComponent.GetTokenManager
// (Final, Native, Public)
// Parameters:
// class UNTTokenManager*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UNTTokenManager* UNTTokenComponent::GetTokenManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTTokenComponent.GetTokenManager");

	UNTTokenComponent_GetTokenManager_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.NTTokenComponent.GetTokenHoldTimeUndilated
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   TokenName                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UNTTokenComponent::GetTokenHoldTimeUndilated(const struct FName& TokenName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTTokenComponent.GetTokenHoldTimeUndilated");

	UNTTokenComponent_GetTokenHoldTimeUndilated_Params params;
	params.TokenName = TokenName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.NTTokenComponent.GetTokenHoldTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   TokenName                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UNTTokenComponent::GetTokenHoldTime(const struct FName& TokenName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTTokenComponent.GetTokenHoldTime");

	UNTTokenComponent_GetTokenHoldTime_Params params;
	params.TokenName = TokenName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.NTTokenComponent.GetActiveTokens
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<struct FName>           OutTokenNames                  (Parm, OutParm, ZeroConstructor)

void UNTTokenComponent::GetActiveTokens(TArray<struct FName>* OutTokenNames)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTTokenComponent.GetActiveTokens");

	UNTTokenComponent_GetActiveTokens_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutTokenNames != nullptr)
		*OutTokenNames = params.OutTokenNames;
}


// Function WKND.NTTokenComponent.DenyTokens
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<struct FName>           TokenNames                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void UNTTokenComponent::DenyTokens(TArray<struct FName> TokenNames)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTTokenComponent.DenyTokens");

	UNTTokenComponent_DenyTokens_Params params;
	params.TokenNames = TokenNames;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.NTTokenComponent.DenyToken
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   TokenName                      (Parm, ZeroConstructor, IsPlainOldData)

void UNTTokenComponent::DenyToken(const struct FName& TokenName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTTokenComponent.DenyToken");

	UNTTokenComponent_DenyToken_Params params;
	params.TokenName = TokenName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.NTTokenComponent.DeleteTokens
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<struct FName>           TokenNames                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FName                   TokenOwner                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           RemoveAll                      (Parm, ZeroConstructor, IsPlainOldData)

void UNTTokenComponent::DeleteTokens(TArray<struct FName> TokenNames, const struct FName& TokenOwner, bool RemoveAll)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTTokenComponent.DeleteTokens");

	UNTTokenComponent_DeleteTokens_Params params;
	params.TokenNames = TokenNames;
	params.TokenOwner = TokenOwner;
	params.RemoveAll = RemoveAll;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.NTTokenComponent.DeleteToken
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   TokenName                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   TokenOwner                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           RemoveAll                      (Parm, ZeroConstructor, IsPlainOldData)

void UNTTokenComponent::DeleteToken(const struct FName& TokenName, const struct FName& TokenOwner, bool RemoveAll)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTTokenComponent.DeleteToken");

	UNTTokenComponent_DeleteToken_Params params;
	params.TokenName = TokenName;
	params.TokenOwner = TokenOwner;
	params.RemoveAll = RemoveAll;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.NTTokenComponent.CreateUniqueToken
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   TokenName                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   TokenOwner                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNTTokenComponent::CreateUniqueToken(const struct FName& TokenName, const struct FName& TokenOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTTokenComponent.CreateUniqueToken");

	UNTTokenComponent_CreateUniqueToken_Params params;
	params.TokenName = TokenName;
	params.TokenOwner = TokenOwner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.NTTokenComponent.CreateTokensForTime
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<struct FName>           TokenNames                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FName                   TokenOwner                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          TimeLimit                      (Parm, ZeroConstructor, IsPlainOldData)

void UNTTokenComponent::CreateTokensForTime(TArray<struct FName> TokenNames, const struct FName& TokenOwner, float TimeLimit)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTTokenComponent.CreateTokensForTime");

	UNTTokenComponent_CreateTokensForTime_Params params;
	params.TokenNames = TokenNames;
	params.TokenOwner = TokenOwner;
	params.TimeLimit = TimeLimit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.NTTokenComponent.CreateTokens
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<struct FName>           TokenNames                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FName                   TokenOwner                     (Parm, ZeroConstructor, IsPlainOldData)

void UNTTokenComponent::CreateTokens(TArray<struct FName> TokenNames, const struct FName& TokenOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTTokenComponent.CreateTokens");

	UNTTokenComponent_CreateTokens_Params params;
	params.TokenNames = TokenNames;
	params.TokenOwner = TokenOwner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.NTTokenComponent.CreateTokenForTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   TokenName                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   TokenOwner                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          TimeLimit                      (Parm, ZeroConstructor, IsPlainOldData)

void UNTTokenComponent::CreateTokenForTime(const struct FName& TokenName, const struct FName& TokenOwner, float TimeLimit)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTTokenComponent.CreateTokenForTime");

	UNTTokenComponent_CreateTokenForTime_Params params;
	params.TokenName = TokenName;
	params.TokenOwner = TokenOwner;
	params.TimeLimit = TimeLimit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.NTTokenComponent.CreateToken
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   TokenName                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   TokenOwner                     (Parm, ZeroConstructor, IsPlainOldData)

void UNTTokenComponent::CreateToken(const struct FName& TokenName, const struct FName& TokenOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTTokenComponent.CreateToken");

	UNTTokenComponent_CreateToken_Params params;
	params.TokenName = TokenName;
	params.TokenOwner = TokenOwner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.NTTokenComponent.AddTokenDeactivatedDelegate
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FName                   TokenName                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FScriptDelegate         Delegate                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void UNTTokenComponent::AddTokenDeactivatedDelegate(const struct FName& TokenName, const struct FScriptDelegate& Delegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTTokenComponent.AddTokenDeactivatedDelegate");

	UNTTokenComponent_AddTokenDeactivatedDelegate_Params params;
	params.TokenName = TokenName;
	params.Delegate = Delegate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.NTTokenComponent.AddTokenActivatedDelegate
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FName                   TokenName                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FScriptDelegate         Delegate                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void UNTTokenComponent::AddTokenActivatedDelegate(const struct FName& TokenName, const struct FScriptDelegate& Delegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTTokenComponent.AddTokenActivatedDelegate");

	UNTTokenComponent_AddTokenActivatedDelegate_Params params;
	params.TokenName = TokenName;
	params.Delegate = Delegate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.NTTransformFilterComponent.MultiplyFilter_Rotation_FDXMin
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Multiplier                     (Parm, ZeroConstructor, IsPlainOldData)

void UNTTransformFilterComponent::MultiplyFilter_Rotation_FDXMin(float Multiplier)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTTransformFilterComponent.MultiplyFilter_Rotation_FDXMin");

	UNTTransformFilterComponent_MultiplyFilter_Rotation_FDXMin_Params params;
	params.Multiplier = Multiplier;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.NTTransformFilterComponent.MultiplyFilter_Rotation_FCMin
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Multiplier                     (Parm, ZeroConstructor, IsPlainOldData)

void UNTTransformFilterComponent::MultiplyFilter_Rotation_FCMin(float Multiplier)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTTransformFilterComponent.MultiplyFilter_Rotation_FCMin");

	UNTTransformFilterComponent_MultiplyFilter_Rotation_FCMin_Params params;
	params.Multiplier = Multiplier;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.NTTransformFilterComponent.MultiplyFilter_Rotation_Beta
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Multiplier                     (Parm, ZeroConstructor, IsPlainOldData)

void UNTTransformFilterComponent::MultiplyFilter_Rotation_Beta(float Multiplier)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTTransformFilterComponent.MultiplyFilter_Rotation_Beta");

	UNTTransformFilterComponent_MultiplyFilter_Rotation_Beta_Params params;
	params.Multiplier = Multiplier;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.NTTransformFilterComponent.MultiplyFilter_Location_FDXMin
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Multiplier                     (Parm, ZeroConstructor, IsPlainOldData)

void UNTTransformFilterComponent::MultiplyFilter_Location_FDXMin(float Multiplier)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTTransformFilterComponent.MultiplyFilter_Location_FDXMin");

	UNTTransformFilterComponent_MultiplyFilter_Location_FDXMin_Params params;
	params.Multiplier = Multiplier;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.NTTransformFilterComponent.MultiplyFilter_Location_FCMin
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Multiplier                     (Parm, ZeroConstructor, IsPlainOldData)

void UNTTransformFilterComponent::MultiplyFilter_Location_FCMin(float Multiplier)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTTransformFilterComponent.MultiplyFilter_Location_FCMin");

	UNTTransformFilterComponent_MultiplyFilter_Location_FCMin_Params params;
	params.Multiplier = Multiplier;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.NTTransformFilterComponent.MultiplyFilter_Location_Beta
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Multiplier                     (Parm, ZeroConstructor, IsPlainOldData)

void UNTTransformFilterComponent::MultiplyFilter_Location_Beta(float Multiplier)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTTransformFilterComponent.MultiplyFilter_Location_Beta");

	UNTTransformFilterComponent_MultiplyFilter_Location_Beta_Params params;
	params.Multiplier = Multiplier;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.NTVisibilityVolume.Enable
// (Final, Native, Public, BlueprintCallable)

void ANTVisibilityVolume::Enable()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTVisibilityVolume.Enable");

	ANTVisibilityVolume_Enable_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.NTVisibilityVolume.Disable
// (Final, Native, Public, BlueprintCallable)

void ANTVisibilityVolume::Disable()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.NTVisibilityVolume.Disable");

	ANTVisibilityVolume_Disable_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.OffensiveCombatSquad.WasDraftedForAttack
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class UCombatSquadBehaviourInterface> SquadMember                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AOffensiveCombatSquad::WasDraftedForAttack(const TScriptInterface<class UCombatSquadBehaviourInterface>& SquadMember)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.OffensiveCombatSquad.WasDraftedForAttack");

	AOffensiveCombatSquad_WasDraftedForAttack_Params params;
	params.SquadMember = SquadMember;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.OffensiveCombatSquad.OnAttackEnded
// (Final, Native, Private)
// Parameters:
// class ASquadAttack*            Attack                         (Parm, ZeroConstructor, IsPlainOldData)

void AOffensiveCombatSquad::OnAttackEnded(class ASquadAttack* Attack)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.OffensiveCombatSquad.OnAttackEnded");

	AOffensiveCombatSquad_OnAttackEnded_Params params;
	params.Attack = Attack;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.OffensiveCombatSquad.OnAttackAboutToEnd
// (Final, Native, Private)
// Parameters:
// class ASquadAttack*            Attack                         (Parm, ZeroConstructor, IsPlainOldData)

void AOffensiveCombatSquad::OnAttackAboutToEnd(class ASquadAttack* Attack)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.OffensiveCombatSquad.OnAttackAboutToEnd");

	AOffensiveCombatSquad_OnAttackAboutToEnd_Params params;
	params.Attack = Attack;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.OffensiveCombatSquad.GetOngoingAttack
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASquadAttack*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ASquadAttack* AOffensiveCombatSquad::GetOngoingAttack()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.OffensiveCombatSquad.GetOngoingAttack");

	AOffensiveCombatSquad_GetOngoingAttack_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.OptionsMenuActor.ReceiveVolumeSettingUpdated
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESoundChannel                  Channel                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          Volume                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPlaySound                     (Parm, ZeroConstructor, IsPlainOldData)

void AOptionsMenuActor::ReceiveVolumeSettingUpdated(ESoundChannel Channel, float Volume, bool bPlaySound)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.OptionsMenuActor.ReceiveVolumeSettingUpdated");

	AOptionsMenuActor_ReceiveVolumeSettingUpdated_Params params;
	params.Channel = Channel;
	params.Volume = Volume;
	params.bPlaySound = bPlaySound;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.OptionsMenuActor.ReceiveVisualCombatAssistSettingChanged
// (Event, Protected, BlueprintEvent)

void AOptionsMenuActor::ReceiveVisualCombatAssistSettingChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.OptionsMenuActor.ReceiveVisualCombatAssistSettingChanged");

	AOptionsMenuActor_ReceiveVisualCombatAssistSettingChanged_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.OptionsMenuActor.ReceiveSubtitlesChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                           SubtitlesOn                    (Parm, ZeroConstructor, IsPlainOldData)

void AOptionsMenuActor::ReceiveSubtitlesChanged(bool SubtitlesOn)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.OptionsMenuActor.ReceiveSubtitlesChanged");

	AOptionsMenuActor_ReceiveSubtitlesChanged_Params params;
	params.SubtitlesOn = SubtitlesOn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.OptionsMenuActor.ReceiveSeatedSettingChanged
// (Event, Protected, BlueprintEvent)

void AOptionsMenuActor::ReceiveSeatedSettingChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.OptionsMenuActor.ReceiveSeatedSettingChanged");

	AOptionsMenuActor_ReceiveSeatedSettingChanged_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.OptionsMenuActor.ReceiveComfortLevelChanged
// (Event, Protected, BlueprintEvent)

void AOptionsMenuActor::ReceiveComfortLevelChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.OptionsMenuActor.ReceiveComfortLevelChanged");

	AOptionsMenuActor_ReceiveComfortLevelChanged_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.OptionsMenuActor.ReceiveClimbSettingChanged
// (Event, Protected, BlueprintEvent)

void AOptionsMenuActor::ReceiveClimbSettingChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.OptionsMenuActor.ReceiveClimbSettingChanged");

	AOptionsMenuActor_ReceiveClimbSettingChanged_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.OptionsMenuActor.ReceiveBackButtonPressed
// (Event, Protected, BlueprintEvent)

void AOptionsMenuActor::ReceiveBackButtonPressed()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.OptionsMenuActor.ReceiveBackButtonPressed");

	AOptionsMenuActor_ReceiveBackButtonPressed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.OptionsMenuActor.Receive360CombatSettingChanged
// (Event, Protected, BlueprintEvent)

void AOptionsMenuActor::Receive360CombatSettingChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.OptionsMenuActor.Receive360CombatSettingChanged");

	AOptionsMenuActor_Receive360CombatSettingChanged_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.OptionsMenuActor.OnVisualCombatAssistSettingChanged
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FChangedMenuComponent   MenuComponent                  (ConstParm, Parm, OutParm, ReferenceParm)

void AOptionsMenuActor::OnVisualCombatAssistSettingChanged(const struct FChangedMenuComponent& MenuComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.OptionsMenuActor.OnVisualCombatAssistSettingChanged");

	AOptionsMenuActor_OnVisualCombatAssistSettingChanged_Params params;
	params.MenuComponent = MenuComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.OptionsMenuActor.OnTabChanged
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FChangedMenuComponent   ChangedComponent               (ConstParm, Parm, OutParm, ReferenceParm)

void AOptionsMenuActor::OnTabChanged(const struct FChangedMenuComponent& ChangedComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.OptionsMenuActor.OnTabChanged");

	AOptionsMenuActor_OnTabChanged_Params params;
	params.ChangedComponent = ChangedComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.OptionsMenuActor.OnSubtitlesOnButtonPressed
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FPressedButtonComponent ButtonComponent                (ConstParm, Parm, OutParm, ReferenceParm)

void AOptionsMenuActor::OnSubtitlesOnButtonPressed(const struct FPressedButtonComponent& ButtonComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.OptionsMenuActor.OnSubtitlesOnButtonPressed");

	AOptionsMenuActor_OnSubtitlesOnButtonPressed_Params params;
	params.ButtonComponent = ButtonComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.OptionsMenuActor.OnSubtitlesOffButtonPressed
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FPressedButtonComponent ButtonComponent                (ConstParm, Parm, OutParm, ReferenceParm)

void AOptionsMenuActor::OnSubtitlesOffButtonPressed(const struct FPressedButtonComponent& ButtonComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.OptionsMenuActor.OnSubtitlesOffButtonPressed");

	AOptionsMenuActor_OnSubtitlesOffButtonPressed_Params params;
	params.ButtonComponent = ButtonComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.OptionsMenuActor.OnSeatedSettingChanged
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FChangedMenuComponent   MenuComponent                  (ConstParm, Parm, OutParm, ReferenceParm)

void AOptionsMenuActor::OnSeatedSettingChanged(const struct FChangedMenuComponent& MenuComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.OptionsMenuActor.OnSeatedSettingChanged");

	AOptionsMenuActor_OnSeatedSettingChanged_Params params;
	params.MenuComponent = MenuComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.OptionsMenuActor.OnMenuButtonPressed
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FPressedButtonComponent ButtonComponent                (ConstParm, Parm, OutParm, ReferenceParm)

void AOptionsMenuActor::OnMenuButtonPressed(const struct FPressedButtonComponent& ButtonComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.OptionsMenuActor.OnMenuButtonPressed");

	AOptionsMenuActor_OnMenuButtonPressed_Params params;
	params.ButtonComponent = ButtonComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.OptionsMenuActor.OnLocomotionSettingChanged
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FChangedMenuComponent   MenuComponent                  (ConstParm, Parm, OutParm, ReferenceParm)

void AOptionsMenuActor::OnLocomotionSettingChanged(const struct FChangedMenuComponent& MenuComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.OptionsMenuActor.OnLocomotionSettingChanged");

	AOptionsMenuActor_OnLocomotionSettingChanged_Params params;
	params.MenuComponent = MenuComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.OptionsMenuActor.OnLocomotionModeChanged
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FPressedButtonComponent ButtonComponent                (ConstParm, Parm, OutParm, ReferenceParm)

void AOptionsMenuActor::OnLocomotionModeChanged(const struct FPressedButtonComponent& ButtonComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.OptionsMenuActor.OnLocomotionModeChanged");

	AOptionsMenuActor_OnLocomotionModeChanged_Params params;
	params.ButtonComponent = ButtonComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.OptionsMenuActor.OnComfortLevelValueChanged
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FPressedButtonComponent ButtonComponent                (ConstParm, Parm, OutParm, ReferenceParm)

void AOptionsMenuActor::OnComfortLevelValueChanged(const struct FPressedButtonComponent& ButtonComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.OptionsMenuActor.OnComfortLevelValueChanged");

	AOptionsMenuActor_OnComfortLevelValueChanged_Params params;
	params.ButtonComponent = ButtonComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.OptionsMenuActor.OnClimbSettingChanged
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FChangedMenuComponent   MenuComponent                  (ConstParm, Parm, OutParm, ReferenceParm)

void AOptionsMenuActor::OnClimbSettingChanged(const struct FChangedMenuComponent& MenuComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.OptionsMenuActor.OnClimbSettingChanged");

	AOptionsMenuActor_OnClimbSettingChanged_Params params;
	params.MenuComponent = MenuComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.OptionsMenuActor.OnAudioSettingChanged
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FChangedMenuComponent   MenuComponent                  (ConstParm, Parm, OutParm, ReferenceParm)

void AOptionsMenuActor::OnAudioSettingChanged(const struct FChangedMenuComponent& MenuComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.OptionsMenuActor.OnAudioSettingChanged");

	AOptionsMenuActor_OnAudioSettingChanged_Params params;
	params.MenuComponent = MenuComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.OptionsMenuActor.On360CombatSettingChanged
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FChangedMenuComponent   MenuComponent                  (ConstParm, Parm, OutParm, ReferenceParm)

void AOptionsMenuActor::On360CombatSettingChanged(const struct FChangedMenuComponent& MenuComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.OptionsMenuActor.On360CombatSettingChanged");

	AOptionsMenuActor_On360CombatSettingChanged_Params params;
	params.MenuComponent = MenuComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.OptionsMenuActor.AttemptSaveSettings
// (Final, Native, Public, BlueprintCallable)

void AOptionsMenuActor::AttemptSaveSettings()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.OptionsMenuActor.AttemptSaveSettings");

	AOptionsMenuActor_AttemptSaveSettings_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.PauseMainMenuActor.ShowConfirmationPrompt
// (Final, Native, Protected, HasOutParms, BlueprintCallable)
// Parameters:
// struct FText                   WarningText                    (Parm, OutParm)

void APauseMainMenuActor::ShowConfirmationPrompt(struct FText* WarningText)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PauseMainMenuActor.ShowConfirmationPrompt");

	APauseMainMenuActor_ShowConfirmationPrompt_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (WarningText != nullptr)
		*WarningText = params.WarningText;
}


// Function WKND.PauseMainMenuActor.SetPauseManager
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AWKNDPauseManager*       PauseManager                   (Parm, ZeroConstructor, IsPlainOldData)

void APauseMainMenuActor::SetPauseManager(class AWKNDPauseManager* PauseManager)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PauseMainMenuActor.SetPauseManager");

	APauseMainMenuActor_SetPauseManager_Params params;
	params.PauseManager = PauseManager;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.PauseMainMenuActor.ReceiveConfirmationPromptClosed
// (Event, Public, BlueprintEvent)

void APauseMainMenuActor::ReceiveConfirmationPromptClosed()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PauseMainMenuActor.ReceiveConfirmationPromptClosed");

	APauseMainMenuActor_ReceiveConfirmationPromptClosed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.PauseMainMenuActor.ReceiveConfirmationPromptCalled
// (Event, Public, HasOutParms, BlueprintEvent)
// Parameters:
// struct FText                   WarningText                    (ConstParm, Parm, OutParm, ReferenceParm)

void APauseMainMenuActor::ReceiveConfirmationPromptCalled(const struct FText& WarningText)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PauseMainMenuActor.ReceiveConfirmationPromptCalled");

	APauseMainMenuActor_ReceiveConfirmationPromptCalled_Params params;
	params.WarningText = WarningText;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.PauseMainMenuActor.OnResumeGamePressed
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FPressedButtonComponent ButtonComponent                (ConstParm, Parm, OutParm, ReferenceParm)

void APauseMainMenuActor::OnResumeGamePressed(const struct FPressedButtonComponent& ButtonComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PauseMainMenuActor.OnResumeGamePressed");

	APauseMainMenuActor_OnResumeGamePressed_Params params;
	params.ButtonComponent = ButtonComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.PauseMainMenuActor.OnQuitGamePressed
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FPressedButtonComponent ButtonComponent                (ConstParm, Parm, OutParm, ReferenceParm)

void APauseMainMenuActor::OnQuitGamePressed(const struct FPressedButtonComponent& ButtonComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PauseMainMenuActor.OnQuitGamePressed");

	APauseMainMenuActor_OnQuitGamePressed_Params params;
	params.ButtonComponent = ButtonComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.PauseMainMenuActor.OnConfirmationPressed
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FPressedButtonComponent ButtonComponent                (ConstParm, Parm, OutParm, ReferenceParm)

void APauseMainMenuActor::OnConfirmationPressed(const struct FPressedButtonComponent& ButtonComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PauseMainMenuActor.OnConfirmationPressed");

	APauseMainMenuActor_OnConfirmationPressed_Params params;
	params.ButtonComponent = ButtonComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.PauseMainMenuActor.OnCancelPressed
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FPressedButtonComponent ButtonComponent                (ConstParm, Parm, OutParm, ReferenceParm)

void APauseMainMenuActor::OnCancelPressed(const struct FPressedButtonComponent& ButtonComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PauseMainMenuActor.OnCancelPressed");

	APauseMainMenuActor_OnCancelPressed_Params params;
	params.ButtonComponent = ButtonComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.PauseMainMenuActor.OnBackToMainMenuPressed
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FPressedButtonComponent ButtonComponent                (ConstParm, Parm, OutParm, ReferenceParm)

void APauseMainMenuActor::OnBackToMainMenuPressed(const struct FPressedButtonComponent& ButtonComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PauseMainMenuActor.OnBackToMainMenuPressed");

	APauseMainMenuActor_OnBackToMainMenuPressed_Params params;
	params.ButtonComponent = ButtonComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.PauseMainMenuActor.CloseConfirmationPrompt
// (Final, Native, Protected, BlueprintCallable)

void APauseMainMenuActor::CloseConfirmationPrompt()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PauseMainMenuActor.CloseConfirmationPrompt");

	APauseMainMenuActor_CloseConfirmationPrompt_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.PauseMenuActor.SetButtonConfigMaterialParameter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            ConfigID                       (Parm, ZeroConstructor, IsPlainOldData)

void APauseMenuActor::SetButtonConfigMaterialParameter(int ConfigID)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PauseMenuActor.SetButtonConfigMaterialParameter");

	APauseMenuActor_SetButtonConfigMaterialParameter_Params params;
	params.ConfigID = ConfigID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.PauseMenuActor.RequestPlacePauseMenuAtPlayer
// (Final, Native, Public, BlueprintCallable)

void APauseMenuActor::RequestPlacePauseMenuAtPlayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PauseMenuActor.RequestPlacePauseMenuAtPlayer");

	APauseMenuActor_RequestPlacePauseMenuAtPlayer_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.PauseMenuActor.OnGameUnPaused
// (Final, Native, Protected)
// Parameters:
// bool                           bShowPauseMenu                 (Parm, ZeroConstructor, IsPlainOldData)

void APauseMenuActor::OnGameUnPaused(bool bShowPauseMenu)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PauseMenuActor.OnGameUnPaused");

	APauseMenuActor_OnGameUnPaused_Params params;
	params.bShowPauseMenu = bShowPauseMenu;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.PauseMenuActor.OnGamePaused
// (Final, Native, Protected)
// Parameters:
// bool                           bShowPauseMenu                 (Parm, ZeroConstructor, IsPlainOldData)

void APauseMenuActor::OnGamePaused(bool bShowPauseMenu)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PauseMenuActor.OnGamePaused");

	APauseMenuActor_OnGamePaused_Params params;
	params.bShowPauseMenu = bShowPauseMenu;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.PhysicsButtonComponent.SetInteractionEnabledForButtonName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   Name                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsButtonComponent::SetInteractionEnabledForButtonName(const struct FName& Name, bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PhysicsButtonComponent.SetInteractionEnabledForButtonName");

	UPhysicsButtonComponent_SetInteractionEnabledForButtonName_Params params;
	params.Name = Name;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.PhysicsButtonComponent.SetInteractionEnabledForButtonIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsButtonComponent::SetInteractionEnabledForButtonIndex(int Index, bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PhysicsButtonComponent.SetInteractionEnabledForButtonIndex");

	UPhysicsButtonComponent_SetInteractionEnabledForButtonIndex_Params params;
	params.Index = Index;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.PhysicsButtonComponent.GetVelocityForButtonByName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   Name                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPhysicsButtonComponent::GetVelocityForButtonByName(const struct FName& Name)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PhysicsButtonComponent.GetVelocityForButtonByName");

	UPhysicsButtonComponent_GetVelocityForButtonByName_Params params;
	params.Name = Name;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.PhysicsButtonComponent.GetVelocityForButtonByIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPhysicsButtonComponent::GetVelocityForButtonByIndex(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PhysicsButtonComponent.GetVelocityForButtonByIndex");

	UPhysicsButtonComponent_GetVelocityForButtonByIndex_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.PhysicsButtonComponent.GetDesiredButtonTransformByName
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   Name                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform UPhysicsButtonComponent::GetDesiredButtonTransformByName(const struct FName& Name)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PhysicsButtonComponent.GetDesiredButtonTransformByName");

	UPhysicsButtonComponent_GetDesiredButtonTransformByName_Params params;
	params.Name = Name;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.PhysicsButtonComponent.GetDesiredButtonTransformByIndex
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform UPhysicsButtonComponent::GetDesiredButtonTransformByIndex(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PhysicsButtonComponent.GetDesiredButtonTransformByIndex");

	UPhysicsButtonComponent_GetDesiredButtonTransformByIndex_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.PhysicsInteractionsComponent.UnlockAllInteractions
// (Final, Native, Public, BlueprintCallable)

void UPhysicsInteractionsComponent::UnlockAllInteractions()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PhysicsInteractionsComponent.UnlockAllInteractions");

	UPhysicsInteractionsComponent_UnlockAllInteractions_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.PhysicsInteractionsComponent.LockAllInteractions
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InLockTime                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          InLockSpeedOverride            (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsInteractionsComponent::LockAllInteractions(float InLockTime, float InLockSpeedOverride)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PhysicsInteractionsComponent.LockAllInteractions");

	UPhysicsInteractionsComponent_LockAllInteractions_Params params;
	params.InLockTime = InLockTime;
	params.InLockSpeedOverride = InLockSpeedOverride;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.PhysicsInteractionsComponent.GetInteractionFromName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   Name                           (Parm, ZeroConstructor, IsPlainOldData)
// class UPhysicsInteraction*     ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UPhysicsInteraction* UPhysicsInteractionsComponent::GetInteractionFromName(const struct FName& Name)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PhysicsInteractionsComponent.GetInteractionFromName");

	UPhysicsInteractionsComponent_GetInteractionFromName_Params params;
	params.Name = Name;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.PhysicsInteractionsComponent.GetInteractionFromIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)
// class UPhysicsInteraction*     ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UPhysicsInteraction* UPhysicsInteractionsComponent::GetInteractionFromIndex(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PhysicsInteractionsComponent.GetInteractionFromIndex");

	UPhysicsInteractionsComponent_GetInteractionFromIndex_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.PhysicsInteractionsComponent.GetIndexForInteractionName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   Name                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UPhysicsInteractionsComponent::GetIndexForInteractionName(const struct FName& Name)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PhysicsInteractionsComponent.GetIndexForInteractionName");

	UPhysicsInteractionsComponent_GetIndexForInteractionName_Params params;
	params.Name = Name;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.PhysicsInteractionsComponent.EnableAllInteractions
// (Final, Native, Public, BlueprintCallable)

void UPhysicsInteractionsComponent::EnableAllInteractions()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PhysicsInteractionsComponent.EnableAllInteractions");

	UPhysicsInteractionsComponent_EnableAllInteractions_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.PhysicsInteractionsComponent.DisableAllInteractions
// (Final, Native, Public, BlueprintCallable)

void UPhysicsInteractionsComponent::DisableAllInteractions()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PhysicsInteractionsComponent.DisableAllInteractions");

	UPhysicsInteractionsComponent_DisableAllInteractions_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.PlayerClimbComponent.IsClimbing
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPlayerClimbComponent::IsClimbing()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PlayerClimbComponent.IsClimbing");

	UPlayerClimbComponent_IsClimbing_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.PlayerClimbComponent.GetPrimaryClimbObject
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AClimbObject*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AClimbObject* UPlayerClimbComponent::GetPrimaryClimbObject()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PlayerClimbComponent.GetPrimaryClimbObject");

	UPlayerClimbComponent_GetPrimaryClimbObject_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.PlayerClimbComponent.GetClimbDistanceThisFrame
// (Final, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPlayerClimbComponent::GetClimbDistanceThisFrame()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PlayerClimbComponent.GetClimbDistanceThisFrame");

	UPlayerClimbComponent_GetClimbDistanceThisFrame_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.VelocityTrackerComponent.Initialize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*         InTrackedComponent             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UVelocityTrackerComponent::Initialize(class USceneComponent* InTrackedComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VelocityTrackerComponent.Initialize");

	UVelocityTrackerComponent_Initialize_Params params;
	params.InTrackedComponent = InTrackedComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.VelocityTrackerComponent.GetWorldTransformForBone
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform UVelocityTrackerComponent::GetWorldTransformForBone(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VelocityTrackerComponent.GetWorldTransformForBone");

	UVelocityTrackerComponent_GetWorldTransformForBone_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.VelocityTrackerComponent.GetWorldLocationForBone
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector UVelocityTrackerComponent::GetWorldLocationForBone(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VelocityTrackerComponent.GetWorldLocationForBone");

	UVelocityTrackerComponent_GetWorldLocationForBone_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.VelocityTrackerComponent.GetTrackedComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USceneComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class USceneComponent* UVelocityTrackerComponent::GetTrackedComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VelocityTrackerComponent.GetTrackedComponent");

	UVelocityTrackerComponent_GetTrackedComponent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.VelocityTrackerComponent.GetRelativeVelocityForBone
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UVelocityTrackerComponent::GetRelativeVelocityForBone(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VelocityTrackerComponent.GetRelativeVelocityForBone");

	UVelocityTrackerComponent_GetRelativeVelocityForBone_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.VelocityTrackerComponent.GetPrefixedBoneName
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   Name                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName UVelocityTrackerComponent::GetPrefixedBoneName(const struct FName& Name)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VelocityTrackerComponent.GetPrefixedBoneName");

	UVelocityTrackerComponent_GetPrefixedBoneName_Params params;
	params.Name = Name;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.PlayerHandAudioComponentBase.GetTrigger
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPlayerHandAudioComponentBase::GetTrigger()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PlayerHandAudioComponentBase.GetTrigger");

	UPlayerHandAudioComponentBase_GetTrigger_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.PlayerHandAudioComponentBase.GetGrip
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPlayerHandAudioComponentBase::GetGrip()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PlayerHandAudioComponentBase.GetGrip");

	UPlayerHandAudioComponentBase_GetGrip_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.PlayerLocomotion.StartLocomote
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                 Location                       (Parm, IsPlainOldData)
// struct FRotator                Rotation                       (Parm, IsPlainOldData)
// bool                           SnapToMandated                 (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerLocomotion::StartLocomote(const struct FVector& Location, const struct FRotator& Rotation, bool SnapToMandated)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PlayerLocomotion.StartLocomote");

	UPlayerLocomotion_StartLocomote_Params params;
	params.Location = Location;
	params.Rotation = Rotation;
	params.SnapToMandated = SnapToMandated;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.PlayerLocomotion.GetSafeNavigationGround
// (Event, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                 lastNavigableGround            (Parm, OutParm, IsPlainOldData)
// bool                           groundInit                     (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UPlayerLocomotion::GetSafeNavigationGround(struct FVector* lastNavigableGround, bool* groundInit)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PlayerLocomotion.GetSafeNavigationGround");

	UPlayerLocomotion_GetSafeNavigationGround_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (lastNavigableGround != nullptr)
		*lastNavigableGround = params.lastNavigableGround;
	if (groundInit != nullptr)
		*groundInit = params.groundInit;
}


// Function WKND.PlayerScreenBlackOutComponent.SetTraceLength
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Length                         (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerScreenBlackOutComponent::SetTraceLength(float Length)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PlayerScreenBlackOutComponent.SetTraceLength");

	UPlayerScreenBlackOutComponent_SetTraceLength_Params params;
	params.Length = Length;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.PlayerScreenBlackOutComponent.SetSphereRadius
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerScreenBlackOutComponent::SetSphereRadius(float Radius)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PlayerScreenBlackOutComponent.SetSphereRadius");

	UPlayerScreenBlackOutComponent_SetSphereRadius_Params params;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.PlayerScreenBlackOutComponent.SetOffsetToCamera
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 OffsetToCamera                 (Parm, IsPlainOldData)

void UPlayerScreenBlackOutComponent::SetOffsetToCamera(const struct FVector& OffsetToCamera)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PlayerScreenBlackOutComponent.SetOffsetToCamera");

	UPlayerScreenBlackOutComponent_SetOffsetToCamera_Params params;
	params.OffsetToCamera = OffsetToCamera;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.PlayerScreenBlackOutComponent.SetIndicatorAngle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          degrees                        (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerScreenBlackOutComponent::SetIndicatorAngle(float degrees)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PlayerScreenBlackOutComponent.SetIndicatorAngle");

	UPlayerScreenBlackOutComponent_SetIndicatorAngle_Params params;
	params.degrees = degrees;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.PlayerScreenBlackOutComponent.SetBlackOutEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerScreenBlackOutComponent::SetBlackOutEnabled(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PlayerScreenBlackOutComponent.SetBlackOutEnabled");

	UPlayerScreenBlackOutComponent_SetBlackOutEnabled_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.PlayerScreenBlackOutComponent.ResetOffsetToCamera
// (Final, Native, Public, BlueprintCallable)

void UPlayerScreenBlackOutComponent::ResetOffsetToCamera()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PlayerScreenBlackOutComponent.ResetOffsetToCamera");

	UPlayerScreenBlackOutComponent_ResetOffsetToCamera_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.PlayerScreenBlackOutComponent.ResetBlackoutAfterTeleport
// (Final, Native, Public, BlueprintCallable)

void UPlayerScreenBlackOutComponent::ResetBlackoutAfterTeleport()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PlayerScreenBlackOutComponent.ResetBlackoutAfterTeleport");

	UPlayerScreenBlackOutComponent_ResetBlackoutAfterTeleport_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.PlayerScreenBlackOutComponent.OnWarningWidgetFadeOutFinished
// (Final, Native, Private)

void UPlayerScreenBlackOutComponent::OnWarningWidgetFadeOutFinished()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PlayerScreenBlackOutComponent.OnWarningWidgetFadeOutFinished");

	UPlayerScreenBlackOutComponent_OnWarningWidgetFadeOutFinished_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.PlayerScreenBlackOutComponent.IsBlackedOut
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPlayerScreenBlackOutComponent::IsBlackedOut()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PlayerScreenBlackOutComponent.IsBlackedOut");

	UPlayerScreenBlackOutComponent_IsBlackedOut_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.PlayerScreenBlackOutComponent.IgnoreSpecificClassArrows
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bIgnore                        (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  SubclassToIgnore               (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerScreenBlackOutComponent::IgnoreSpecificClassArrows(bool bIgnore, class UClass* SubclassToIgnore)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PlayerScreenBlackOutComponent.IgnoreSpecificClassArrows");

	UPlayerScreenBlackOutComponent_IgnoreSpecificClassArrows_Params params;
	params.bIgnore = bIgnore;
	params.SubclassToIgnore = SubclassToIgnore;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.PlayerScreenBlackOutComponent.IgnoreSpecificClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bIgnore                        (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  SubclassToIgnore               (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerScreenBlackOutComponent::IgnoreSpecificClass(bool bIgnore, class UClass* SubclassToIgnore)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PlayerScreenBlackOutComponent.IgnoreSpecificClass");

	UPlayerScreenBlackOutComponent_IgnoreSpecificClass_Params params;
	params.bIgnore = bIgnore;
	params.SubclassToIgnore = SubclassToIgnore;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.PlayerScreenBlackOutComponent.IgnoreSpecificActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bIgnore                        (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerScreenBlackOutComponent::IgnoreSpecificActor(bool bIgnore, class AActor* Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PlayerScreenBlackOutComponent.IgnoreSpecificActor");

	UPlayerScreenBlackOutComponent_IgnoreSpecificActor_Params params;
	params.bIgnore = bIgnore;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.PlayerScreenBlackOutComponent.IgnoreGrabbedObject
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bIgnore                        (Parm, ZeroConstructor, IsPlainOldData)
// EControllerHand                Hand                           (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerScreenBlackOutComponent::IgnoreGrabbedObject(bool bIgnore, EControllerHand Hand)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PlayerScreenBlackOutComponent.IgnoreGrabbedObject");

	UPlayerScreenBlackOutComponent_IgnoreGrabbedObject_Params params;
	params.bIgnore = bIgnore;
	params.Hand = Hand;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.PlayerScreenBlackOutComponent.IgnoreGrabableObjects
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bIgnore                        (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerScreenBlackOutComponent::IgnoreGrabableObjects(bool bIgnore)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PlayerScreenBlackOutComponent.IgnoreGrabableObjects");

	UPlayerScreenBlackOutComponent_IgnoreGrabableObjects_Params params;
	params.bIgnore = bIgnore;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.PlayerScreenBlackOutComponent.GetOffsetToCamera
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector UPlayerScreenBlackOutComponent::GetOffsetToCamera()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PlayerScreenBlackOutComponent.GetOffsetToCamera");

	UPlayerScreenBlackOutComponent_GetOffsetToCamera_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.PlayerScreenBlackOutComponent.GetLastValidCameraLocation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           bValidLocationFound            (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 LastValidLocation              (Parm, OutParm, IsPlainOldData)

void UPlayerScreenBlackOutComponent::GetLastValidCameraLocation(bool* bValidLocationFound, struct FVector* LastValidLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PlayerScreenBlackOutComponent.GetLastValidCameraLocation");

	UPlayerScreenBlackOutComponent_GetLastValidCameraLocation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bValidLocationFound != nullptr)
		*bValidLocationFound = params.bValidLocationFound;
	if (LastValidLocation != nullptr)
		*LastValidLocation = params.LastValidLocation;
}


// Function WKND.PlayerScreenBlackOutComponent.GetIndicatorAngle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPlayerScreenBlackOutComponent::GetIndicatorAngle()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PlayerScreenBlackOutComponent.GetIndicatorAngle");

	UPlayerScreenBlackOutComponent_GetIndicatorAngle_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.PlayerScreenBlackOutComponent.GetDistanceToLastCollisionGeometry
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPlayerScreenBlackOutComponent::GetDistanceToLastCollisionGeometry()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PlayerScreenBlackOutComponent.GetDistanceToLastCollisionGeometry");

	UPlayerScreenBlackOutComponent_GetDistanceToLastCollisionGeometry_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.PlayerScreenBlackOutComponent.GetCurrentFadeValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPlayerScreenBlackOutComponent::GetCurrentFadeValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PlayerScreenBlackOutComponent.GetCurrentFadeValue");

	UPlayerScreenBlackOutComponent_GetCurrentFadeValue_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.PMMenuButtonComponent.SetSkeletalMesh
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*  SkeletalMesh                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UPMMenuButtonComponent::SetSkeletalMesh(class USkeletalMeshComponent* SkeletalMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PMMenuButtonComponent.SetSkeletalMesh");

	UPMMenuButtonComponent_SetSkeletalMesh_Params params;
	params.SkeletalMesh = SkeletalMesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.PMMenuButtonComponent.SetPoseableMesh
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPoseableMeshComponent*  PoseableMesh                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UPMMenuButtonComponent::SetPoseableMesh(class UPoseableMeshComponent* PoseableMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PMMenuButtonComponent.SetPoseableMesh");

	UPMMenuButtonComponent_SetPoseableMesh_Params params;
	params.PoseableMesh = PoseableMesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.PMMenuButtonComponent.SetAssingedBoneName
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FName                   BoneName                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UPMMenuButtonComponent::SetAssingedBoneName(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PMMenuButtonComponent.SetAssingedBoneName");

	UPMMenuButtonComponent_SetAssingedBoneName_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.PMMenuButtonComponent.GetSkeletalMesh
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USkeletalMeshComponent*  ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class USkeletalMeshComponent* UPMMenuButtonComponent::GetSkeletalMesh()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PMMenuButtonComponent.GetSkeletalMesh");

	UPMMenuButtonComponent_GetSkeletalMesh_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.PMMenuButtonComponent.GetPoseableMesh
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UPoseableMeshComponent*  ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UPoseableMeshComponent* UPMMenuButtonComponent::GetPoseableMesh()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PMMenuButtonComponent.GetPoseableMesh");

	UPMMenuButtonComponent_GetPoseableMesh_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.PMMenuButtonComponent.GetAssignedBoneName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName UPMMenuButtonComponent::GetAssignedBoneName()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.PMMenuButtonComponent.GetAssignedBoneName");

	UPMMenuButtonComponent_GetAssignedBoneName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RatingsManager.OnTelemetryEvent
// (Final, Native, Private)
// Parameters:
// struct FTelemetryEvent         Event                          (Parm)

void URatingsManager::OnTelemetryEvent(const struct FTelemetryEvent& Event)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RatingsManager.OnTelemetryEvent");

	URatingsManager_OnTelemetryEvent_Params params;
	params.Event = Event;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RatingsManager.HasWaveBeenRated
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   WaveName                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URatingsManager::HasWaveBeenRated(const struct FName& WaveName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RatingsManager.HasWaveBeenRated");

	URatingsManager_HasWaveBeenRated_Params params;
	params.WaveName = WaveName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RatingsManager.HasRatingIncreasedForLastCompletedWave
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URatingsManager::HasRatingIncreasedForLastCompletedWave()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RatingsManager.HasRatingIncreasedForLastCompletedWave");

	URatingsManager_HasRatingIncreasedForLastCompletedWave_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RatingsManager.GetRatingInfoForLastCompletedWave
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ERating                        PreviousRating                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// ERating                        NewRating                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            NumMedalsEarned                (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void URatingsManager::GetRatingInfoForLastCompletedWave(ERating* PreviousRating, ERating* NewRating, int* NumMedalsEarned)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RatingsManager.GetRatingInfoForLastCompletedWave");

	URatingsManager_GetRatingInfoForLastCompletedWave_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PreviousRating != nullptr)
		*PreviousRating = params.PreviousRating;
	if (NewRating != nullptr)
		*NewRating = params.NewRating;
	if (NumMedalsEarned != nullptr)
		*NumMedalsEarned = params.NumMedalsEarned;
}


// Function WKND.RatingsManager.GetRatingForWave
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   WaveName                       (Parm, ZeroConstructor, IsPlainOldData)
// ERating                        Rating                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URatingsManager::GetRatingForWave(const struct FName& WaveName, ERating* Rating)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RatingsManager.GetRatingForWave");

	URatingsManager_GetRatingForWave_Params params;
	params.WaveName = WaveName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Rating != nullptr)
		*Rating = params.Rating;

	return params.ReturnValue;
}


// Function WKND.RatingsManager.GetRatingDataForWave
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   WaveName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FRatingData             ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRatingData URatingsManager::GetRatingDataForWave(const struct FName& WaveName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RatingsManager.GetRatingDataForWave");

	URatingsManager_GetRatingDataForWave_Params params;
	params.WaveName = WaveName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RatingsManager.GetNumMedalsEarned
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int URatingsManager::GetNumMedalsEarned()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RatingsManager.GetNumMedalsEarned");

	URatingsManager_GetNumMedalsEarned_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RatingsManager.GetMedalConditionByTypeForCurrentWave
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// ERating                        MedalType                      (Parm, ZeroConstructor, IsPlainOldData)
// EWaveMedalConditionType        ConditionType                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FWaveMedalCondition     MedalCondition                 (Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URatingsManager::GetMedalConditionByTypeForCurrentWave(ERating MedalType, EWaveMedalConditionType ConditionType, struct FWaveMedalCondition* MedalCondition)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RatingsManager.GetMedalConditionByTypeForCurrentWave");

	URatingsManager_GetMedalConditionByTypeForCurrentWave_Params params;
	params.MedalType = MedalType;
	params.ConditionType = ConditionType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (MedalCondition != nullptr)
		*MedalCondition = params.MedalCondition;

	return params.ReturnValue;
}


// Function WKND.RatingsManager.GetMedalConditionByType
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   WaveName                       (Parm, ZeroConstructor, IsPlainOldData)
// ERating                        MedalType                      (Parm, ZeroConstructor, IsPlainOldData)
// EWaveMedalConditionType        ConditionType                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FWaveMedalCondition     MedalCondition                 (Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URatingsManager::GetMedalConditionByType(const struct FName& WaveName, ERating MedalType, EWaveMedalConditionType ConditionType, struct FWaveMedalCondition* MedalCondition)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RatingsManager.GetMedalConditionByType");

	URatingsManager_GetMedalConditionByType_Params params;
	params.WaveName = WaveName;
	params.MedalType = MedalType;
	params.ConditionType = ConditionType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (MedalCondition != nullptr)
		*MedalCondition = params.MedalCondition;

	return params.ReturnValue;
}


// Function WKND.RatingsManager.GetMedalCollection
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FMedalCollection        ReturnValue                    (Parm, OutParm, ReturnParm)

struct FMedalCollection URatingsManager::GetMedalCollection()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RatingsManager.GetMedalCollection");

	URatingsManager_GetMedalCollection_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RatingsManager.GetFinalRatingForCurrentWave
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ERating                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ERating URatingsManager::GetFinalRatingForCurrentWave()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RatingsManager.GetFinalRatingForCurrentWave");

	URatingsManager_GetFinalRatingForCurrentWave_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RatingsManager.GetCurrentWaveRemainingPlayerHealth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int URatingsManager::GetCurrentWaveRemainingPlayerHealth()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RatingsManager.GetCurrentWaveRemainingPlayerHealth");

	URatingsManager_GetCurrentWaveRemainingPlayerHealth_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RatingsManager.GetCurrentWaveKillCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int URatingsManager::GetCurrentWaveKillCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RatingsManager.GetCurrentWaveKillCount");

	URatingsManager_GetCurrentWaveKillCount_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RatingsManager.GetCurrentWaveCompletionTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float URatingsManager::GetCurrentWaveCompletionTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RatingsManager.GetCurrentWaveCompletionTime");

	URatingsManager_GetCurrentWaveCompletionTime_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RatingsManager.GetCurrentWaveBestRemainingPlayerHealth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int URatingsManager::GetCurrentWaveBestRemainingPlayerHealth()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RatingsManager.GetCurrentWaveBestRemainingPlayerHealth");

	URatingsManager_GetCurrentWaveBestRemainingPlayerHealth_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RatingsManager.GetCurrentWaveBestKillCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int URatingsManager::GetCurrentWaveBestKillCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RatingsManager.GetCurrentWaveBestKillCount");

	URatingsManager_GetCurrentWaveBestKillCount_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RatingsManager.GetCurrentWaveBestCompletionTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float URatingsManager::GetCurrentWaveBestCompletionTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RatingsManager.GetCurrentWaveBestCompletionTime");

	URatingsManager_GetCurrentWaveBestCompletionTime_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RatingsManager.GetCurrentLiveRating
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ERating                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ERating URatingsManager::GetCurrentLiveRating()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RatingsManager.GetCurrentLiveRating");

	URatingsManager_GetCurrentLiveRating_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RatingsManager.GetBestRatingForCurrentWave
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ERating                        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ERating URatingsManager::GetBestRatingForCurrentWave()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RatingsManager.GetBestRatingForCurrentWave");

	URatingsManager_GetBestRatingForCurrentWave_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RewardsManager.ParseRewardData
// (Event, Protected, BlueprintEvent)
// Parameters:
// TArray<struct FRewardData>     ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<struct FRewardData> URewardsManager::ParseRewardData()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RewardsManager.ParseRewardData");

	URewardsManager_ParseRewardData_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RewardsManager.OnRatingEarned
// (Final, Native, Private)
// Parameters:
// struct FName                   WaveName                       (Parm, ZeroConstructor, IsPlainOldData)
// ERating                        Rating                         (Parm, ZeroConstructor, IsPlainOldData)

void URewardsManager::OnRatingEarned(const struct FName& WaveName, ERating Rating)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RewardsManager.OnRatingEarned");

	URewardsManager_OnRatingEarned_Params params;
	params.WaveName = WaveName;
	params.Rating = Rating;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RewardsManager.IsRewardUnlocked
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   RewardName                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URewardsManager::IsRewardUnlocked(const struct FName& RewardName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RewardsManager.IsRewardUnlocked");

	URewardsManager_IsRewardUnlocked_Params params;
	params.RewardName = RewardName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RewardsManager.GetRewardsEarnedOnLastRating
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FRewardData>     ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<struct FRewardData> URewardsManager::GetRewardsEarnedOnLastRating()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RewardsManager.GetRewardsEarnedOnLastRating");

	URewardsManager_GetRewardsEarnedOnLastRating_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RewardsManager.GetRewardData
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   RewardName                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FRewardData             RewardData                     (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URewardsManager::GetRewardData(const struct FName& RewardName, struct FRewardData* RewardData)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RewardsManager.GetRewardData");

	URewardsManager_GetRewardData_Params params;
	params.RewardName = RewardName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (RewardData != nullptr)
		*RewardData = params.RewardData;

	return params.ReturnValue;
}


// Function WKND.RewardsManager.GetAllRewardsOfType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ERewardType                    RewardType                     (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FRewardData>     ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<struct FRewardData> URewardsManager::GetAllRewardsOfType(ERewardType RewardType)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RewardsManager.GetAllRewardsOfType");

	URewardsManager_GetAllRewardsOfType_Params params;
	params.RewardType = RewardType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RewardsManager.ClearRewardsEarnedOnLastRating
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URewardsManager::ClearRewardsEarnedOnLastRating()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RewardsManager.ClearRewardsEarnedOnLastRating");

	URewardsManager_ClearRewardsEarnedOnLastRating_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RICEAICoordinator.ShuffleAdvance
// (Final, Native, Public, BlueprintCallable)

void ARICEAICoordinator::ShuffleAdvance()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RICEAICoordinator.ShuffleAdvance");

	ARICEAICoordinator_ShuffleAdvance_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RICEAICoordinator.SetTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class APawn*                   NewTarget                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void ARICEAICoordinator::SetTarget(class APawn* NewTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RICEAICoordinator.SetTarget");

	ARICEAICoordinator_SetTarget_Params params;
	params.NewTarget = NewTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RICEAICoordinator.RemoveAIData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ARICEAIController*       Controller                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void ARICEAICoordinator::RemoveAIData(class ARICEAIController* Controller)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RICEAICoordinator.RemoveAIData");

	ARICEAICoordinator_RemoveAIData_Params params;
	params.Controller = Controller;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RICEAICoordinator.MoveRandomDroidForwardToZone
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            destinationZone                (Parm, ZeroConstructor, IsPlainOldData)

void ARICEAICoordinator::MoveRandomDroidForwardToZone(int destinationZone)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RICEAICoordinator.MoveRandomDroidForwardToZone");

	ARICEAICoordinator_MoveRandomDroidForwardToZone_Params params;
	params.destinationZone = destinationZone;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RICEAICoordinator.GetDroidAtIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)
// class APawn*                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APawn* ARICEAICoordinator::GetDroidAtIndex(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RICEAICoordinator.GetDroidAtIndex");

	ARICEAICoordinator_GetDroidAtIndex_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RICEAICoordinator.GetAssignedLocation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class ARICEAIController*       Controller                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Position                       (Parm, OutParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ARICEAICoordinator::GetAssignedLocation(class ARICEAIController* Controller, struct FVector* Position)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RICEAICoordinator.GetAssignedLocation");

	ARICEAICoordinator_GetAssignedLocation_Params params;
	params.Controller = Controller;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Position != nullptr)
		*Position = params.Position;

	return params.ReturnValue;
}


// Function WKND.RICEAICoordinator.GetAIPositioningComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UAIPositioningComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAIPositioningComponent* ARICEAICoordinator::GetAIPositioningComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RICEAICoordinator.GetAIPositioningComponent");

	ARICEAICoordinator_GetAIPositioningComponent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RICEAICoordinator.DebugDrawZones
// (Final, Native, Public, BlueprintCallable)

void ARICEAICoordinator::DebugDrawZones()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RICEAICoordinator.DebugDrawZones");

	ARICEAICoordinator_DebugDrawZones_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RICEAICoordinator.CountDroidsAttemptingMelee
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int ARICEAICoordinator::CountDroidsAttemptingMelee()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RICEAICoordinator.CountDroidsAttemptingMelee");

	ARICEAICoordinator_CountDroidsAttemptingMelee_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RICEAICoordinator.AssignLocationsByZone
// (Final, Native, Public, BlueprintCallable)

void ARICEAICoordinator::AssignLocationsByZone()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RICEAICoordinator.AssignLocationsByZone");

	ARICEAICoordinator_AssignLocationsByZone_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RICEAICoordinator.AgentRejectedNavigation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ARICEAIController*       Controller                     (Parm, ZeroConstructor, IsPlainOldData)

void ARICEAICoordinator::AgentRejectedNavigation(class ARICEAIController* Controller)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RICEAICoordinator.AgentRejectedNavigation");

	ARICEAICoordinator_AgentRejectedNavigation_Params params;
	params.Controller = Controller;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RICEAICoordinator.AddAIData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ARICEAIController*       Controller                     (Parm, ZeroConstructor, IsPlainOldData)

void ARICEAICoordinator::AddAIData(class ARICEAIController* Controller)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RICEAICoordinator.AddAIData");

	ARICEAICoordinator_AddAIData_Params params;
	params.Controller = Controller;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RICEAICoordinator.ActiveDroidCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int ARICEAICoordinator::ActiveDroidCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RICEAICoordinator.ActiveDroidCount");

	ARICEAICoordinator_ActiveDroidCount_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RICEPOCGameModeBase.ToggleHaptics
// (Final, Exec, Native, Public)

void ARICEPOCGameModeBase::ToggleHaptics()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RICEPOCGameModeBase.ToggleHaptics");

	ARICEPOCGameModeBase_ToggleHaptics_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RICEPOCGameModeBase.GetSaberManager
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ARPOCSaberManager*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ARPOCSaberManager* ARICEPOCGameModeBase::GetSaberManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RICEPOCGameModeBase.GetSaberManager");

	ARICEPOCGameModeBase_GetSaberManager_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RICEPOCGameModeBase.GetHapticsManager
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UNTHapticManagerComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UNTHapticManagerComponent* ARICEPOCGameModeBase::GetHapticsManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RICEPOCGameModeBase.GetHapticsManager");

	ARICEPOCGameModeBase_GetHapticsManager_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RICEPOCGameModeBase.GetCoordinator
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ARICEAICoordinator*      ReturnValue                    (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ARICEAICoordinator* ARICEPOCGameModeBase::GetCoordinator()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RICEPOCGameModeBase.GetCoordinator");

	ARICEPOCGameModeBase_GetCoordinator_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCBladeSweepComponent.UpdateBlade
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FBladeData              BladeData                      (Parm)
// bool                           Primary                        (Parm, ZeroConstructor, IsPlainOldData)

void URPOCBladeSweepComponent::UpdateBlade(const struct FBladeData& BladeData, bool Primary)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCBladeSweepComponent.UpdateBlade");

	URPOCBladeSweepComponent_UpdateBlade_Params params;
	params.BladeData = BladeData;
	params.Primary = Primary;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCBladeSweepComponent.SweepIncrement
// (Final, Native, Protected, HasOutParms, HasDefaults)
// Parameters:
// TArray<struct FHitResult>      hitResults                     (Parm, OutParm, ZeroConstructor)
// TEnumAsByte<ECollisionChannel> Channel                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 TraceStart                     (Parm, IsPlainOldData)
// struct FVector                 TraceEnd                       (Parm, IsPlainOldData)
// struct FQuat                   traceRot                       (Parm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCBladeSweepComponent::SweepIncrement(TEnumAsByte<ECollisionChannel> Channel, const struct FVector& TraceStart, const struct FVector& TraceEnd, const struct FQuat& traceRot, TArray<struct FHitResult>* hitResults)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCBladeSweepComponent.SweepIncrement");

	URPOCBladeSweepComponent_SweepIncrement_Params params;
	params.Channel = Channel;
	params.TraceStart = TraceStart;
	params.TraceEnd = TraceEnd;
	params.traceRot = traceRot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (hitResults != nullptr)
		*hitResults = params.hitResults;

	return params.ReturnValue;
}


// Function WKND.RPOCBladeSweepComponent.SweepCapsule
// (Final, Native, Protected, HasOutParms, HasDefaults)
// Parameters:
// struct FTransform              Start                          (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FTransform              End                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCBladeSweepComponent::SweepCapsule(const struct FTransform& Start, const struct FTransform& End)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCBladeSweepComponent.SweepCapsule");

	URPOCBladeSweepComponent_SweepCapsule_Params params;
	params.Start = Start;
	params.End = End;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCBladeSweepComponent.SweepBlade2
// (Final, Native, Public, BlueprintCallable)

void URPOCBladeSweepComponent::SweepBlade2()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCBladeSweepComponent.SweepBlade2");

	URPOCBladeSweepComponent_SweepBlade2_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCBladeSweepComponent.SweepBlade
// (Final, Native, Public, BlueprintCallable)

void URPOCBladeSweepComponent::SweepBlade()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCBladeSweepComponent.SweepBlade");

	URPOCBladeSweepComponent_SweepBlade_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCBladeSweepComponent.FindTriangleIntersection
// (Final, Native, Protected)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCBladeSweepComponent::FindTriangleIntersection()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCBladeSweepComponent.FindTriangleIntersection");

	URPOCBladeSweepComponent_FindTriangleIntersection_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickupActor.UpdateHighlight
// (Final, Native, Public)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)

void ARPOCPickupActor::UpdateHighlight(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor.UpdateHighlight");

	ARPOCPickupActor_UpdateHighlight_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor.SetAsPalmable
// (Native, Protected, BlueprintCallable)
// Parameters:
// class UCapsuleComponent*       CollisionWhenInHand            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           Palmable                       (Parm, ZeroConstructor, IsPlainOldData)

void ARPOCPickupActor::SetAsPalmable(class UCapsuleComponent* CollisionWhenInHand, bool Palmable)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor.SetAsPalmable");

	ARPOCPickupActor_SetAsPalmable_Params params;
	params.CollisionWhenInHand = CollisionWhenInHand;
	params.Palmable = Palmable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor.RepositionObject
// (Native, Protected)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ARPOCPickupActor::RepositionObject(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor.RepositionObject");

	ARPOCPickupActor_RepositionObject_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickupActor.Release
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bApplyImpulseOnRelease         (Parm, ZeroConstructor, IsPlainOldData)

void ARPOCPickupActor::Release(bool bApplyImpulseOnRelease)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor.Release");

	ARPOCPickupActor_Release_Params params;
	params.bApplyImpulseOnRelease = bApplyImpulseOnRelease;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor.ReceiveOnUsed
// (Event, Public, BlueprintEvent)

void ARPOCPickupActor::ReceiveOnUsed()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor.ReceiveOnUsed");

	ARPOCPickupActor_ReceiveOnUsed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor.ReceiveOnStopUse
// (Event, Public, BlueprintEvent)

void ARPOCPickupActor::ReceiveOnStopUse()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor.ReceiveOnStopUse");

	ARPOCPickupActor_ReceiveOnStopUse_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor.ReceiveOnReleased
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                  PreviousInstigator             (Parm, ZeroConstructor, IsPlainOldData)

void ARPOCPickupActor::ReceiveOnReleased(class AActor* PreviousInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor.ReceiveOnReleased");

	ARPOCPickupActor_ReceiveOnReleased_Params params;
	params.PreviousInstigator = PreviousInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor.ReceiveOnPickedUp
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                  CurrentInstigator              (Parm, ZeroConstructor, IsPlainOldData)

void ARPOCPickupActor::ReceiveOnPickedUp(class AActor* CurrentInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor.ReceiveOnPickedUp");

	ARPOCPickupActor_ReceiveOnPickedUp_Params params;
	params.CurrentInstigator = CurrentInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor.ReceiveOnNotHeldInBothHands
// (Event, Public, BlueprintEvent)

void ARPOCPickupActor::ReceiveOnNotHeldInBothHands()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor.ReceiveOnNotHeldInBothHands");

	ARPOCPickupActor_ReceiveOnNotHeldInBothHands_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor.ReceiveOnInHand
// (Event, Public, BlueprintEvent)

void ARPOCPickupActor::ReceiveOnInHand()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor.ReceiveOnInHand");

	ARPOCPickupActor_ReceiveOnInHand_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor.ReceiveOnHeldInBothHands
// (Event, Public, BlueprintEvent)

void ARPOCPickupActor::ReceiveOnHeldInBothHands()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor.ReceiveOnHeldInBothHands");

	ARPOCPickupActor_ReceiveOnHeldInBothHands_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor.ReceiveOnBeginRangedGrab
// (Event, Public, BlueprintEvent)

void ARPOCPickupActor::ReceiveOnBeginRangedGrab()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor.ReceiveOnBeginRangedGrab");

	ARPOCPickupActor_ReceiveOnBeginRangedGrab_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor.ReceiveOnBeenDisarmed
// (Event, Public, BlueprintEvent)

void ARPOCPickupActor::ReceiveOnBeenDisarmed()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor.ReceiveOnBeenDisarmed");

	ARPOCPickupActor_ReceiveOnBeenDisarmed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor.OnNonPlayerPickUp
// (Native, Public, BlueprintCallable)

void ARPOCPickupActor::OnNonPlayerPickUp()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor.OnNonPlayerPickUp");

	ARPOCPickupActor_OnNonPlayerPickUp_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor.OnNonPlayerDrop
// (Native, Public, BlueprintCallable)

void ARPOCPickupActor::OnNonPlayerDrop()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor.OnNonPlayerDrop");

	ARPOCPickupActor_OnNonPlayerDrop_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor.InitReposition
// (Native, Protected, HasDefaults)
// Parameters:
// struct FTransform              HandTransform                  (Parm, IsPlainOldData)
// float                          RepositionTime                 (Parm, ZeroConstructor, IsPlainOldData)

void ARPOCPickupActor::InitReposition(const struct FTransform& HandTransform, float RepositionTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor.InitReposition");

	ARPOCPickupActor_InitReposition_Params params;
	params.HandTransform = HandTransform;
	params.RepositionTime = RepositionTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor.GetRegressedVelocity
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector ARPOCPickupActor::GetRegressedVelocity()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor.GetRegressedVelocity");

	ARPOCPickupActor_GetRegressedVelocity_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickupActor.GetRegressedAngularVelocity
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector ARPOCPickupActor::GetRegressedAngularVelocity()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor.GetRegressedAngularVelocity");

	ARPOCPickupActor_GetRegressedAngularVelocity_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickupActor.GetPrimaryHand
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ENTHapticHands                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ENTHapticHands ARPOCPickupActor::GetPrimaryHand()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor.GetPrimaryHand");

	ARPOCPickupActor_GetPrimaryHand_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickupActor.GetOffHand
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ENTHapticHands                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ENTHapticHands ARPOCPickupActor::GetOffHand()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor.GetOffHand");

	ARPOCPickupActor_GetOffHand_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickupActor.GetLatestVelocityFromBuffer
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector ARPOCPickupActor::GetLatestVelocityFromBuffer()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor.GetLatestVelocityFromBuffer");

	ARPOCPickupActor_GetLatestVelocityFromBuffer_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickupActor.GetIsIdling
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ARPOCPickupActor::GetIsIdling()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor.GetIsIdling");

	ARPOCPickupActor_GetIsIdling_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickupActor.GetIdleTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          ReturnValue                    (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ARPOCPickupActor::GetIdleTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor.GetIdleTime");

	ARPOCPickupActor_GetIdleTime_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickupActor.EnablePhysicsSimulation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           flag                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ARPOCPickupActor::EnablePhysicsSimulation(bool flag)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor.EnablePhysicsSimulation");

	ARPOCPickupActor_EnablePhysicsSimulation_Params params;
	params.flag = flag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickupActor.DropInternal
// (Native, Public)
// Parameters:
// bool                           ApplyImpulseOnRelease          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ARPOCPickupActor::DropInternal(bool ApplyImpulseOnRelease)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor.DropInternal");

	ARPOCPickupActor_DropInternal_Params params;
	params.ApplyImpulseOnRelease = ApplyImpulseOnRelease;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickupActor.DelayedDestroy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Delay                          (Parm, ZeroConstructor, IsPlainOldData)

void ARPOCPickupActor::DelayedDestroy(float Delay)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor.DelayedDestroy");

	ARPOCPickupActor_DelayedDestroy_Params params;
	params.Delay = Delay;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor.Deactivate
// (Native, Public, BlueprintCallable)

void ARPOCPickupActor::Deactivate()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor.Deactivate");

	ARPOCPickupActor_Deactivate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor.CancelDelayedDestroy
// (Final, Native, Public, BlueprintCallable)

void ARPOCPickupActor::CancelDelayedDestroy()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor.CancelDelayedDestroy");

	ARPOCPickupActor_CancelDelayedDestroy_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor.ApplyImpulseOnRelease
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ARPOCPickupActor::ApplyImpulseOnRelease()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor.ApplyImpulseOnRelease");

	ARPOCPickupActor_ApplyImpulseOnRelease_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickupActor.Activate
// (Native, Public, BlueprintCallable)

void ARPOCPickupActor::Activate()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor.Activate");

	ARPOCPickupActor_Activate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCBuildPart.RemovePart
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ARPOCBuildPart::RemovePart()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCBuildPart.RemovePart");

	ARPOCBuildPart_RemovePart_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCBuildPart.ReceiveOnAddedPart
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                  AttachParent                   (Parm, ZeroConstructor, IsPlainOldData)

void ARPOCBuildPart::ReceiveOnAddedPart(class AActor* AttachParent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCBuildPart.ReceiveOnAddedPart");

	ARPOCBuildPart_ReceiveOnAddedPart_Params params;
	params.AttachParent = AttachParent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCBuildPart.OnHit
// (Native, Public, HasOutParms, HasDefaults)
// Parameters:
// class AActor*                  SelfActor                      (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 NormalImpulse                  (Parm, IsPlainOldData)
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void ARPOCBuildPart::OnHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCBuildPart.OnHit");

	ARPOCBuildPart_OnHit_Params params;
	params.SelfActor = SelfActor;
	params.OtherActor = OtherActor;
	params.NormalImpulse = NormalImpulse;
	params.Hit = Hit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCBuildPart.OnBeginOverlap
// (Native, Public)
// Parameters:
// class AActor*                  OverlappedActor                (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)

void ARPOCBuildPart::OnBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCBuildPart.OnBeginOverlap");

	ARPOCBuildPart_OnBeginOverlap_Params params;
	params.OverlappedActor = OverlappedActor;
	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCBuildPart.LockIntoSlot
// (Final, Native, Public, BlueprintCallable)

void ARPOCBuildPart::LockIntoSlot()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCBuildPart.LockIntoSlot");

	ARPOCBuildPart_LockIntoSlot_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCBuildPart.Deactivate
// (Native, Public, BlueprintCallable)

void ARPOCBuildPart::Deactivate()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCBuildPart.Deactivate");

	ARPOCBuildPart_Deactivate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCBuildPart.AddPart
// (Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*     AttachTo                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ARPOCBuildPart::AddPart(class UPrimitiveComponent* AttachTo)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCBuildPart.AddPart");

	ARPOCBuildPart_AddPart_Params params;
	params.AttachTo = AttachTo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCBuildPart.Activate
// (Native, Public, BlueprintCallable)

void ARPOCBuildPart::Activate()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCBuildPart.Activate");

	ARPOCBuildPart_Activate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCCanGrabInterface.SetReverseGrip
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           bReverse                       (Parm, ZeroConstructor, IsPlainOldData)

void URPOCCanGrabInterface::SetReverseGrip(bool bReverse)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCCanGrabInterface.SetReverseGrip");

	URPOCCanGrabInterface_SetReverseGrip_Params params;
	params.bReverse = bReverse;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCCanGrabInterface.SetForceAttachToController
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           bForce                         (Parm, ZeroConstructor, IsPlainOldData)

void URPOCCanGrabInterface::SetForceAttachToController(bool bForce)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCCanGrabInterface.SetForceAttachToController");

	URPOCCanGrabInterface_SetForceAttachToController_Params params;
	params.bForce = bForce;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCCanGrabInterface.SetAttachedActor
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                  attached                       (Parm, ZeroConstructor, IsPlainOldData)

void URPOCCanGrabInterface::SetAttachedActor(class AActor* attached)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCCanGrabInterface.SetAttachedActor");

	URPOCCanGrabInterface_SetAttachedActor_Params params;
	params.attached = attached;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCCanGrabInterface.RequestSwap
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)

void URPOCCanGrabInterface::RequestSwap(class AActor* Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCCanGrabInterface.RequestSwap");

	URPOCCanGrabInterface_RequestSwap_Params params;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCCanGrabInterface.ReleaseActor
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// TEnumAsByte<EGrabResult>       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TEnumAsByte<EGrabResult> URPOCCanGrabInterface::ReleaseActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCCanGrabInterface.ReleaseActor");

	URPOCCanGrabInterface_ReleaseActor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCCanGrabInterface.OnActorGrabbed
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void URPOCCanGrabInterface::OnActorGrabbed()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCCanGrabInterface.OnActorGrabbed");

	URPOCCanGrabInterface_OnActorGrabbed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCCanGrabInterface.IsHeldInBothHands
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCCanGrabInterface::IsHeldInBothHands()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCCanGrabInterface.IsHeldInBothHands");

	URPOCCanGrabInterface_IsHeldInBothHands_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCCanGrabInterface.HasAttachedActor
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCCanGrabInterface::HasAttachedActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCCanGrabInterface.HasAttachedActor");

	URPOCCanGrabInterface_HasAttachedActor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCCanGrabInterface.GrabActor_Force
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                  actorToGrab                    (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EGrabResult>       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TEnumAsByte<EGrabResult> URPOCCanGrabInterface::GrabActor_Force(class AActor* actorToGrab)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCCanGrabInterface.GrabActor_Force");

	URPOCCanGrabInterface_GrabActor_Force_Params params;
	params.actorToGrab = actorToGrab;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCCanGrabInterface.GetOwningPawn
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APawn* URPOCCanGrabInterface::GetOwningPawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCCanGrabInterface.GetOwningPawn");

	URPOCCanGrabInterface_GetOwningPawn_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCCanGrabInterface.GetHeldActor
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* URPOCCanGrabInterface::GetHeldActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCCanGrabInterface.GetHeldActor");

	URPOCCanGrabInterface_GetHeldActor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCCanGrabInterface.GetHandCollisionActor
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* URPOCCanGrabInterface::GetHandCollisionActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCCanGrabInterface.GetHandCollisionActor");

	URPOCCanGrabInterface_GetHandCollisionActor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCCanGrabInterface.GetGrabSphereSize
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float URPOCCanGrabInterface::GetGrabSphereSize()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCCanGrabInterface.GetGrabSphereSize");

	URPOCCanGrabInterface_GetGrabSphereSize_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCCanGrabInterface.GetGrabSphereLocation
// (Native, Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector URPOCCanGrabInterface::GetGrabSphereLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCCanGrabInterface.GetGrabSphereLocation");

	URPOCCanGrabInterface_GetGrabSphereLocation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCCanGrabInterface.GetControllerHand
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EControllerHand                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EControllerHand URPOCCanGrabInterface::GetControllerHand()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCCanGrabInterface.GetControllerHand");

	URPOCCanGrabInterface_GetControllerHand_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCCanGrabInterface.ForceDropItem
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void URPOCCanGrabInterface::ForceDropItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCCanGrabInterface.ForceDropItem");

	URPOCCanGrabInterface_ForceDropItem_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCCanGrabInterface.EnvIgnoreList
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ignore                         (Parm, ZeroConstructor, IsPlainOldData)

void URPOCCanGrabInterface::EnvIgnoreList(class AActor* Actor, bool ignore)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCCanGrabInterface.EnvIgnoreList");

	URPOCCanGrabInterface_EnvIgnoreList_Params params;
	params.Actor = Actor;
	params.ignore = ignore;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCGrabLocatorComponent.SetEnabled
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void URPOCGrabLocatorComponent::SetEnabled(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCGrabLocatorComponent.SetEnabled");

	URPOCGrabLocatorComponent_SetEnabled_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCGrabLocatorComponent.IsGrabbed
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCGrabLocatorComponent::IsGrabbed()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCGrabLocatorComponent.IsGrabbed");

	URPOCGrabLocatorComponent_IsGrabbed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCGrabLocatorComponent.IsGrabbable
// (Final, Native, Public)
// Parameters:
// EGrabHand                      GrabHand                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCGrabLocatorComponent::IsGrabbable(EGrabHand GrabHand)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCGrabLocatorComponent.IsGrabbable");

	URPOCGrabLocatorComponent_IsGrabbable_Params params;
	params.GrabHand = GrabHand;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCGrabLocatorComponent.GetGrabbable
// (Final, Native, Public)
// Parameters:
// class UWKNDGrabbableComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UWKNDGrabbableComponent* URPOCGrabLocatorComponent::GetGrabbable()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCGrabLocatorComponent.GetGrabbable");

	URPOCGrabLocatorComponent_GetGrabbable_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCGrabLocatorComponent.GetEnabled
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCGrabLocatorComponent::GetEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCGrabLocatorComponent.GetEnabled");

	URPOCGrabLocatorComponent_GetEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCGrabLocatorComponent.GetAnimType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FAnimTypeDropdown       ReturnValue                    (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm)

struct FAnimTypeDropdown URPOCGrabLocatorComponent::GetAnimType()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCGrabLocatorComponent.GetAnimType");

	URPOCGrabLocatorComponent_GetAnimType_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCClimbLocatorComponent.ToggleDebug
// (Final, Native, Static, Public)

void URPOCClimbLocatorComponent::STATIC_ToggleDebug()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCClimbLocatorComponent.ToggleDebug");

	URPOCClimbLocatorComponent_ToggleDebug_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCCombatStage_Attack.TriggerNewCombo
// (Final, Native, Private)

void URPOCCombatStage_Attack::TriggerNewCombo()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCCombatStage_Attack.TriggerNewCombo");

	URPOCCombatStage_Attack_TriggerNewCombo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCEnemyAttackComponent.UpdateContestedClash
// (Final, Native, Public)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)

void URPOCEnemyAttackComponent::UpdateContestedClash(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCEnemyAttackComponent.UpdateContestedClash");

	URPOCEnemyAttackComponent_UpdateContestedClash_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCEnemyAttackComponent.TauntBlendOut
// (Final, Native, Public)
// Parameters:
// class UAnimMontage*            InAttack                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          StartAtTime                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendTime                      (Parm, ZeroConstructor, IsPlainOldData)

void URPOCEnemyAttackComponent::TauntBlendOut(class UAnimMontage* InAttack, float StartAtTime, float BlendTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCEnemyAttackComponent.TauntBlendOut");

	URPOCEnemyAttackComponent_TauntBlendOut_Params params;
	params.InAttack = InAttack;
	params.StartAtTime = StartAtTime;
	params.BlendTime = BlendTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCEnemyAttackComponent.StartContestedClash
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FSaberClashData         Clash                          (ConstParm, Parm, OutParm, ReferenceParm)

void URPOCEnemyAttackComponent::StartContestedClash(const struct FSaberClashData& Clash)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCEnemyAttackComponent.StartContestedClash");

	URPOCEnemyAttackComponent_StartContestedClash_Params params;
	params.Clash = Clash;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCEnemyAttackComponent.RecoverFromBlock
// (Final, Native, Public)
// Parameters:
// class UAnimMontage*            InAttack                       (Parm, ZeroConstructor, IsPlainOldData)

void URPOCEnemyAttackComponent::RecoverFromBlock(class UAnimMontage* InAttack)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCEnemyAttackComponent.RecoverFromBlock");

	URPOCEnemyAttackComponent_RecoverFromBlock_Params params;
	params.InAttack = InAttack;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCEnemyAttackComponent.OnSuccess
// (Final, Native, Public, BlueprintCallable)

void URPOCEnemyAttackComponent::OnSuccess()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCEnemyAttackComponent.OnSuccess");

	URPOCEnemyAttackComponent_OnSuccess_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCEnemyAttackComponent.OnOpponentTakeDamage
// (Final, Native, Protected)
// Parameters:
// int                            DamageAmount                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FWKNDDamageInfo         DamageInfo                     (Parm)

void URPOCEnemyAttackComponent::OnOpponentTakeDamage(int DamageAmount, const struct FWKNDDamageInfo& DamageInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCEnemyAttackComponent.OnOpponentTakeDamage");

	URPOCEnemyAttackComponent_OnOpponentTakeDamage_Params params;
	params.DamageAmount = DamageAmount;
	params.DamageInfo = DamageInfo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCEnemyAttackComponent.OnLightsaberClash
// (Final, Native, Public, HasOutParms)
// Parameters:
// class ARPOCPickup_Lightsaber*  Saber1                         (Parm, ZeroConstructor, IsPlainOldData)
// class ARPOCPickup_Lightsaber*  Saber2                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          RewindTime                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FSaberClashData         Clash                          (ConstParm, Parm, OutParm, ReferenceParm)

void URPOCEnemyAttackComponent::OnLightsaberClash(class ARPOCPickup_Lightsaber* Saber1, class ARPOCPickup_Lightsaber* Saber2, float RewindTime, const struct FSaberClashData& Clash)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCEnemyAttackComponent.OnLightsaberClash");

	URPOCEnemyAttackComponent_OnLightsaberClash_Params params;
	params.Saber1 = Saber1;
	params.Saber2 = Saber2;
	params.RewindTime = RewindTime;
	params.Clash = Clash;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCEnemyAttackComponent.OnBlocked
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// float                          AdjustPosition                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FSaberClashData         Clash                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCEnemyAttackComponent::OnBlocked(float AdjustPosition, const struct FSaberClashData& Clash)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCEnemyAttackComponent.OnBlocked");

	URPOCEnemyAttackComponent_OnBlocked_Params params;
	params.AdjustPosition = AdjustPosition;
	params.Clash = Clash;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCEnemyAttackComponent.ForceOutAttack
// (Final, Native, Public, BlueprintCallable)

void URPOCEnemyAttackComponent::ForceOutAttack()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCEnemyAttackComponent.ForceOutAttack");

	URPOCEnemyAttackComponent_ForceOutAttack_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCEnemyAttackComponent.EndClashAndContinueAttack
// (Final, Native, Public)

void URPOCEnemyAttackComponent::EndClashAndContinueAttack()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCEnemyAttackComponent.EndClashAndContinueAttack");

	URPOCEnemyAttackComponent_EndClashAndContinueAttack_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCEnemyAttackComponent.ComboMoveBlocked
// (Final, Native, Public)

void URPOCEnemyAttackComponent::ComboMoveBlocked()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCEnemyAttackComponent.ComboMoveBlocked");

	URPOCEnemyAttackComponent_ComboMoveBlocked_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCEnemyAttackComponent.ComboCompleted
// (Final, Native, Public)
// Parameters:
// ECombat_ComboAttackResult      AttackResult                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumBlocks                      (Parm, ZeroConstructor, IsPlainOldData)

void URPOCEnemyAttackComponent::ComboCompleted(ECombat_ComboAttackResult AttackResult, int NumBlocks)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCEnemyAttackComponent.ComboCompleted");

	URPOCEnemyAttackComponent_ComboCompleted_Params params;
	params.AttackResult = AttackResult;
	params.NumBlocks = NumBlocks;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCEnemyAttackComponent.AttackHitsPlayer
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// bool                           ShouldDoDamage                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void URPOCEnemyAttackComponent::AttackHitsPlayer(bool* ShouldDoDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCEnemyAttackComponent.AttackHitsPlayer");

	URPOCEnemyAttackComponent_AttackHitsPlayer_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ShouldDoDamage != nullptr)
		*ShouldDoDamage = params.ShouldDoDamage;
}


// Function WKND.RPOCEnemyAttackComponent.Attack
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class URPOCEnemyComboData*     NewCombo                       (Parm, ZeroConstructor, IsPlainOldData)
// class AWKNDPlayerPawn*         Opponent                       (Parm, ZeroConstructor, IsPlainOldData)
// ECombatStage_Taunt             Taunt                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            FirstStrikeIndex               (Parm, ZeroConstructor, IsPlainOldData)

void URPOCEnemyAttackComponent::Attack(class URPOCEnemyComboData* NewCombo, class AWKNDPlayerPawn* Opponent, ECombatStage_Taunt Taunt, int FirstStrikeIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCEnemyAttackComponent.Attack");

	URPOCEnemyAttackComponent_Attack_Params params;
	params.NewCombo = NewCombo;
	params.Opponent = Opponent;
	params.Taunt = Taunt;
	params.FirstStrikeIndex = FirstStrikeIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCEquippedWeapon.ReceiveOnRepositionWeapon
// (Event, Public, BlueprintEvent)

void ARPOCEquippedWeapon::ReceiveOnRepositionWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCEquippedWeapon.ReceiveOnRepositionWeapon");

	ARPOCEquippedWeapon_ReceiveOnRepositionWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCEquippedWeapon.ReceiveOnReleased
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                  PreviousInstigator             (Parm, ZeroConstructor, IsPlainOldData)

void ARPOCEquippedWeapon::ReceiveOnReleased(class AActor* PreviousInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCEquippedWeapon.ReceiveOnReleased");

	ARPOCEquippedWeapon_ReceiveOnReleased_Params params;
	params.PreviousInstigator = PreviousInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCEquippedWeapon.ReceiveOnPickedUp
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                  CurrentInstigator              (Parm, ZeroConstructor, IsPlainOldData)

void ARPOCEquippedWeapon::ReceiveOnPickedUp(class AActor* CurrentInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCEquippedWeapon.ReceiveOnPickedUp");

	ARPOCEquippedWeapon_ReceiveOnPickedUp_Params params;
	params.CurrentInstigator = CurrentInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCEquippedWeapon.ReceiveOnNotHeldInBothHands
// (Event, Public, BlueprintEvent)

void ARPOCEquippedWeapon::ReceiveOnNotHeldInBothHands()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCEquippedWeapon.ReceiveOnNotHeldInBothHands");

	ARPOCEquippedWeapon_ReceiveOnNotHeldInBothHands_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCEquippedWeapon.ReceiveOnMeleeMunitionHit
// (Event, Public, BlueprintEvent)

void ARPOCEquippedWeapon::ReceiveOnMeleeMunitionHit()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCEquippedWeapon.ReceiveOnMeleeMunitionHit");

	ARPOCEquippedWeapon_ReceiveOnMeleeMunitionHit_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCEquippedWeapon.ReceiveOnHeldInBothHands
// (Event, Public, BlueprintEvent)

void ARPOCEquippedWeapon::ReceiveOnHeldInBothHands()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCEquippedWeapon.ReceiveOnHeldInBothHands");

	ARPOCEquippedWeapon_ReceiveOnHeldInBothHands_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCEquippedWeapon.GetParentMotionController
// (Native, Public, Const)
// Parameters:
// class UMotionControllerComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UMotionControllerComponent* ARPOCEquippedWeapon::GetParentMotionController()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCEquippedWeapon.GetParentMotionController");

	ARPOCEquippedWeapon_GetParentMotionController_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCForceThrowComponent.ThrowRandomActor
// (Final, Native, Public, BlueprintCallable)

void URPOCForceThrowComponent::ThrowRandomActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCForceThrowComponent.ThrowRandomActor");

	URPOCForceThrowComponent_ThrowRandomActor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCForceThrowComponent.HandleItemThrown
// (Final, Native, Public)
// Parameters:
// class ASliceableActor*         ThrownActor                    (Parm, ZeroConstructor, IsPlainOldData)

void URPOCForceThrowComponent::HandleItemThrown(class ASliceableActor* ThrownActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCForceThrowComponent.HandleItemThrown");

	URPOCForceThrowComponent_HandleItemThrown_Params params;
	params.ThrownActor = ThrownActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCGestureDetector.StartGesture
// (Final, Native, Public, BlueprintCallable)

void URPOCGestureDetector::StartGesture()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCGestureDetector.StartGesture");

	URPOCGestureDetector_StartGesture_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCGestureDetector.IsDetectingGestures
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCGestureDetector::IsDetectingGestures()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCGestureDetector.IsDetectingGestures");

	URPOCGestureDetector_IsDetectingGestures_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCGestureDetector.GetDetectedGesture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FRiceDetectedGesture    ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRiceDetectedGesture URPOCGestureDetector::GetDetectedGesture()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCGestureDetector.GetDetectedGesture");

	URPOCGestureDetector_GetDetectedGesture_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCGestureDetector.EndGesture
// (Final, Native, Public, BlueprintCallable)

void URPOCGestureDetector::EndGesture()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCGestureDetector.EndGesture");

	URPOCGestureDetector_EndGesture_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCGestureDetector.ClearGesture
// (Final, Native, Public, BlueprintCallable)

void URPOCGestureDetector::ClearGesture()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCGestureDetector.ClearGesture");

	URPOCGestureDetector_ClearGesture_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCGestureRecorderComponent.StartRecording
// (Final, Native, Public, BlueprintCallable)

void URPOCGestureRecorderComponent::StartRecording()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCGestureRecorderComponent.StartRecording");

	URPOCGestureRecorderComponent_StartRecording_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCGestureRecorderComponent.EndRecording
// (Final, Native, Public, BlueprintCallable)

void URPOCGestureRecorderComponent::EndRecording()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCGestureRecorderComponent.EndRecording");

	URPOCGestureRecorderComponent_EndRecording_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCGestureRecorderComponent.CancelRecording
// (Final, Native, Public, BlueprintCallable)

void URPOCGestureRecorderComponent::CancelRecording()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCGestureRecorderComponent.CancelRecording");

	URPOCGestureRecorderComponent_CancelRecording_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCGestureReplayerComponent.StopReplaying
// (Final, Native, Public, BlueprintCallable)

void URPOCGestureReplayerComponent::StopReplaying()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCGestureReplayerComponent.StopReplaying");

	URPOCGestureReplayerComponent_StopReplaying_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCGestureReplayerComponent.StartReplaying
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           Loop                           (Parm, ZeroConstructor, IsPlainOldData)

void URPOCGestureReplayerComponent::StartReplaying(bool Loop)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCGestureReplayerComponent.StartReplaying");

	URPOCGestureReplayerComponent_StartReplaying_Params params;
	params.Loop = Loop;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCHandEnvironmentInteractionComponent.ToggleUseHandRepositioning
// (Final, Native, Public, BlueprintCallable)

void URPOCHandEnvironmentInteractionComponent::ToggleUseHandRepositioning()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCHandEnvironmentInteractionComponent.ToggleUseHandRepositioning");

	URPOCHandEnvironmentInteractionComponent_ToggleUseHandRepositioning_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCHandEnvironmentInteractionComponent.TeleportEnd
// (Final, Native, Public, BlueprintCallable)

void URPOCHandEnvironmentInteractionComponent::TeleportEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCHandEnvironmentInteractionComponent.TeleportEnd");

	URPOCHandEnvironmentInteractionComponent_TeleportEnd_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCHandEnvironmentInteractionComponent.TeleportBegin
// (Final, Native, Public, BlueprintCallable)

void URPOCHandEnvironmentInteractionComponent::TeleportBegin()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCHandEnvironmentInteractionComponent.TeleportBegin");

	URPOCHandEnvironmentInteractionComponent_TeleportBegin_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCHandEnvironmentInteractionComponent.SnapEnd
// (Final, Native, Public, BlueprintCallable)

void URPOCHandEnvironmentInteractionComponent::SnapEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCHandEnvironmentInteractionComponent.SnapEnd");

	URPOCHandEnvironmentInteractionComponent_SnapEnd_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCHandEnvironmentInteractionComponent.SnapBegin
// (Final, Native, Public, BlueprintCallable)

void URPOCHandEnvironmentInteractionComponent::SnapBegin()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCHandEnvironmentInteractionComponent.SnapBegin");

	URPOCHandEnvironmentInteractionComponent_SnapBegin_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCHandEnvironmentInteractionComponent.SetHeldActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)

void URPOCHandEnvironmentInteractionComponent::SetHeldActor(class AActor* Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCHandEnvironmentInteractionComponent.SetHeldActor");

	URPOCHandEnvironmentInteractionComponent_SetHeldActor_Params params;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCHandEnvironmentInteractionComponent.SetHand
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EControllerHand                NewHand                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   InHandSocketName               (Parm, ZeroConstructor, IsPlainOldData)

void URPOCHandEnvironmentInteractionComponent::SetHand(EControllerHand NewHand, const struct FName& InHandSocketName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCHandEnvironmentInteractionComponent.SetHand");

	URPOCHandEnvironmentInteractionComponent_SetHand_Params params;
	params.NewHand = NewHand;
	params.InHandSocketName = InHandSocketName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCHandEnvironmentInteractionComponent.SetEnvironmentInteractionMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHandEnvironmentInteractionMode InteractionMode                (Parm, ZeroConstructor, IsPlainOldData)

void URPOCHandEnvironmentInteractionComponent::SetEnvironmentInteractionMode(EHandEnvironmentInteractionMode InteractionMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCHandEnvironmentInteractionComponent.SetEnvironmentInteractionMode");

	URPOCHandEnvironmentInteractionComponent_SetEnvironmentInteractionMode_Params params;
	params.InteractionMode = InteractionMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCHandEnvironmentInteractionComponent.OnHeldObjectHit
// (Final, Native, Private, HasOutParms, HasDefaults)
// Parameters:
// class UPrimitiveComponent*     HitComp                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 NormalImpulse                  (Parm, IsPlainOldData)
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void URPOCHandEnvironmentInteractionComponent::OnHeldObjectHit(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCHandEnvironmentInteractionComponent.OnHeldObjectHit");

	URPOCHandEnvironmentInteractionComponent_OnHeldObjectHit_Params params;
	params.HitComp = HitComp;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.NormalImpulse = NormalImpulse;
	params.Hit = Hit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCHandEnvironmentInteractionComponent.IgnoreCollisionInRadiusUntilMoved
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)

void URPOCHandEnvironmentInteractionComponent::IgnoreCollisionInRadiusUntilMoved(float Radius)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCHandEnvironmentInteractionComponent.IgnoreCollisionInRadiusUntilMoved");

	URPOCHandEnvironmentInteractionComponent_IgnoreCollisionInRadiusUntilMoved_Params params;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCHandEnvironmentInteractionComponent.IgnoreActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ignore                         (Parm, ZeroConstructor, IsPlainOldData)

void URPOCHandEnvironmentInteractionComponent::IgnoreActor(class AActor* Actor, bool ignore)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCHandEnvironmentInteractionComponent.IgnoreActor");

	URPOCHandEnvironmentInteractionComponent_IgnoreActor_Params params;
	params.Actor = Actor;
	params.ignore = ignore;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCHandEnvironmentInteractionComponent.GetHeldActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* URPOCHandEnvironmentInteractionComponent::GetHeldActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCHandEnvironmentInteractionComponent.GetHeldActor");

	URPOCHandEnvironmentInteractionComponent_GetHeldActor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCHandEnvironmentInteractionComponent.GetHapticHand
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ENTHapticHands                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ENTHapticHands URPOCHandEnvironmentInteractionComponent::GetHapticHand()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCHandEnvironmentInteractionComponent.GetHapticHand");

	URPOCHandEnvironmentInteractionComponent_GetHapticHand_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCHandEnvironmentInteractionComponent.GetHandTransform
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 Location                       (Parm, OutParm, IsPlainOldData)
// struct FRotator                Rotation                       (Parm, OutParm, IsPlainOldData)

void URPOCHandEnvironmentInteractionComponent::GetHandTransform(struct FVector* Location, struct FRotator* Rotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCHandEnvironmentInteractionComponent.GetHandTransform");

	URPOCHandEnvironmentInteractionComponent_GetHandTransform_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Location != nullptr)
		*Location = params.Location;
	if (Rotation != nullptr)
		*Rotation = params.Rotation;
}


// Function WKND.RPOCHandEnvironmentInteractionComponent.GetHandAwarenessAnimationScrubbing
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float URPOCHandEnvironmentInteractionComponent::GetHandAwarenessAnimationScrubbing()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCHandEnvironmentInteractionComponent.GetHandAwarenessAnimationScrubbing");

	URPOCHandEnvironmentInteractionComponent_GetHandAwarenessAnimationScrubbing_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCHandEnvironmentInteractionComponent.GetEnvironmentInteractionMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EHandEnvironmentInteractionMode ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EHandEnvironmentInteractionMode URPOCHandEnvironmentInteractionComponent::GetEnvironmentInteractionMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCHandEnvironmentInteractionComponent.GetEnvironmentInteractionMode");

	URPOCHandEnvironmentInteractionComponent_GetEnvironmentInteractionMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCIntersectRepelantComponent.TraceHandPosition
// (Final, Native, Public, BlueprintCallable)

void URPOCIntersectRepelantComponent::TraceHandPosition()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCIntersectRepelantComponent.TraceHandPosition");

	URPOCIntersectRepelantComponent_TraceHandPosition_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCKeyMapManagerComponent.Load
// (Native, Public, BlueprintCallable)

void URPOCKeyMapManagerComponent::Load()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCKeyMapManagerComponent.Load");

	URPOCKeyMapManagerComponent_Load_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupWeapon.RepositionObject
// (Native, Protected)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ARPOCPickupWeapon::RepositionObject(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupWeapon.RepositionObject");

	ARPOCPickupWeapon_RepositionObject_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickupWeapon.ReceiveOnRepositionWeapon
// (Event, Public, BlueprintEvent)

void ARPOCPickupWeapon::ReceiveOnRepositionWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupWeapon.ReceiveOnRepositionWeapon");

	ARPOCPickupWeapon_ReceiveOnRepositionWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupWeapon.ReceiveOnParry
// (Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// class AActor*                  HitActor                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ImpactPoint                    (Parm, IsPlainOldData)
// class UPrimitiveComponent*     HitComponent                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void ARPOCPickupWeapon::ReceiveOnParry(class AActor* HitActor, const struct FVector& ImpactPoint, class UPrimitiveComponent* HitComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupWeapon.ReceiveOnParry");

	ARPOCPickupWeapon_ReceiveOnParry_Params params;
	params.HitActor = HitActor;
	params.ImpactPoint = ImpactPoint;
	params.HitComponent = HitComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupWeapon.ReceiveOnMeleeMunitionHit
// (Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// class AActor*                  HitActor                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ImpactPoint                    (Parm, IsPlainOldData)
// class UPrimitiveComponent*     HitComponent                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void ARPOCPickupWeapon::ReceiveOnMeleeMunitionHit(class AActor* HitActor, const struct FVector& ImpactPoint, class UPrimitiveComponent* HitComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupWeapon.ReceiveOnMeleeMunitionHit");

	ARPOCPickupWeapon_ReceiveOnMeleeMunitionHit_Params params;
	params.HitActor = HitActor;
	params.ImpactPoint = ImpactPoint;
	params.HitComponent = HitComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupWeapon.ReceiveOnDecapitation
// (Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// class AActor*                  HitActor                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ImpactPoint                    (Parm, IsPlainOldData)

void ARPOCPickupWeapon::ReceiveOnDecapitation(class AActor* HitActor, const struct FVector& ImpactPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupWeapon.ReceiveOnDecapitation");

	ARPOCPickupWeapon_ReceiveOnDecapitation_Params params;
	params.HitActor = HitActor;
	params.ImpactPoint = ImpactPoint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupWeapon.OnNonPlayerPickUp
// (Native, Public, BlueprintCallable)

void ARPOCPickupWeapon::OnNonPlayerPickUp()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupWeapon.OnNonPlayerPickUp");

	ARPOCPickupWeapon_OnNonPlayerPickUp_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupWeapon.OnNonPlayerDrop
// (Native, Public, BlueprintCallable)

void ARPOCPickupWeapon::OnNonPlayerDrop()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupWeapon.OnNonPlayerDrop");

	ARPOCPickupWeapon_OnNonPlayerDrop_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupWeapon.OnHit
// (Native, Public, HasOutParms, HasDefaults)
// Parameters:
// class AActor*                  SelfActor                      (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 NormalImpulse                  (Parm, IsPlainOldData)
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void ARPOCPickupWeapon::OnHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupWeapon.OnHit");

	ARPOCPickupWeapon_OnHit_Params params;
	params.SelfActor = SelfActor;
	params.OtherActor = OtherActor;
	params.NormalImpulse = NormalImpulse;
	params.Hit = Hit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupWeapon.OnBeginOverlap
// (Native, Public)
// Parameters:
// class AActor*                  OverlappedActor                (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)

void ARPOCPickupWeapon::OnBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupWeapon.OnBeginOverlap");

	ARPOCPickupWeapon_OnBeginOverlap_Params params;
	params.OverlappedActor = OverlappedActor;
	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupWeapon.IsPendingDelayedKill
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ARPOCPickupWeapon::IsPendingDelayedKill()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupWeapon.IsPendingDelayedKill");

	ARPOCPickupWeapon_IsPendingDelayedKill_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickupWeapon.GetParentMotionController
// (Native, Public, Const)
// Parameters:
// class UMotionControllerComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UMotionControllerComponent* ARPOCPickupWeapon::GetParentMotionController()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupWeapon.GetParentMotionController");

	ARPOCPickupWeapon_GetParentMotionController_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickupWeapon.GetBladeLocations
// (Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 GuardLocation                  (Parm, OutParm, IsPlainOldData)
// struct FVector                 TipLocation                    (Parm, OutParm, IsPlainOldData)

void ARPOCPickupWeapon::GetBladeLocations(struct FVector* GuardLocation, struct FVector* TipLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupWeapon.GetBladeLocations");

	ARPOCPickupWeapon_GetBladeLocations_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (GuardLocation != nullptr)
		*GuardLocation = params.GuardLocation;
	if (TipLocation != nullptr)
		*TipLocation = params.TipLocation;
}


// Function WKND.RPOCPickupWeapon.DespawnOnAttachParentDeath
// (Final, Native, Public, BlueprintCallable)

void ARPOCPickupWeapon::DespawnOnAttachParentDeath()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupWeapon.DespawnOnAttachParentDeath");

	ARPOCPickupWeapon_DespawnOnAttachParentDeath_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupWeapon.Deactivate
// (Native, Public, BlueprintCallable)

void ARPOCPickupWeapon::Deactivate()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupWeapon.Deactivate");

	ARPOCPickupWeapon_Deactivate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupWeapon.Activate
// (Native, Public, BlueprintCallable)

void ARPOCPickupWeapon::Activate()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupWeapon.Activate");

	ARPOCPickupWeapon_Activate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickup_Lightsaber.UpdateSaberDragProperties
// (Final, Native, Public)

void ARPOCPickup_Lightsaber::UpdateSaberDragProperties()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.UpdateSaberDragProperties");

	ARPOCPickup_Lightsaber_UpdateSaberDragProperties_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickup_Lightsaber.TurnOffLightsaber
// (Final, Native, Public, BlueprintCallable)

void ARPOCPickup_Lightsaber::TurnOffLightsaber()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.TurnOffLightsaber");

	ARPOCPickup_Lightsaber_TurnOffLightsaber_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickup_Lightsaber.RequestSaberState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ESaberGameState                GameState                      (Parm, ZeroConstructor, IsPlainOldData)

void ARPOCPickup_Lightsaber::RequestSaberState(ESaberGameState GameState)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.RequestSaberState");

	ARPOCPickup_Lightsaber_RequestSaberState_Params params;
	params.GameState = GameState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickup_Lightsaber.RenderDebugInfo
// (Final, Native, Private)

void ARPOCPickup_Lightsaber::RenderDebugInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.RenderDebugInfo");

	ARPOCPickup_Lightsaber_RenderDebugInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickup_Lightsaber.ReceiveOnSaberHit
// (Native, Event, Public, BlueprintEvent)

void ARPOCPickup_Lightsaber::ReceiveOnSaberHit()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.ReceiveOnSaberHit");

	ARPOCPickup_Lightsaber_ReceiveOnSaberHit_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickup_Lightsaber.ReceiveOnRepositionWeapon
// (Event, Public, BlueprintEvent)

void ARPOCPickup_Lightsaber::ReceiveOnRepositionWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.ReceiveOnRepositionWeapon");

	ARPOCPickup_Lightsaber_ReceiveOnRepositionWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickup_Lightsaber.ReceiveOnReleased
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                  PreviousInstigator             (Parm, ZeroConstructor, IsPlainOldData)

void ARPOCPickup_Lightsaber::ReceiveOnReleased(class AActor* PreviousInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.ReceiveOnReleased");

	ARPOCPickup_Lightsaber_ReceiveOnReleased_Params params;
	params.PreviousInstigator = PreviousInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickup_Lightsaber.ReceiveOnPickedUp
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                  CurrentInstigator              (Parm, ZeroConstructor, IsPlainOldData)

void ARPOCPickup_Lightsaber::ReceiveOnPickedUp(class AActor* CurrentInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.ReceiveOnPickedUp");

	ARPOCPickup_Lightsaber_ReceiveOnPickedUp_Params params;
	params.CurrentInstigator = CurrentInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickup_Lightsaber.ReceiveOnParry
// (Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// class AActor*                  HitActor                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ImpactPoint                    (Parm, IsPlainOldData)
// class UPrimitiveComponent*     HitComponent                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void ARPOCPickup_Lightsaber::ReceiveOnParry(class AActor* HitActor, const struct FVector& ImpactPoint, class UPrimitiveComponent* HitComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.ReceiveOnParry");

	ARPOCPickup_Lightsaber_ReceiveOnParry_Params params;
	params.HitActor = HitActor;
	params.ImpactPoint = ImpactPoint;
	params.HitComponent = HitComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickup_Lightsaber.ReceiveOnOverload
// (Event, Public, BlueprintEvent)

void ARPOCPickup_Lightsaber::ReceiveOnOverload()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.ReceiveOnOverload");

	ARPOCPickup_Lightsaber_ReceiveOnOverload_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickup_Lightsaber.ReceiveOnNotHeldInBothHands
// (Event, Public, BlueprintEvent)

void ARPOCPickup_Lightsaber::ReceiveOnNotHeldInBothHands()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.ReceiveOnNotHeldInBothHands");

	ARPOCPickup_Lightsaber_ReceiveOnNotHeldInBothHands_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickup_Lightsaber.ReceiveOnMeleeMunitionHit
// (Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// class AActor*                  HitActor                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ImpactPoint                    (Parm, IsPlainOldData)
// class UPrimitiveComponent*     HitComponent                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void ARPOCPickup_Lightsaber::ReceiveOnMeleeMunitionHit(class AActor* HitActor, const struct FVector& ImpactPoint, class UPrimitiveComponent* HitComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.ReceiveOnMeleeMunitionHit");

	ARPOCPickup_Lightsaber_ReceiveOnMeleeMunitionHit_Params params;
	params.HitActor = HitActor;
	params.ImpactPoint = ImpactPoint;
	params.HitComponent = HitComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickup_Lightsaber.ReceiveOnHeldInBothHands
// (Event, Public, BlueprintEvent)

void ARPOCPickup_Lightsaber::ReceiveOnHeldInBothHands()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.ReceiveOnHeldInBothHands");

	ARPOCPickup_Lightsaber_ReceiveOnHeldInBothHands_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickup_Lightsaber.ReceiveOnFastTurnOff
// (Event, Public, BlueprintEvent)

void ARPOCPickup_Lightsaber::ReceiveOnFastTurnOff()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.ReceiveOnFastTurnOff");

	ARPOCPickup_Lightsaber_ReceiveOnFastTurnOff_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickup_Lightsaber.ReceiveOnDecapitation
// (Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// class AActor*                  HitActor                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ImpactPoint                    (Parm, IsPlainOldData)

void ARPOCPickup_Lightsaber::ReceiveOnDecapitation(class AActor* HitActor, const struct FVector& ImpactPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.ReceiveOnDecapitation");

	ARPOCPickup_Lightsaber_ReceiveOnDecapitation_Params params;
	params.HitActor = HitActor;
	params.ImpactPoint = ImpactPoint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickup_Lightsaber.ReceiveOnAddDirector
// (Event, Public, BlueprintEvent)

void ARPOCPickup_Lightsaber::ReceiveOnAddDirector()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.ReceiveOnAddDirector");

	ARPOCPickup_Lightsaber_ReceiveOnAddDirector_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickup_Lightsaber.ReceiveOnAddCrystal
// (Event, Public, BlueprintEvent)

void ARPOCPickup_Lightsaber::ReceiveOnAddCrystal()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.ReceiveOnAddCrystal");

	ARPOCPickup_Lightsaber_ReceiveOnAddCrystal_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickup_Lightsaber.ReceiveOnAddCrossGuard
// (Event, Public, BlueprintEvent)

void ARPOCPickup_Lightsaber::ReceiveOnAddCrossGuard()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.ReceiveOnAddCrossGuard");

	ARPOCPickup_Lightsaber_ReceiveOnAddCrossGuard_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickup_Lightsaber.ReceivedOnInstallPart
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                  Part                           (Parm, ZeroConstructor, IsPlainOldData)

void ARPOCPickup_Lightsaber::ReceivedOnInstallPart(class AActor* Part)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.ReceivedOnInstallPart");

	ARPOCPickup_Lightsaber_ReceivedOnInstallPart_Params params;
	params.Part = Part;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickup_Lightsaber.PushHapticValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Frequency                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Amplitude                      (Parm, ZeroConstructor, IsPlainOldData)

void ARPOCPickup_Lightsaber::PushHapticValue(float Frequency, float Amplitude)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.PushHapticValue");

	ARPOCPickup_Lightsaber_PushHapticValue_Params params;
	params.Frequency = Frequency;
	params.Amplitude = Amplitude;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickup_Lightsaber.PlayHapticsEffect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UHapticFeedbackEffect_Base* HapticEffect                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          HapticScale                    (Parm, ZeroConstructor, IsPlainOldData)

void ARPOCPickup_Lightsaber::PlayHapticsEffect(class UHapticFeedbackEffect_Base* HapticEffect, float HapticScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.PlayHapticsEffect");

	ARPOCPickup_Lightsaber_PlayHapticsEffect_Params params;
	params.HapticEffect = HapticEffect;
	params.HapticScale = HapticScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickup_Lightsaber.OverloadIfPlayersAndInFOV
// (Final, Native, Public, BlueprintCallable)

void ARPOCPickup_Lightsaber::OverloadIfPlayersAndInFOV()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.OverloadIfPlayersAndInFOV");

	ARPOCPickup_Lightsaber_OverloadIfPlayersAndInFOV_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickup_Lightsaber.Overload
// (Final, Native, Public, BlueprintCallable)

void ARPOCPickup_Lightsaber::Overload()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.Overload");

	ARPOCPickup_Lightsaber_Overload_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickup_Lightsaber.OnHit
// (Native, Public, HasOutParms, HasDefaults)
// Parameters:
// class AActor*                  SelfActor                      (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 NormalImpulse                  (Parm, IsPlainOldData)
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void ARPOCPickup_Lightsaber::OnHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.OnHit");

	ARPOCPickup_Lightsaber_OnHit_Params params;
	params.SelfActor = SelfActor;
	params.OtherActor = OtherActor;
	params.NormalImpulse = NormalImpulse;
	params.Hit = Hit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickup_Lightsaber.OnBeginOverlap
// (Native, Public)
// Parameters:
// class AActor*                  OverlappedActor                (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)

void ARPOCPickup_Lightsaber::OnBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.OnBeginOverlap");

	ARPOCPickup_Lightsaber_OnBeginOverlap_Params params;
	params.OverlappedActor = OverlappedActor;
	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickup_Lightsaber.NotifyBladeOn
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           On                             (Parm, ZeroConstructor, IsPlainOldData)

void ARPOCPickup_Lightsaber::NotifyBladeOn(bool On)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.NotifyBladeOn");

	ARPOCPickup_Lightsaber_NotifyBladeOn_Params params;
	params.On = On;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickup_Lightsaber.IsPendingDelayedKill
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ARPOCPickup_Lightsaber::IsPendingDelayedKill()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.IsPendingDelayedKill");

	ARPOCPickup_Lightsaber_IsPendingDelayedKill_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickup_Lightsaber.IsHiltClash
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ARPOCPickup_Lightsaber::IsHiltClash()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.IsHiltClash");

	ARPOCPickup_Lightsaber_IsHiltClash_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickup_Lightsaber.IsClashingEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ARPOCPickup_Lightsaber::IsClashingEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.IsClashingEnabled");

	ARPOCPickup_Lightsaber_IsClashingEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickup_Lightsaber.IsClashing
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           IncludeHiltClashes             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ARPOCPickup_Lightsaber::IsClashing(bool IncludeHiltClashes)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.IsClashing");

	ARPOCPickup_Lightsaber_IsClashing_Params params;
	params.IncludeHiltClashes = IncludeHiltClashes;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickup_Lightsaber.IsBladeLive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ARPOCPickup_Lightsaber::IsBladeLive()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.IsBladeLive");

	ARPOCPickup_Lightsaber_IsBladeLive_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickup_Lightsaber.IsAttacking
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ARPOCPickup_Lightsaber::IsAttacking()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.IsAttacking");

	ARPOCPickup_Lightsaber_IsAttacking_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickup_Lightsaber.GetScaledBladeLength
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ARPOCPickup_Lightsaber::GetScaledBladeLength()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.GetScaledBladeLength");

	ARPOCPickup_Lightsaber_GetScaledBladeLength_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickup_Lightsaber.GetSaberId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int ARPOCPickup_Lightsaber::GetSaberId()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.GetSaberId");

	ARPOCPickup_Lightsaber_GetSaberId_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickup_Lightsaber.GetIsWeaponActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ARPOCPickup_Lightsaber::GetIsWeaponActive()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.GetIsWeaponActive");

	ARPOCPickup_Lightsaber_GetIsWeaponActive_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickup_Lightsaber.GetBladeUpVector
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector ARPOCPickup_Lightsaber::GetBladeUpVector()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.GetBladeUpVector");

	ARPOCPickup_Lightsaber_GetBladeUpVector_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickup_Lightsaber.GetBladeTransforms
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform              GuardTransform                 (Parm, OutParm, IsPlainOldData)
// struct FTransform              PommelTransform                (Parm, OutParm, IsPlainOldData)

void ARPOCPickup_Lightsaber::GetBladeTransforms(struct FTransform* GuardTransform, struct FTransform* PommelTransform)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.GetBladeTransforms");

	ARPOCPickup_Lightsaber_GetBladeTransforms_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (GuardTransform != nullptr)
		*GuardTransform = params.GuardTransform;
	if (PommelTransform != nullptr)
		*PommelTransform = params.PommelTransform;
}


// Function WKND.RPOCPickup_Lightsaber.GetBladeState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELightsaberState               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ELightsaberState ARPOCPickup_Lightsaber::GetBladeState()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.GetBladeState");

	ARPOCPickup_Lightsaber_GetBladeState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickup_Lightsaber.GetBladeSpeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ARPOCPickup_Lightsaber::GetBladeSpeed()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.GetBladeSpeed");

	ARPOCPickup_Lightsaber_GetBladeSpeed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickup_Lightsaber.GetBladeRadius
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ARPOCPickup_Lightsaber::GetBladeRadius()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.GetBladeRadius");

	ARPOCPickup_Lightsaber_GetBladeRadius_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickup_Lightsaber.GetBladeLocations
// (Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 GuardLocation                  (Parm, OutParm, IsPlainOldData)
// struct FVector                 TipLocation                    (Parm, OutParm, IsPlainOldData)

void ARPOCPickup_Lightsaber::GetBladeLocations(struct FVector* GuardLocation, struct FVector* TipLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.GetBladeLocations");

	ARPOCPickup_Lightsaber_GetBladeLocations_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (GuardLocation != nullptr)
		*GuardLocation = params.GuardLocation;
	if (TipLocation != nullptr)
		*TipLocation = params.TipLocation;
}


// Function WKND.RPOCPickup_Lightsaber.FastTurnOff
// (Final, Native, Public, BlueprintCallable)

void ARPOCPickup_Lightsaber::FastTurnOff()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.FastTurnOff");

	ARPOCPickup_Lightsaber_FastTurnOff_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickup_Lightsaber.EnableClashAndAttackDebugModeForTestLevelsOnly
// (Final, Native, Public, BlueprintCallable)

void ARPOCPickup_Lightsaber::EnableClashAndAttackDebugModeForTestLevelsOnly()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.EnableClashAndAttackDebugModeForTestLevelsOnly");

	ARPOCPickup_Lightsaber_EnableClashAndAttackDebugModeForTestLevelsOnly_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickup_Lightsaber.DespawnOnAttachParentDeath
// (Final, Native, Public, BlueprintCallable)

void ARPOCPickup_Lightsaber::DespawnOnAttachParentDeath()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.DespawnOnAttachParentDeath");

	ARPOCPickup_Lightsaber_DespawnOnAttachParentDeath_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickup_Lightsaber.DelayedDestroy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Delay                          (Parm, ZeroConstructor, IsPlainOldData)

void ARPOCPickup_Lightsaber::DelayedDestroy(float Delay)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.DelayedDestroy");

	ARPOCPickup_Lightsaber_DelayedDestroy_Params params;
	params.Delay = Delay;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickup_Lightsaber.CheckBladeState
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ELightsaberState               bladeState                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ARPOCPickup_Lightsaber::CheckBladeState(ELightsaberState bladeState)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.CheckBladeState");

	ARPOCPickup_Lightsaber_CheckBladeState_Params params;
	params.bladeState = bladeState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickup_Lightsaber.CancelDelayedDestroy
// (Final, Native, Public, BlueprintCallable)

void ARPOCPickup_Lightsaber::CancelDelayedDestroy()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickup_Lightsaber.CancelDelayedDestroy");

	ARPOCPickup_Lightsaber_CancelDelayedDestroy_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor_Phys.UpdateHighlight
// (Final, Native, Public)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)

void ARPOCPickupActor_Phys::UpdateHighlight(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Phys.UpdateHighlight");

	ARPOCPickupActor_Phys_UpdateHighlight_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor_Phys.RepositionObject
// (Native, Protected)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ARPOCPickupActor_Phys::RepositionObject(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Phys.RepositionObject");

	ARPOCPickupActor_Phys_RepositionObject_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickupActor_Phys.Release
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bDetach                        (Parm, ZeroConstructor, IsPlainOldData)

void ARPOCPickupActor_Phys::Release(bool bDetach)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Phys.Release");

	ARPOCPickupActor_Phys_Release_Params params;
	params.bDetach = bDetach;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor_Phys.ReceiveOnReleased
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                  PreviousInstigator             (Parm, ZeroConstructor, IsPlainOldData)

void ARPOCPickupActor_Phys::ReceiveOnReleased(class AActor* PreviousInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Phys.ReceiveOnReleased");

	ARPOCPickupActor_Phys_ReceiveOnReleased_Params params;
	params.PreviousInstigator = PreviousInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor_Phys.ReceiveOnPickedUp
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                  CurrentInstigator              (Parm, ZeroConstructor, IsPlainOldData)

void ARPOCPickupActor_Phys::ReceiveOnPickedUp(class AActor* CurrentInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Phys.ReceiveOnPickedUp");

	ARPOCPickupActor_Phys_ReceiveOnPickedUp_Params params;
	params.CurrentInstigator = CurrentInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor_Phys.ReceiveOnInHand
// (Event, Public, BlueprintEvent)

void ARPOCPickupActor_Phys::ReceiveOnInHand()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Phys.ReceiveOnInHand");

	ARPOCPickupActor_Phys_ReceiveOnInHand_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor_Phys.ReceiveOnBeginRangedGrab
// (Event, Public, BlueprintEvent)

void ARPOCPickupActor_Phys::ReceiveOnBeginRangedGrab()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Phys.ReceiveOnBeginRangedGrab");

	ARPOCPickupActor_Phys_ReceiveOnBeginRangedGrab_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor_Phys.OnNonPlayerPickUp
// (Native, Public, BlueprintCallable)

void ARPOCPickupActor_Phys::OnNonPlayerPickUp()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Phys.OnNonPlayerPickUp");

	ARPOCPickupActor_Phys_OnNonPlayerPickUp_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor_Phys.OnNonPlayerDrop
// (Native, Public, BlueprintCallable)

void ARPOCPickupActor_Phys::OnNonPlayerDrop()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Phys.OnNonPlayerDrop");

	ARPOCPickupActor_Phys_OnNonPlayerDrop_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor_Phys.InitReposition
// (Native, Protected, HasDefaults)
// Parameters:
// struct FTransform              HandTransform                  (Parm, IsPlainOldData)
// float                          RepositionTime                 (Parm, ZeroConstructor, IsPlainOldData)

void ARPOCPickupActor_Phys::InitReposition(const struct FTransform& HandTransform, float RepositionTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Phys.InitReposition");

	ARPOCPickupActor_Phys_InitReposition_Params params;
	params.HandTransform = HandTransform;
	params.RepositionTime = RepositionTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor_Phys.GetRegressedVelocity
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector ARPOCPickupActor_Phys::GetRegressedVelocity()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Phys.GetRegressedVelocity");

	ARPOCPickupActor_Phys_GetRegressedVelocity_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickupActor_Phys.GetRegressedAngularVelocity
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector ARPOCPickupActor_Phys::GetRegressedAngularVelocity()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Phys.GetRegressedAngularVelocity");

	ARPOCPickupActor_Phys_GetRegressedAngularVelocity_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickupActor_Phys.GetPrimaryHand
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ENTHapticHands                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ENTHapticHands ARPOCPickupActor_Phys::GetPrimaryHand()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Phys.GetPrimaryHand");

	ARPOCPickupActor_Phys_GetPrimaryHand_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickupActor_Phys.GetOffHand
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ENTHapticHands                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ENTHapticHands ARPOCPickupActor_Phys::GetOffHand()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Phys.GetOffHand");

	ARPOCPickupActor_Phys_GetOffHand_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickupActor_Phys.GetIsIdling
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ARPOCPickupActor_Phys::GetIsIdling()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Phys.GetIsIdling");

	ARPOCPickupActor_Phys_GetIsIdling_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickupActor_Phys.GetIdleTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          ReturnValue                    (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ARPOCPickupActor_Phys::GetIdleTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Phys.GetIdleTime");

	ARPOCPickupActor_Phys_GetIdleTime_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickupActor_Phys.EnablePhysicsSimulation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           flag                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ARPOCPickupActor_Phys::EnablePhysicsSimulation(bool flag)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Phys.EnablePhysicsSimulation");

	ARPOCPickupActor_Phys_EnablePhysicsSimulation_Params params;
	params.flag = flag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickupActor_Phys.DelayedDestroy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Delay                          (Parm, ZeroConstructor, IsPlainOldData)

void ARPOCPickupActor_Phys::DelayedDestroy(float Delay)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Phys.DelayedDestroy");

	ARPOCPickupActor_Phys_DelayedDestroy_Params params;
	params.Delay = Delay;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor_Phys.Deactivate
// (Native, Public, BlueprintCallable)

void ARPOCPickupActor_Phys::Deactivate()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Phys.Deactivate");

	ARPOCPickupActor_Phys_Deactivate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor_Phys.CancelDelayedDestroy
// (Final, Native, Public, BlueprintCallable)

void ARPOCPickupActor_Phys::CancelDelayedDestroy()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Phys.CancelDelayedDestroy");

	ARPOCPickupActor_Phys_CancelDelayedDestroy_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor_Phys.ApplyImpulseOnRelease
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ARPOCPickupActor_Phys::ApplyImpulseOnRelease()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Phys.ApplyImpulseOnRelease");

	ARPOCPickupActor_Phys_ApplyImpulseOnRelease_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickupActor_Phys.Activate
// (Native, Public, BlueprintCallable)

void ARPOCPickupActor_Phys::Activate()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Phys.Activate");

	ARPOCPickupActor_Phys_Activate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableActor.UpdateThrow
// (Final, Native, Protected)

void ASliceableActor::UpdateThrow()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableActor.UpdateThrow");

	ASliceableActor_UpdateThrow_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableActor.Throw
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 TargetLocation                 (Parm, IsPlainOldData)
// float                          ThrustStrength                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ASliceableActor::Throw(const struct FVector& TargetLocation, float ThrustStrength)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableActor.Throw");

	ASliceableActor_Throw_Params params;
	params.TargetLocation = TargetLocation;
	params.ThrustStrength = ThrustStrength;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.SliceableActor.StopThrow
// (Final, Native, Public, BlueprintCallable)

void ASliceableActor::StopThrow()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableActor.StopThrow");

	ASliceableActor_StopThrow_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableActor.SpawnBursts
// (Final, Native, Protected)
// Parameters:
// class USliceableMeshComponent* Mesh                           (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// TArray<struct FVector>         CutPoints                      (Parm, ZeroConstructor)
// class UParticleSystem*         SliceBurstPFX                  (Parm, ZeroConstructor, IsPlainOldData)

void ASliceableActor::SpawnBursts(class USliceableMeshComponent* Mesh, TArray<struct FVector> CutPoints, class UParticleSystem* SliceBurstPFX)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableActor.SpawnBursts");

	ASliceableActor_SpawnBursts_Params params;
	params.Mesh = Mesh;
	params.CutPoints = CutPoints;
	params.SliceBurstPFX = SliceBurstPFX;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableActor.ReceiveOnValidCut
// (Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// class USliceableMeshComponent* CutComponent                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 LastLocationWS                 (ConstParm, Parm, IsPlainOldData)

void ASliceableActor::ReceiveOnValidCut(class USliceableMeshComponent* CutComponent, const struct FVector& LastLocationWS)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableActor.ReceiveOnValidCut");

	ASliceableActor_ReceiveOnValidCut_Params params;
	params.CutComponent = CutComponent;
	params.LastLocationWS = LastLocationWS;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableActor.ReceiveOnUpdateCut
// (Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// class AActor*                  CuttingActor                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     CutComponent                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 CutEntryLocation               (Parm, IsPlainOldData)
// struct FVector                 CutEntryNormal                 (Parm, IsPlainOldData)
// struct FVector2D               CollisionUV                    (Parm, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 CutExitLocation                (Parm, IsPlainOldData)

void ASliceableActor::ReceiveOnUpdateCut(class AActor* CuttingActor, class UPrimitiveComponent* CutComponent, const struct FVector& CutEntryLocation, const struct FVector& CutEntryNormal, const struct FVector2D& CollisionUV, const struct FName& BoneName, const struct FVector& CutExitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableActor.ReceiveOnUpdateCut");

	ASliceableActor_ReceiveOnUpdateCut_Params params;
	params.CuttingActor = CuttingActor;
	params.CutComponent = CutComponent;
	params.CutEntryLocation = CutEntryLocation;
	params.CutEntryNormal = CutEntryNormal;
	params.CollisionUV = CollisionUV;
	params.BoneName = BoneName;
	params.CutExitLocation = CutExitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableActor.ReceiveOnStartCut
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                  CuttingActor                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     CutComponent                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void ASliceableActor::ReceiveOnStartCut(class AActor* CuttingActor, class UPrimitiveComponent* CutComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableActor.ReceiveOnStartCut");

	ASliceableActor_ReceiveOnStartCut_Params params;
	params.CuttingActor = CuttingActor;
	params.CutComponent = CutComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableActor.ReceiveOnMeshSliced
// (Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                 CentreOfSlice                  (Parm, IsPlainOldData)
// class USliceableMeshComponent* MeshA                          (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class USliceableMeshComponent* MeshB                          (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void ASliceableActor::ReceiveOnMeshSliced(const struct FVector& CentreOfSlice, class USliceableMeshComponent* MeshA, class USliceableMeshComponent* MeshB)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableActor.ReceiveOnMeshSliced");

	ASliceableActor_ReceiveOnMeshSliced_Params params;
	params.CentreOfSlice = CentreOfSlice;
	params.MeshA = MeshA;
	params.MeshB = MeshB;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableActor.ReceiveOnEndCut
// (Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// class AActor*                  CuttingActor                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     CutComponent                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 BladeDirection                 (Parm, IsPlainOldData)

void ASliceableActor::ReceiveOnEndCut(class AActor* CuttingActor, class UPrimitiveComponent* CutComponent, const struct FVector& BladeDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableActor.ReceiveOnEndCut");

	ASliceableActor_ReceiveOnEndCut_Params params;
	params.CuttingActor = CuttingActor;
	params.CutComponent = CutComponent;
	params.BladeDirection = BladeDirection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableActor.PrepForThrow
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ASliceableActor::PrepForThrow()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableActor.PrepForThrow");

	ASliceableActor_PrepForThrow_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.SliceableActor.OnValidCut
// (Final, Native, Public, HasDefaults)
// Parameters:
// class USliceableMeshComponent* CutComponent                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 LastLocationWS                 (ConstParm, Parm, IsPlainOldData)

void ASliceableActor::OnValidCut(class USliceableMeshComponent* CutComponent, const struct FVector& LastLocationWS)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableActor.OnValidCut");

	ASliceableActor_OnValidCut_Params params;
	params.CutComponent = CutComponent;
	params.LastLocationWS = LastLocationWS;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableActor.OnSliceFailed
// (Final, Native, Public)
// Parameters:
// class USliceableMeshComponent* Mesh                           (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void ASliceableActor::OnSliceFailed(class USliceableMeshComponent* Mesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableActor.OnSliceFailed");

	ASliceableActor_OnSliceFailed_Params params;
	params.Mesh = Mesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableActor.OnMeshSliced
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 CentreOfSlice                  (Parm, IsPlainOldData)
// TArray<struct FVector>         CutPoints                      (Parm, ZeroConstructor)
// class UParticleSystem*         SliceBurstPFX                  (Parm, ZeroConstructor, IsPlainOldData)
// class USliceableMeshComponent* MeshA                          (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class USliceableMeshComponent* MeshB                          (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void ASliceableActor::OnMeshSliced(const struct FVector& CentreOfSlice, TArray<struct FVector> CutPoints, class UParticleSystem* SliceBurstPFX, class USliceableMeshComponent* MeshA, class USliceableMeshComponent* MeshB)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableActor.OnMeshSliced");

	ASliceableActor_OnMeshSliced_Params params;
	params.CentreOfSlice = CentreOfSlice;
	params.CutPoints = CutPoints;
	params.SliceBurstPFX = SliceBurstPFX;
	params.MeshA = MeshA;
	params.MeshB = MeshB;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor_Sliceable.UpdateHighlight
// (Final, Native, Public)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)

void ARPOCPickupActor_Sliceable::UpdateHighlight(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Sliceable.UpdateHighlight");

	ARPOCPickupActor_Sliceable_UpdateHighlight_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor_Sliceable.SetSliceableMesh
// (Native, Public, BlueprintCallable)
// Parameters:
// class USliceableMeshComponent* Mesh                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void ARPOCPickupActor_Sliceable::SetSliceableMesh(class USliceableMeshComponent* Mesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Sliceable.SetSliceableMesh");

	ARPOCPickupActor_Sliceable_SetSliceableMesh_Params params;
	params.Mesh = Mesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor_Sliceable.RepositionObject
// (Native, Protected)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ARPOCPickupActor_Sliceable::RepositionObject(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Sliceable.RepositionObject");

	ARPOCPickupActor_Sliceable_RepositionObject_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickupActor_Sliceable.Release
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bDetach                        (Parm, ZeroConstructor, IsPlainOldData)

void ARPOCPickupActor_Sliceable::Release(bool bDetach)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Sliceable.Release");

	ARPOCPickupActor_Sliceable_Release_Params params;
	params.bDetach = bDetach;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor_Sliceable.ReceiveOnUsed
// (Event, Public, BlueprintEvent)

void ARPOCPickupActor_Sliceable::ReceiveOnUsed()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Sliceable.ReceiveOnUsed");

	ARPOCPickupActor_Sliceable_ReceiveOnUsed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor_Sliceable.ReceiveOnStopUse
// (Event, Public, BlueprintEvent)

void ARPOCPickupActor_Sliceable::ReceiveOnStopUse()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Sliceable.ReceiveOnStopUse");

	ARPOCPickupActor_Sliceable_ReceiveOnStopUse_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor_Sliceable.ReceiveOnReleased
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                  PreviousInstigator             (Parm, ZeroConstructor, IsPlainOldData)

void ARPOCPickupActor_Sliceable::ReceiveOnReleased(class AActor* PreviousInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Sliceable.ReceiveOnReleased");

	ARPOCPickupActor_Sliceable_ReceiveOnReleased_Params params;
	params.PreviousInstigator = PreviousInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor_Sliceable.ReceiveOnPickedUp_Native
// (Final, Native, Public)
// Parameters:
// class AActor*                  CurrentInstigator              (Parm, ZeroConstructor, IsPlainOldData)

void ARPOCPickupActor_Sliceable::ReceiveOnPickedUp_Native(class AActor* CurrentInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Sliceable.ReceiveOnPickedUp_Native");

	ARPOCPickupActor_Sliceable_ReceiveOnPickedUp_Native_Params params;
	params.CurrentInstigator = CurrentInstigator;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor_Sliceable.ReceiveOnPickedUp
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AActor*                  CurrentInstigator              (Parm, ZeroConstructor, IsPlainOldData)

void ARPOCPickupActor_Sliceable::ReceiveOnPickedUp(class AActor* CurrentInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Sliceable.ReceiveOnPickedUp");

	ARPOCPickupActor_Sliceable_ReceiveOnPickedUp_Params params;
	params.CurrentInstigator = CurrentInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor_Sliceable.ReceiveOnNotHeldInBothHands
// (Event, Public, BlueprintEvent)

void ARPOCPickupActor_Sliceable::ReceiveOnNotHeldInBothHands()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Sliceable.ReceiveOnNotHeldInBothHands");

	ARPOCPickupActor_Sliceable_ReceiveOnNotHeldInBothHands_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor_Sliceable.ReceiveOnInHand
// (Event, Public, BlueprintEvent)

void ARPOCPickupActor_Sliceable::ReceiveOnInHand()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Sliceable.ReceiveOnInHand");

	ARPOCPickupActor_Sliceable_ReceiveOnInHand_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor_Sliceable.ReceiveOnHeldInBothHands
// (Event, Public, BlueprintEvent)

void ARPOCPickupActor_Sliceable::ReceiveOnHeldInBothHands()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Sliceable.ReceiveOnHeldInBothHands");

	ARPOCPickupActor_Sliceable_ReceiveOnHeldInBothHands_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor_Sliceable.ReceiveOnBeginRangedGrab
// (Event, Public, BlueprintEvent)

void ARPOCPickupActor_Sliceable::ReceiveOnBeginRangedGrab()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Sliceable.ReceiveOnBeginRangedGrab");

	ARPOCPickupActor_Sliceable_ReceiveOnBeginRangedGrab_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor_Sliceable.ReceiveOnBeenDisarmed
// (Event, Public, BlueprintEvent)

void ARPOCPickupActor_Sliceable::ReceiveOnBeenDisarmed()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Sliceable.ReceiveOnBeenDisarmed");

	ARPOCPickupActor_Sliceable_ReceiveOnBeenDisarmed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor_Sliceable.OnSliced
// (Final, Native, Protected, HasDefaults)
// Parameters:
// struct FVector                 CentreOfSlice                  (Parm, IsPlainOldData)
// class USliceableMeshComponent* OriginalMesh                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class USliceableMeshComponent* NewMesh                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void ARPOCPickupActor_Sliceable::OnSliced(const struct FVector& CentreOfSlice, class USliceableMeshComponent* OriginalMesh, class USliceableMeshComponent* NewMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Sliceable.OnSliced");

	ARPOCPickupActor_Sliceable_OnSliced_Params params;
	params.CentreOfSlice = CentreOfSlice;
	params.OriginalMesh = OriginalMesh;
	params.NewMesh = NewMesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor_Sliceable.OnNonPlayerPickUp
// (Native, Public, BlueprintCallable)

void ARPOCPickupActor_Sliceable::OnNonPlayerPickUp()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Sliceable.OnNonPlayerPickUp");

	ARPOCPickupActor_Sliceable_OnNonPlayerPickUp_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor_Sliceable.OnNonPlayerDrop
// (Native, Public, BlueprintCallable)

void ARPOCPickupActor_Sliceable::OnNonPlayerDrop()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Sliceable.OnNonPlayerDrop");

	ARPOCPickupActor_Sliceable_OnNonPlayerDrop_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor_Sliceable.OnFadeOut
// (Final, Native, Protected)

void ARPOCPickupActor_Sliceable::OnFadeOut()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Sliceable.OnFadeOut");

	ARPOCPickupActor_Sliceable_OnFadeOut_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor_Sliceable.InitSliceable
// (Final, Native, Public, HasOutParms)
// Parameters:
// class USliceableMeshComponent* InSliceableMesh                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// TArray<class URPOCGrabLocatorComponent*> InGrabLocators                 (Parm, OutParm, ZeroConstructor)

void ARPOCPickupActor_Sliceable::InitSliceable(class USliceableMeshComponent* InSliceableMesh, TArray<class URPOCGrabLocatorComponent*>* InGrabLocators)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Sliceable.InitSliceable");

	ARPOCPickupActor_Sliceable_InitSliceable_Params params;
	params.InSliceableMesh = InSliceableMesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InGrabLocators != nullptr)
		*InGrabLocators = params.InGrabLocators;
}


// Function WKND.RPOCPickupActor_Sliceable.InitReposition
// (Native, Public, HasDefaults)
// Parameters:
// struct FTransform              HandTransform                  (Parm, IsPlainOldData)
// float                          RepositionTime                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           KeepRelativeRotation           (Parm, ZeroConstructor, IsPlainOldData)

void ARPOCPickupActor_Sliceable::InitReposition(const struct FTransform& HandTransform, float RepositionTime, bool KeepRelativeRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Sliceable.InitReposition");

	ARPOCPickupActor_Sliceable_InitReposition_Params params;
	params.HandTransform = HandTransform;
	params.RepositionTime = RepositionTime;
	params.KeepRelativeRotation = KeepRelativeRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor_Sliceable.GetRegressedVelocity
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector ARPOCPickupActor_Sliceable::GetRegressedVelocity()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Sliceable.GetRegressedVelocity");

	ARPOCPickupActor_Sliceable_GetRegressedVelocity_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickupActor_Sliceable.GetRegressedAngularVelocity
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector ARPOCPickupActor_Sliceable::GetRegressedAngularVelocity()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Sliceable.GetRegressedAngularVelocity");

	ARPOCPickupActor_Sliceable_GetRegressedAngularVelocity_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickupActor_Sliceable.GetPrimaryHand
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ENTHapticHands                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ENTHapticHands ARPOCPickupActor_Sliceable::GetPrimaryHand()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Sliceable.GetPrimaryHand");

	ARPOCPickupActor_Sliceable_GetPrimaryHand_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickupActor_Sliceable.GetOffHand
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ENTHapticHands                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ENTHapticHands ARPOCPickupActor_Sliceable::GetOffHand()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Sliceable.GetOffHand");

	ARPOCPickupActor_Sliceable_GetOffHand_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickupActor_Sliceable.GetIsIdling
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ARPOCPickupActor_Sliceable::GetIsIdling()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Sliceable.GetIsIdling");

	ARPOCPickupActor_Sliceable_GetIsIdling_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickupActor_Sliceable.GetIdleTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          ReturnValue                    (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ARPOCPickupActor_Sliceable::GetIdleTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Sliceable.GetIdleTime");

	ARPOCPickupActor_Sliceable_GetIdleTime_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickupActor_Sliceable.DelayedDestroy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Delay                          (Parm, ZeroConstructor, IsPlainOldData)

void ARPOCPickupActor_Sliceable::DelayedDestroy(float Delay)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Sliceable.DelayedDestroy");

	ARPOCPickupActor_Sliceable_DelayedDestroy_Params params;
	params.Delay = Delay;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor_Sliceable.Deactivate
// (Native, Public, BlueprintCallable)

void ARPOCPickupActor_Sliceable::Deactivate()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Sliceable.Deactivate");

	ARPOCPickupActor_Sliceable_Deactivate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor_Sliceable.CancelDelayedDestroy
// (Final, Native, Public, BlueprintCallable)

void ARPOCPickupActor_Sliceable::CancelDelayedDestroy()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Sliceable.CancelDelayedDestroy");

	ARPOCPickupActor_Sliceable_CancelDelayedDestroy_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActor_Sliceable.ApplyImpulseOnRelease
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ARPOCPickupActor_Sliceable::ApplyImpulseOnRelease()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Sliceable.ApplyImpulseOnRelease");

	ARPOCPickupActor_Sliceable_ApplyImpulseOnRelease_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickupActor_Sliceable.Activate
// (Native, Public, BlueprintCallable)

void ARPOCPickupActor_Sliceable::Activate()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActor_Sliceable.Activate");

	ARPOCPickupActor_Sliceable_Activate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActorInterface.SetTwoHanded
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           TwoHanded                      (Parm, ZeroConstructor, IsPlainOldData)

void URPOCPickupActorInterface::SetTwoHanded(bool TwoHanded)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActorInterface.SetTwoHanded");

	URPOCPickupActorInterface_SetTwoHanded_Params params;
	params.TwoHanded = TwoHanded;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActorInterface.SetSwapData
// (Native, Event, Public, HasOutParms, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGrabData               GrabData                       (ConstParm, Parm, OutParm, ReferenceParm)

void URPOCPickupActorInterface::SetSwapData(const struct FGrabData& GrabData)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActorInterface.SetSwapData");

	URPOCPickupActorInterface_SetSwapData_Params params;
	params.GrabData = GrabData;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActorInterface.SetPhysicsEnabled
// (Native, Event, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           Enabled                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           disarmed                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Impulse                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void URPOCPickupActorInterface::SetPhysicsEnabled(bool Enabled, bool disarmed, const struct FVector& Impulse)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActorInterface.SetPhysicsEnabled");

	URPOCPickupActorInterface_SetPhysicsEnabled_Params params;
	params.Enabled = Enabled;
	params.disarmed = disarmed;
	params.Impulse = Impulse;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupActorInterface.SetHighlight
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           bHighlight                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCPickupActorInterface::SetHighlight(bool bHighlight)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActorInterface.SetHighlight");

	URPOCPickupActorInterface_SetHighlight_Params params;
	params.bHighlight = bHighlight;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickupActorInterface.IsPriorityPickUp
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCPickupActorInterface::IsPriorityPickUp()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActorInterface.IsPriorityPickUp");

	URPOCPickupActorInterface_IsPriorityPickUp_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickupActorInterface.GetPickupPriorityMultiplier
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float URPOCPickupActorInterface::GetPickupPriorityMultiplier()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActorInterface.GetPickupPriorityMultiplier");

	URPOCPickupActorInterface_GetPickupPriorityMultiplier_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickupActorInterface.GetPickupDistanceMultiplier
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float URPOCPickupActorInterface::GetPickupDistanceMultiplier()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActorInterface.GetPickupDistanceMultiplier");

	URPOCPickupActorInterface_GetPickupDistanceMultiplier_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickupActorInterface.GetPickupData
// (Native, Event, Public, HasOutParms, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPickupStateData        PickupData                     (Parm, OutParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCPickupActorInterface::GetPickupData(struct FPickupStateData* PickupData)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActorInterface.GetPickupData");

	URPOCPickupActorInterface_GetPickupData_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PickupData != nullptr)
		*PickupData = params.PickupData;

	return params.ReturnValue;
}


// Function WKND.RPOCPickupActorInterface.GetGrabbingHand
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class URPOCCanGrabInterface> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TScriptInterface<class URPOCCanGrabInterface> URPOCPickupActorInterface::GetGrabbingHand()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActorInterface.GetGrabbingHand");

	URPOCPickupActorInterface_GetGrabbingHand_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickupActorInterface.Drop
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           applyImpulse                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCPickupActorInterface::Drop(bool applyImpulse)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActorInterface.Drop");

	URPOCPickupActorInterface_Drop_Params params;
	params.applyImpulse = applyImpulse;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCPickupActorInterface.BeginRangedGrab
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void URPOCPickupActorInterface::BeginRangedGrab()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupActorInterface.BeginRangedGrab");

	URPOCPickupActorInterface_BeginRangedGrab_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupDevice.Deactivate
// (Native, Public, BlueprintCallable)

void ARPOCPickupDevice::Deactivate()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupDevice.Deactivate");

	ARPOCPickupDevice_Deactivate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCPickupDevice.Activate
// (Native, Public, BlueprintCallable)

void ARPOCPickupDevice::Activate()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCPickupDevice.Activate");

	ARPOCPickupDevice_Activate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCSaberManager.RequestSaberSpawn
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  LightSaberType                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   Tag                            (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              Transform                      (Parm, IsPlainOldData)
// bool                           outAlreadyExisted              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class ARPOCPickup_Lightsaber*  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ARPOCPickup_Lightsaber* ARPOCSaberManager::STATIC_RequestSaberSpawn(class UObject* WorldContextObject, class UClass* LightSaberType, const struct FName& Tag, const struct FTransform& Transform, bool* outAlreadyExisted)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCSaberManager.RequestSaberSpawn");

	ARPOCSaberManager_RequestSaberSpawn_Params params;
	params.WorldContextObject = WorldContextObject;
	params.LightSaberType = LightSaberType;
	params.Tag = Tag;
	params.Transform = Transform;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (outAlreadyExisted != nullptr)
		*outAlreadyExisted = params.outAlreadyExisted;

	return params.ReturnValue;
}


// Function WKND.RPOCSaberManager.RegisterController
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AWKNDMotionController*   Controller                     (Parm, ZeroConstructor, IsPlainOldData)

void ARPOCSaberManager::RegisterController(class AWKNDMotionController* Controller)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCSaberManager.RegisterController");

	ARPOCSaberManager_RegisterController_Params params;
	params.Controller = Controller;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCSaberManager.OnSaberSweepHit
// (Event, Public, HasOutParms, BlueprintEvent)
// Parameters:
// class ARPOCPickup_Lightsaber*  Saber1                         (Parm, ZeroConstructor, IsPlainOldData)
// class ARPOCPickup_Lightsaber*  Saber2                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          RewindTime                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FSaberClashData         Clash                          (ConstParm, Parm, OutParm, ReferenceParm)

void ARPOCSaberManager::OnSaberSweepHit(class ARPOCPickup_Lightsaber* Saber1, class ARPOCPickup_Lightsaber* Saber2, float RewindTime, const struct FSaberClashData& Clash)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCSaberManager.OnSaberSweepHit");

	ARPOCSaberManager_OnSaberSweepHit_Params params;
	params.Saber1 = Saber1;
	params.Saber2 = Saber2;
	params.RewindTime = RewindTime;
	params.Clash = Clash;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCSaberManager.OnSaberContactStop
// (Event, Public, BlueprintEvent)
// Parameters:
// int                            clashMask                      (Parm, ZeroConstructor, IsPlainOldData)
// class ARPOCPickup_Lightsaber*  Saber1                         (Parm, ZeroConstructor, IsPlainOldData)
// class ARPOCPickup_Lightsaber*  Saber2                         (Parm, ZeroConstructor, IsPlainOldData)

void ARPOCSaberManager::OnSaberContactStop(int clashMask, class ARPOCPickup_Lightsaber* Saber1, class ARPOCPickup_Lightsaber* Saber2)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCSaberManager.OnSaberContactStop");

	ARPOCSaberManager_OnSaberContactStop_Params params;
	params.clashMask = clashMask;
	params.Saber1 = Saber1;
	params.Saber2 = Saber2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCSaberManager.OnSaberContactStart
// (Event, Public, BlueprintEvent)
// Parameters:
// int                            clashMask                      (Parm, ZeroConstructor, IsPlainOldData)
// class ARPOCPickup_Lightsaber*  Saber1                         (Parm, ZeroConstructor, IsPlainOldData)
// class ARPOCPickup_Lightsaber*  Saber2                         (Parm, ZeroConstructor, IsPlainOldData)

void ARPOCSaberManager::OnSaberContactStart(int clashMask, class ARPOCPickup_Lightsaber* Saber1, class ARPOCPickup_Lightsaber* Saber2)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCSaberManager.OnSaberContactStart");

	ARPOCSaberManager_OnSaberContactStart_Params params;
	params.clashMask = clashMask;
	params.Saber1 = Saber1;
	params.Saber2 = Saber2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCSaberManager.OnPlayerHit
// (Event, Public, BlueprintEvent)
// Parameters:
// class ARPOCPickup_Lightsaber*  AttackingSaber                 (Parm, ZeroConstructor, IsPlainOldData)
// int                            FrameStrikeCount               (Parm, ZeroConstructor, IsPlainOldData)
// class AWKNDPlayerPawn*         Player                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           PlayerWasStruckBeforeBlock     (Parm, ZeroConstructor, IsPlainOldData)

void ARPOCSaberManager::OnPlayerHit(class ARPOCPickup_Lightsaber* AttackingSaber, int FrameStrikeCount, class AWKNDPlayerPawn* Player, bool PlayerWasStruckBeforeBlock)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCSaberManager.OnPlayerHit");

	ARPOCSaberManager_OnPlayerHit_Params params;
	params.AttackingSaber = AttackingSaber;
	params.FrameStrikeCount = FrameStrikeCount;
	params.Player = Player;
	params.PlayerWasStruckBeforeBlock = PlayerWasStruckBeforeBlock;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCSaberManager.NumSpareSlots
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int ARPOCSaberManager::NumSpareSlots()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCSaberManager.NumSpareSlots");

	ARPOCSaberManager_NumSpareSlots_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCSaberManager.NumSpareSaberSlots
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int ARPOCSaberManager::STATIC_NumSpareSaberSlots(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCSaberManager.NumSpareSaberSlots");

	ARPOCSaberManager_NumSpareSaberSlots_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCSaberManager.GetSaberManager
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class ARPOCSaberManager*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ARPOCSaberManager* ARPOCSaberManager::STATIC_GetSaberManager(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCSaberManager.GetSaberManager");

	ARPOCSaberManager_GetSaberManager_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCSaberManager.GetSaberHeldByPlayer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ARPOCPickup_Lightsaber*  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ARPOCPickup_Lightsaber* ARPOCSaberManager::GetSaberHeldByPlayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCSaberManager.GetSaberHeldByPlayer");

	ARPOCSaberManager_GetSaberHeldByPlayer_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCSaberManager.GetSaberHeldByActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// class ARPOCPickup_Lightsaber*  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ARPOCPickup_Lightsaber* ARPOCSaberManager::GetSaberHeldByActor(class AActor* Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCSaberManager.GetSaberHeldByActor");

	ARPOCSaberManager_GetSaberHeldByActor_Params params;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCSaberManager.GetSaberByTag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   Tag                            (Parm, ZeroConstructor, IsPlainOldData)
// class ARPOCPickup_Lightsaber*  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ARPOCPickup_Lightsaber* ARPOCSaberManager::GetSaberByTag(const struct FName& Tag)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCSaberManager.GetSaberByTag");

	ARPOCSaberManager_GetSaberByTag_Params params;
	params.Tag = Tag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCSaberManager.CheckSaberDisengage
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class ARPOCPickup_Lightsaber*  Saber                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              ControllerBladeLoc             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void ARPOCSaberManager::CheckSaberDisengage(class ARPOCPickup_Lightsaber* Saber, const struct FTransform& ControllerBladeLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCSaberManager.CheckSaberDisengage");

	ARPOCSaberManager_CheckSaberDisengage_Params params;
	params.Saber = Saber;
	params.ControllerBladeLoc = ControllerBladeLoc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCStagedCombat_Attack.NotifyStaggered
// (Final, Native, Public)

void URPOCStagedCombat_Attack::NotifyStaggered()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombat_Attack.NotifyStaggered");

	URPOCStagedCombat_Attack_NotifyStaggered_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCStagedCombat_Attack.NotifyLethalDamageReceived
// (Final, Native, Public)

void URPOCStagedCombat_Attack::NotifyLethalDamageReceived()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombat_Attack.NotifyLethalDamageReceived");

	URPOCStagedCombat_Attack_NotifyLethalDamageReceived_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCStagedCombat_Attack.NotifyCombatStageCompleted
// (Final, Native, Public)
// Parameters:
// ECombatStageType               CompletedStage                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   Token                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            RemainingStageCount            (Parm, ZeroConstructor, IsPlainOldData)

void URPOCStagedCombat_Attack::NotifyCombatStageCompleted(ECombatStageType CompletedStage, const struct FName& Token, int RemainingStageCount)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombat_Attack.NotifyCombatStageCompleted");

	URPOCStagedCombat_Attack_NotifyCombatStageCompleted_Params params;
	params.CompletedStage = CompletedStage;
	params.Token = Token;
	params.RemainingStageCount = RemainingStageCount;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCStagedCombat_Attack.CreateAttackStageProxy
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class URPOCStagedCombatComponent* StagedCombatComponent          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class URPOCCombatStageData*    Stage                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// ECombatStage_Taunt             Taunt                          (Parm, ZeroConstructor, IsPlainOldData)
// class URPOCEnemyComboStageSetData* OrderedCombos                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class URPOCEnemyComboStageSetData* RandomCombos                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           VerifyPosition                 (Parm, ZeroConstructor, IsPlainOldData)
// class URPOCStagedCombat_Attack* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class URPOCStagedCombat_Attack* URPOCStagedCombat_Attack::STATIC_CreateAttackStageProxy(class URPOCStagedCombatComponent* StagedCombatComponent, class URPOCCombatStageData* Stage, ECombatStage_Taunt Taunt, class URPOCEnemyComboStageSetData* OrderedCombos, class URPOCEnemyComboStageSetData* RandomCombos, bool VerifyPosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombat_Attack.CreateAttackStageProxy");

	URPOCStagedCombat_Attack_CreateAttackStageProxy_Params params;
	params.StagedCombatComponent = StagedCombatComponent;
	params.Stage = Stage;
	params.Taunt = Taunt;
	params.OrderedCombos = OrderedCombos;
	params.RandomCombos = RandomCombos;
	params.VerifyPosition = VerifyPosition;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCStagedCombat_GoToPosition.NotifyMoveLocationReached
// (Final, Native, Public, HasDefaults)
// Parameters:
// struct FVector                 Location                       (Parm, IsPlainOldData)
// bool                           bMovingToFaceActor             (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  TargetFaceActor                (Parm, ZeroConstructor, IsPlainOldData)

void URPOCStagedCombat_GoToPosition::NotifyMoveLocationReached(const struct FVector& Location, bool bMovingToFaceActor, class AActor* TargetFaceActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombat_GoToPosition.NotifyMoveLocationReached");

	URPOCStagedCombat_GoToPosition_NotifyMoveLocationReached_Params params;
	params.Location = Location;
	params.bMovingToFaceActor = bMovingToFaceActor;
	params.TargetFaceActor = TargetFaceActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCStagedCombat_GoToPosition.NotifyMoveLocationAndYawReached
// (Final, Native, Public, HasDefaults)
// Parameters:
// struct FVector                 Location                       (Parm, IsPlainOldData)
// bool                           bMovingToFaceActor             (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  TargetFaceActor                (Parm, ZeroConstructor, IsPlainOldData)

void URPOCStagedCombat_GoToPosition::NotifyMoveLocationAndYawReached(const struct FVector& Location, bool bMovingToFaceActor, class AActor* TargetFaceActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombat_GoToPosition.NotifyMoveLocationAndYawReached");

	URPOCStagedCombat_GoToPosition_NotifyMoveLocationAndYawReached_Params params;
	params.Location = Location;
	params.bMovingToFaceActor = bMovingToFaceActor;
	params.TargetFaceActor = TargetFaceActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCStagedCombat_GoToPosition.CreateGoToPositionProxy
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class URPOCStagedCombatComponent* StagedCombatComponent          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FTransform              Position                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          LocationTolerance              (Parm, ZeroConstructor, IsPlainOldData)
// float                          YawTolerance                   (Parm, ZeroConstructor, IsPlainOldData)
// EStagedCombat_StageCompleteBehaviour AfterOpponentReached           (Parm, ZeroConstructor, IsPlainOldData)
// class URPOCStagedCombat_GoToPosition* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class URPOCStagedCombat_GoToPosition* URPOCStagedCombat_GoToPosition::STATIC_CreateGoToPositionProxy(class URPOCStagedCombatComponent* StagedCombatComponent, const struct FTransform& Position, float LocationTolerance, float YawTolerance, EStagedCombat_StageCompleteBehaviour AfterOpponentReached)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombat_GoToPosition.CreateGoToPositionProxy");

	URPOCStagedCombat_GoToPosition_CreateGoToPositionProxy_Params params;
	params.StagedCombatComponent = StagedCombatComponent;
	params.Position = Position;
	params.LocationTolerance = LocationTolerance;
	params.YawTolerance = YawTolerance;
	params.AfterOpponentReached = AfterOpponentReached;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCStagedCombat_GoToPosition.CreateGoToOpponentProxy
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class URPOCStagedCombatComponent* StagedCombatComponent          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          DistanceTolerance              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseYaw                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          YawFromOpponent                (Parm, ZeroConstructor, IsPlainOldData)
// EStagedCombat_StageCompleteBehaviour AfterOpponentReached           (Parm, ZeroConstructor, IsPlainOldData)
// class URPOCStagedCombat_GoToPosition* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class URPOCStagedCombat_GoToPosition* URPOCStagedCombat_GoToPosition::STATIC_CreateGoToOpponentProxy(class URPOCStagedCombatComponent* StagedCombatComponent, float Distance, float DistanceTolerance, bool bUseYaw, float YawFromOpponent, EStagedCombat_StageCompleteBehaviour AfterOpponentReached)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombat_GoToPosition.CreateGoToOpponentProxy");

	URPOCStagedCombat_GoToPosition_CreateGoToOpponentProxy_Params params;
	params.StagedCombatComponent = StagedCombatComponent;
	params.Distance = Distance;
	params.DistanceTolerance = DistanceTolerance;
	params.bUseYaw = bUseYaw;
	params.YawFromOpponent = YawFromOpponent;
	params.AfterOpponentReached = AfterOpponentReached;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCStagedCombat_GoToPosition.CreateGoToMovementStageProxy
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class URPOCStagedCombatComponent* StagedCombatComponent          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class URPOCCombatStageData*    Stage                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseDirection                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          Direction                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          DirectionTolerance             (Parm, ZeroConstructor, IsPlainOldData)
// EStagedCombat_StageCompleteBehaviour AfterOpponentReached           (Parm, ZeroConstructor, IsPlainOldData)
// class URPOCStagedCombat_GoToPosition* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class URPOCStagedCombat_GoToPosition* URPOCStagedCombat_GoToPosition::STATIC_CreateGoToMovementStageProxy(class URPOCStagedCombatComponent* StagedCombatComponent, class URPOCCombatStageData* Stage, bool bUseDirection, float Direction, float DirectionTolerance, EStagedCombat_StageCompleteBehaviour AfterOpponentReached)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombat_GoToPosition.CreateGoToMovementStageProxy");

	URPOCStagedCombat_GoToPosition_CreateGoToMovementStageProxy_Params params;
	params.StagedCombatComponent = StagedCombatComponent;
	params.Stage = Stage;
	params.bUseDirection = bUseDirection;
	params.Direction = Direction;
	params.DirectionTolerance = DirectionTolerance;
	params.AfterOpponentReached = AfterOpponentReached;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCStagedCombat_GoToPosition.CreateGoToLocationProxy
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class URPOCStagedCombatComponent* StagedCombatComponent          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 Location                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          LocationTolerance              (Parm, ZeroConstructor, IsPlainOldData)
// EStagedCombat_StageCompleteBehaviour AfterOpponentReached           (Parm, ZeroConstructor, IsPlainOldData)
// class URPOCStagedCombat_GoToPosition* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class URPOCStagedCombat_GoToPosition* URPOCStagedCombat_GoToPosition::STATIC_CreateGoToLocationProxy(class URPOCStagedCombatComponent* StagedCombatComponent, const struct FVector& Location, float LocationTolerance, EStagedCombat_StageCompleteBehaviour AfterOpponentReached)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombat_GoToPosition.CreateGoToLocationProxy");

	URPOCStagedCombat_GoToPosition_CreateGoToLocationProxy_Params params;
	params.StagedCombatComponent = StagedCombatComponent;
	params.Location = Location;
	params.LocationTolerance = LocationTolerance;
	params.AfterOpponentReached = AfterOpponentReached;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCStagedCombat_GoToPosition.CreateGoToCurrentTargetProxy
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class URPOCStagedCombatComponent* StagedCombatComponent          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           bUseDelay                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReachedLocationTimeout         (Parm, ZeroConstructor, IsPlainOldData)
// class URPOCStagedCombat_GoToPosition* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class URPOCStagedCombat_GoToPosition* URPOCStagedCombat_GoToPosition::STATIC_CreateGoToCurrentTargetProxy(class URPOCStagedCombatComponent* StagedCombatComponent, bool bUseDelay, float ReachedLocationTimeout)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombat_GoToPosition.CreateGoToCurrentTargetProxy");

	URPOCStagedCombat_GoToPosition_CreateGoToCurrentTargetProxy_Params params;
	params.StagedCombatComponent = StagedCombatComponent;
	params.bUseDelay = bUseDelay;
	params.ReachedLocationTimeout = ReachedLocationTimeout;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCStagedCombatComponent.ThrowStageConfigured
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCStagedCombatComponent::ThrowStageConfigured()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombatComponent.ThrowStageConfigured");

	URPOCStagedCombatComponent_ThrowStageConfigured_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCStagedCombatComponent.TakeHit
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Timeout                        (Parm, ZeroConstructor, IsPlainOldData)

void URPOCStagedCombatComponent::TakeHit(float Timeout)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombatComponent.TakeHit");

	URPOCStagedCombatComponent_TakeHit_Params params;
	params.Timeout = Timeout;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCStagedCombatComponent.StopRotation
// (Final, Native, Public, BlueprintCallable)

void URPOCStagedCombatComponent::StopRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombatComponent.StopRotation");

	URPOCStagedCombatComponent_StopRotation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCStagedCombatComponent.StageCompletedExternally
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ECombatStageType               CompletedStage                 (Parm, ZeroConstructor, IsPlainOldData)

void URPOCStagedCombatComponent::StageCompletedExternally(ECombatStageType CompletedStage)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombatComponent.StageCompletedExternally");

	URPOCStagedCombatComponent_StageCompletedExternally_Params params;
	params.CompletedStage = CompletedStage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCStagedCombatComponent.SetTargetOpponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AWKNDPlayerPawn*         NewTargetOpponent              (Parm, ZeroConstructor, IsPlainOldData)

void URPOCStagedCombatComponent::SetTargetOpponent(class AWKNDPlayerPawn* NewTargetOpponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombatComponent.SetTargetOpponent");

	URPOCStagedCombatComponent_SetTargetOpponent_Params params;
	params.NewTargetOpponent = NewTargetOpponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCStagedCombatComponent.SetNewDebugMovementTargets
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 NewMoveTargetLocation          (Parm, IsPlainOldData)
// struct FVector                 NewTargetFaceLocation          (Parm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCStagedCombatComponent::SetNewDebugMovementTargets(const struct FVector& NewMoveTargetLocation, const struct FVector& NewTargetFaceLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombatComponent.SetNewDebugMovementTargets");

	URPOCStagedCombatComponent_SetNewDebugMovementTargets_Params params;
	params.NewMoveTargetLocation = NewMoveTargetLocation;
	params.NewTargetFaceLocation = NewTargetFaceLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCStagedCombatComponent.SetNewDebugMovementTargetFaceActor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 NewMoveTargetLocation          (Parm, IsPlainOldData)
// class AActor*                  NewTargetFaceActor             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCStagedCombatComponent::SetNewDebugMovementTargetFaceActor(const struct FVector& NewMoveTargetLocation, class AActor* NewTargetFaceActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombatComponent.SetNewDebugMovementTargetFaceActor");

	URPOCStagedCombatComponent_SetNewDebugMovementTargetFaceActor_Params params;
	params.NewMoveTargetLocation = NewMoveTargetLocation;
	params.NewTargetFaceActor = NewTargetFaceActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCStagedCombatComponent.SetNewDebugMovementActorTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  NewTargetFaceActor             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCStagedCombatComponent::SetNewDebugMovementActorTarget(class AActor* NewTargetFaceActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombatComponent.SetNewDebugMovementActorTarget");

	URPOCStagedCombatComponent_SetNewDebugMovementActorTarget_Params params;
	params.NewTargetFaceActor = NewTargetFaceActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCStagedCombatComponent.SetLeftHanded
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           InLeftHanded                   (Parm, ZeroConstructor, IsPlainOldData)

void URPOCStagedCombatComponent::SetLeftHanded(bool InLeftHanded)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombatComponent.SetLeftHanded");

	URPOCStagedCombatComponent_SetLeftHanded_Params params;
	params.InLeftHanded = InLeftHanded;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCStagedCombatComponent.SetDirectionOffset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InDeltaDirection               (Parm, ZeroConstructor, IsPlainOldData)

void URPOCStagedCombatComponent::SetDirectionOffset(float InDeltaDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombatComponent.SetDirectionOffset");

	URPOCStagedCombatComponent_SetDirectionOffset_Params params;
	params.InDeltaDirection = InDeltaDirection;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCStagedCombatComponent.SetDirection
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InDirection                    (Parm, ZeroConstructor, IsPlainOldData)

void URPOCStagedCombatComponent::SetDirection(float InDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombatComponent.SetDirection");

	URPOCStagedCombatComponent_SetDirection_Params params;
	params.InDirection = InDirection;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCStagedCombatComponent.SetDamageable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           InDamageable                   (Parm, ZeroConstructor, IsPlainOldData)

void URPOCStagedCombatComponent::SetDamageable(bool InDamageable)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombatComponent.SetDamageable");

	URPOCStagedCombatComponent_SetDamageable_Params params;
	params.InDamageable = InDamageable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCStagedCombatComponent.SafeToTransitionFromState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ECombatStageType               CheckOutState                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCStagedCombatComponent::SafeToTransitionFromState(ECombatStageType CheckOutState)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombatComponent.SafeToTransitionFromState");

	URPOCStagedCombatComponent_SafeToTransitionFromState_Params params;
	params.CheckOutState = CheckOutState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCStagedCombatComponent.ResetStageTimeout
// (Final, Native, Public, BlueprintCallable)

void URPOCStagedCombatComponent::ResetStageTimeout()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombatComponent.ResetStageTimeout");

	URPOCStagedCombatComponent_ResetStageTimeout_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCStagedCombatComponent.ResetCombatStatistics
// (Final, Native, Public, BlueprintCallable)

void URPOCStagedCombatComponent::ResetCombatStatistics()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombatComponent.ResetCombatStatistics");

	URPOCStagedCombatComponent_ResetCombatStatistics_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCStagedCombatComponent.RegisterStrikeLanded
// (Final, Native, Public, BlueprintCallable)

void URPOCStagedCombatComponent::RegisterStrikeLanded()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombatComponent.RegisterStrikeLanded");

	URPOCStagedCombatComponent_RegisterStrikeLanded_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCStagedCombatComponent.RegisterStrikeBlocked
// (Final, Native, Public)
// Parameters:
// bool                           bWeakPushback                  (Parm, ZeroConstructor, IsPlainOldData)

void URPOCStagedCombatComponent::RegisterStrikeBlocked(bool bWeakPushback)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombatComponent.RegisterStrikeBlocked");

	URPOCStagedCombatComponent_RegisterStrikeBlocked_Params params;
	params.bWeakPushback = bWeakPushback;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCStagedCombatComponent.RegisterFinalComboStrikeBlocked
// (Final, Native, Public)
// Parameters:
// ECombat_ComboAttackResult      ComboResult                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            BlocksThisCombo                (Parm, ZeroConstructor, IsPlainOldData)
// int                            HitsThisCombo                  (Parm, ZeroConstructor, IsPlainOldData)
// int                            StrikesThisCombo               (Parm, ZeroConstructor, IsPlainOldData)

void URPOCStagedCombatComponent::RegisterFinalComboStrikeBlocked(ECombat_ComboAttackResult ComboResult, int BlocksThisCombo, int HitsThisCombo, int StrikesThisCombo)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombatComponent.RegisterFinalComboStrikeBlocked");

	URPOCStagedCombatComponent_RegisterFinalComboStrikeBlocked_Params params;
	params.ComboResult = ComboResult;
	params.BlocksThisCombo = BlocksThisCombo;
	params.HitsThisCombo = HitsThisCombo;
	params.StrikesThisCombo = StrikesThisCombo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCStagedCombatComponent.RegisterComboCompleted
// (Final, Native, Public)
// Parameters:
// ECombat_ComboAttackResult      ComboResult                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            BlocksThisCombo                (Parm, ZeroConstructor, IsPlainOldData)

void URPOCStagedCombatComponent::RegisterComboCompleted(ECombat_ComboAttackResult ComboResult, int BlocksThisCombo)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombatComponent.RegisterComboCompleted");

	URPOCStagedCombatComponent_RegisterComboCompleted_Params params;
	params.ComboResult = ComboResult;
	params.BlocksThisCombo = BlocksThisCombo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCStagedCombatComponent.PushCombatStage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class URPOCCombatStageData*    Stage                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           bClearCurrentStages            (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   Token                          (Parm, ZeroConstructor, IsPlainOldData)
// ECombatStageMovementOptions    Positioning                    (Parm, ZeroConstructor, IsPlainOldData)
// class ATargetPoint*            Target                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          Yaw                            (Parm, ZeroConstructor, IsPlainOldData)

void URPOCStagedCombatComponent::PushCombatStage(class URPOCCombatStageData* Stage, bool bClearCurrentStages, const struct FName& Token, ECombatStageMovementOptions Positioning, class ATargetPoint* Target, float Distance, float Yaw)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombatComponent.PushCombatStage");

	URPOCStagedCombatComponent_PushCombatStage_Params params;
	params.Stage = Stage;
	params.bClearCurrentStages = bClearCurrentStages;
	params.Token = Token;
	params.Positioning = Positioning;
	params.Target = Target;
	params.Distance = Distance;
	params.Yaw = Yaw;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCStagedCombatComponent.PlayStageSequence
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AWKNDPlayerPawn*         NewOpponent                    (Parm, ZeroConstructor, IsPlainOldData)
// class URPOCCombatSequence*     InStageSequence                (Parm, ZeroConstructor, IsPlainOldData)

void URPOCStagedCombatComponent::PlayStageSequence(class AWKNDPlayerPawn* NewOpponent, class URPOCCombatSequence* InStageSequence)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombatComponent.PlayStageSequence");

	URPOCStagedCombatComponent_PlayStageSequence_Params params;
	params.NewOpponent = NewOpponent;
	params.InStageSequence = InStageSequence;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCStagedCombatComponent.OverrideAttackSpeedMultipliers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewAttackSpeedMultiplier       (Parm, ZeroConstructor, IsPlainOldData)
// float                          NewWindUpSpeedMultiplier       (Parm, ZeroConstructor, IsPlainOldData)

void URPOCStagedCombatComponent::OverrideAttackSpeedMultipliers(float NewAttackSpeedMultiplier, float NewWindUpSpeedMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombatComponent.OverrideAttackSpeedMultipliers");

	URPOCStagedCombatComponent_OverrideAttackSpeedMultipliers_Params params;
	params.NewAttackSpeedMultiplier = NewAttackSpeedMultiplier;
	params.NewWindUpSpeedMultiplier = NewWindUpSpeedMultiplier;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCStagedCombatComponent.OnStrike
// (Final, Native, Protected)

void URPOCStagedCombatComponent::OnStrike()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombatComponent.OnStrike");

	URPOCStagedCombatComponent_OnStrike_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCStagedCombatComponent.OnDeath
// (Final, Native, Protected)
// Parameters:
// struct FWKNDDamageInfo         DamageInfo                     (Parm)

void URPOCStagedCombatComponent::OnDeath(const struct FWKNDDamageInfo& DamageInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombatComponent.OnDeath");

	URPOCStagedCombatComponent_OnDeath_Params params;
	params.DamageInfo = DamageInfo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCStagedCombatComponent.NotifySaberPickedUp
// (Final, Native, Public)
// Parameters:
// class AWKNDMotionController*   Controller                     (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  Object                         (Parm, ZeroConstructor, IsPlainOldData)

void URPOCStagedCombatComponent::NotifySaberPickedUp(class AWKNDMotionController* Controller, class AActor* Object)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombatComponent.NotifySaberPickedUp");

	URPOCStagedCombatComponent_NotifySaberPickedUp_Params params;
	params.Controller = Controller;
	params.Object = Object;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCStagedCombatComponent.IsVulnerable
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCStagedCombatComponent::IsVulnerable()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombatComponent.IsVulnerable");

	URPOCStagedCombatComponent_IsVulnerable_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCStagedCombatComponent.IsStaggered
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCStagedCombatComponent::IsStaggered()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombatComponent.IsStaggered");

	URPOCStagedCombatComponent_IsStaggered_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCStagedCombatComponent.IsInCombatSequence
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCStagedCombatComponent::IsInCombatSequence()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombatComponent.IsInCombatSequence");

	URPOCStagedCombatComponent_IsInCombatSequence_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCStagedCombatComponent.IsAtTargetMoveLocationAndYaw
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCStagedCombatComponent::IsAtTargetMoveLocationAndYaw()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombatComponent.IsAtTargetMoveLocationAndYaw");

	URPOCStagedCombatComponent_IsAtTargetMoveLocationAndYaw_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCStagedCombatComponent.IsAtTargetMoveLocation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCStagedCombatComponent::IsAtTargetMoveLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombatComponent.IsAtTargetMoveLocation");

	URPOCStagedCombatComponent_IsAtTargetMoveLocation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCStagedCombatComponent.GetTargetLocation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 IdealLocation                  (Parm, OutParm, IsPlainOldData)
// struct FVector                 ClippedLocation                (Parm, OutParm, IsPlainOldData)

void URPOCStagedCombatComponent::GetTargetLocation(struct FVector* IdealLocation, struct FVector* ClippedLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombatComponent.GetTargetLocation");

	URPOCStagedCombatComponent_GetTargetLocation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (IdealLocation != nullptr)
		*IdealLocation = params.IdealLocation;
	if (ClippedLocation != nullptr)
		*ClippedLocation = params.ClippedLocation;
}


// Function WKND.RPOCStagedCombatComponent.GetStageDebugInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString URPOCStagedCombatComponent::GetStageDebugInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombatComponent.GetStageDebugInfo");

	URPOCStagedCombatComponent_GetStageDebugInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCStagedCombatComponent.GetHealth
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            HitPoints                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            Level                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void URPOCStagedCombatComponent::GetHealth(int* HitPoints, int* Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombatComponent.GetHealth");

	URPOCStagedCombatComponent_GetHealth_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (HitPoints != nullptr)
		*HitPoints = params.HitPoints;
	if (Level != nullptr)
		*Level = params.Level;
}


// Function WKND.RPOCStagedCombatComponent.GetDistanceToOpponent
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          FoundDistance                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCStagedCombatComponent::GetDistanceToOpponent(float* FoundDistance)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombatComponent.GetDistanceToOpponent");

	URPOCStagedCombatComponent_GetDistanceToOpponent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (FoundDistance != nullptr)
		*FoundDistance = params.FoundDistance;

	return params.ReturnValue;
}


// Function WKND.RPOCStagedCombatComponent.GetDamageable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCStagedCombatComponent::GetDamageable()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombatComponent.GetDamageable");

	URPOCStagedCombatComponent_GetDamageable_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCStagedCombatComponent.GetCombatStatistics
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FStagedCombatStatistics Enemy                          (Parm, OutParm, IsPlainOldData)
// struct FStagedCombatStatistics Player                         (Parm, OutParm, IsPlainOldData)

void URPOCStagedCombatComponent::GetCombatStatistics(struct FStagedCombatStatistics* Enemy, struct FStagedCombatStatistics* Player)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombatComponent.GetCombatStatistics");

	URPOCStagedCombatComponent_GetCombatStatistics_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Enemy != nullptr)
		*Enemy = params.Enemy;
	if (Player != nullptr)
		*Player = params.Player;
}


// Function WKND.RPOCStagedCombatComponent.EndCombatStage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ECombatStageType               StageType                      (Parm, ZeroConstructor, IsPlainOldData)

void URPOCStagedCombatComponent::EndCombatStage(ECombatStageType StageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombatComponent.EndCombatStage");

	URPOCStagedCombatComponent_EndCombatStage_Params params;
	params.StageType = StageType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCStagedCombatComponent.CurrentActiveStage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ECombatStageType               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ECombatStageType URPOCStagedCombatComponent::CurrentActiveStage()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombatComponent.CurrentActiveStage");

	URPOCStagedCombatComponent_CurrentActiveStage_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCStagedCombatComponent.ConfigurePersonalCombatData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWKNDEnemyCombatData*    NewPersonalCombatData          (Parm, ZeroConstructor, IsPlainOldData)
// float                          NewAttackSpeedMultiplier       (Parm, ZeroConstructor, IsPlainOldData)
// float                          NewWindUpSpeedMultiplier       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCStagedCombatComponent::ConfigurePersonalCombatData(class UWKNDEnemyCombatData* NewPersonalCombatData, float NewAttackSpeedMultiplier, float NewWindUpSpeedMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombatComponent.ConfigurePersonalCombatData");

	URPOCStagedCombatComponent_ConfigurePersonalCombatData_Params params;
	params.NewPersonalCombatData = NewPersonalCombatData;
	params.NewAttackSpeedMultiplier = NewAttackSpeedMultiplier;
	params.NewWindUpSpeedMultiplier = NewWindUpSpeedMultiplier;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCStagedCombatComponent.CheckDamagedArmourPiece
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 StrikeLocation                 (Parm, IsPlainOldData)
// class UStaticMeshComponent*    ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UStaticMeshComponent* URPOCStagedCombatComponent::CheckDamagedArmourPiece(const struct FVector& StrikeLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStagedCombatComponent.CheckDamagedArmourPiece");

	URPOCStagedCombatComponent_CheckDamagedArmourPiece_Params params;
	params.StrikeLocation = StrikeLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCStrikePredictionComponent.InitNewOpponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AWKNDPlayerPawn*         NewOpponent                    (Parm, ZeroConstructor, IsPlainOldData)

void URPOCStrikePredictionComponent::InitNewOpponent(class AWKNDPlayerPawn* NewOpponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStrikePredictionComponent.InitNewOpponent");

	URPOCStrikePredictionComponent_InitNewOpponent_Params params;
	params.NewOpponent = NewOpponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.RPOCStrikePredictionComponent.HasOuterCapsuleOverlap
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCStrikePredictionComponent::HasOuterCapsuleOverlap()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStrikePredictionComponent.HasOuterCapsuleOverlap");

	URPOCStrikePredictionComponent_HasOuterCapsuleOverlap_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCStrikePredictionComponent.HasIncomingStrike
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCStrikePredictionComponent::HasIncomingStrike()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStrikePredictionComponent.HasIncomingStrike");

	URPOCStrikePredictionComponent_HasIncomingStrike_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCStrikePredictionComponent.GetHasNewInnerCollision
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCStrikePredictionComponent::GetHasNewInnerCollision()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStrikePredictionComponent.GetHasNewInnerCollision");

	URPOCStrikePredictionComponent_GetHasNewInnerCollision_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCStrikePredictionComponent.CheckForStrike
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FCompleteStrikeData     ActiveStrike                   (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCStrikePredictionComponent::CheckForStrike(struct FCompleteStrikeData* ActiveStrike)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCStrikePredictionComponent.CheckForStrike");

	URPOCStrikePredictionComponent_CheckForStrike_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ActiveStrike != nullptr)
		*ActiveStrike = params.ActiveStrike;

	return params.ReturnValue;
}


// Function WKND.RPOCUsageInterface.Use_Release
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCUsageInterface::Use_Release()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCUsageInterface.Use_Release");

	URPOCUsageInterface_Use_Release_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCUsageInterface.Use_Press
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCUsageInterface::Use_Press()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCUsageInterface.Use_Press");

	URPOCUsageInterface_Use_Press_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCUsageInterface.Trigger_UnTouch
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCUsageInterface::Trigger_UnTouch()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCUsageInterface.Trigger_UnTouch");

	URPOCUsageInterface_Trigger_UnTouch_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCUsageInterface.Trigger_Touch
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCUsageInterface::Trigger_Touch()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCUsageInterface.Trigger_Touch");

	URPOCUsageInterface_Trigger_Touch_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCUsageInterface.Trigger_Release
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCUsageInterface::Trigger_Release()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCUsageInterface.Trigger_Release");

	URPOCUsageInterface_Trigger_Release_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCUsageInterface.Trigger_Press
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCUsageInterface::Trigger_Press()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCUsageInterface.Trigger_Press");

	URPOCUsageInterface_Trigger_Press_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCUsageInterface.Stick_UnTouch
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCUsageInterface::Stick_UnTouch()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCUsageInterface.Stick_UnTouch");

	URPOCUsageInterface_Stick_UnTouch_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCUsageInterface.Stick_Touch
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCUsageInterface::Stick_Touch()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCUsageInterface.Stick_Touch");

	URPOCUsageInterface_Stick_Touch_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCUsageInterface.FaceTopButton_UnTouch
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCUsageInterface::FaceTopButton_UnTouch()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCUsageInterface.FaceTopButton_UnTouch");

	URPOCUsageInterface_FaceTopButton_UnTouch_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCUsageInterface.FaceTopButton_Touch
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCUsageInterface::FaceTopButton_Touch()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCUsageInterface.FaceTopButton_Touch");

	URPOCUsageInterface_FaceTopButton_Touch_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCUsageInterface.FaceTopButton_Release
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCUsageInterface::FaceTopButton_Release()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCUsageInterface.FaceTopButton_Release");

	URPOCUsageInterface_FaceTopButton_Release_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCUsageInterface.FaceTopButton_Press
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCUsageInterface::FaceTopButton_Press()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCUsageInterface.FaceTopButton_Press");

	URPOCUsageInterface_FaceTopButton_Press_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCUsageInterface.FaceBottomButton_UnTouch
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCUsageInterface::FaceBottomButton_UnTouch()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCUsageInterface.FaceBottomButton_UnTouch");

	URPOCUsageInterface_FaceBottomButton_UnTouch_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCUsageInterface.FaceBottomButton_Touch
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCUsageInterface::FaceBottomButton_Touch()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCUsageInterface.FaceBottomButton_Touch");

	URPOCUsageInterface_FaceBottomButton_Touch_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCUsageInterface.FaceBottomButton_Release
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCUsageInterface::FaceBottomButton_Release()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCUsageInterface.FaceBottomButton_Release");

	URPOCUsageInterface_FaceBottomButton_Release_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.RPOCUsageInterface.FaceBottomButton_Press
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool URPOCUsageInterface::FaceBottomButton_Press()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.RPOCUsageInterface.FaceBottomButton_Press");

	URPOCUsageInterface_FaceBottomButton_Press_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.SliceableChain.SpawnDestroyedLink
// (Final, Native, Public, HasDefaults)
// Parameters:
// struct FVector                 Location                       (Parm, IsPlainOldData)
// struct FQuat                   Rotation                       (Parm, IsPlainOldData)
// struct FVector                 Scale                          (Parm, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)

void ASliceableChain::SpawnDestroyedLink(const struct FVector& Location, const struct FQuat& Rotation, const struct FVector& Scale, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableChain.SpawnDestroyedLink");

	ASliceableChain_SpawnDestroyedLink_Params params;
	params.Location = Location;
	params.Rotation = Rotation;
	params.Scale = Scale;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableChain.SpawnCuttingVFX
// (Final, Native, Public, HasDefaults)
// Parameters:
// struct FVector                 CutLocation                    (Parm, IsPlainOldData)

void ASliceableChain::SpawnCuttingVFX(const struct FVector& CutLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableChain.SpawnCuttingVFX");

	ASliceableChain_SpawnCuttingVFX_Params params;
	params.CutLocation = CutLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableChain.SetDissolveParameter
// (Final, Native, Public)
// Parameters:
// class UStaticMeshComponent*    DestroyedMesh                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// float                          DissolveTime                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void ASliceableChain::SetDissolveParameter(class UStaticMeshComponent* DestroyedMesh, float DissolveTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableChain.SetDissolveParameter");

	ASliceableChain_SetDissolveParameter_Params params;
	params.DestroyedMesh = DestroyedMesh;
	params.DissolveTime = DissolveTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableChain.ReceiveOnUpdateCut
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                  CuttingActor                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void ASliceableChain::ReceiveOnUpdateCut(class AActor* CuttingActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableChain.ReceiveOnUpdateCut");

	ASliceableChain_ReceiveOnUpdateCut_Params params;
	params.CuttingActor = CuttingActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableChain.ReceiveOnStartCut
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                  CuttingActor                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void ASliceableChain::ReceiveOnStartCut(class AActor* CuttingActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableChain.ReceiveOnStartCut");

	ASliceableChain_ReceiveOnStartCut_Params params;
	params.CuttingActor = CuttingActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableChain.ReceiveOnMeshSliced
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                  CuttingActor                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void ASliceableChain::ReceiveOnMeshSliced(class AActor* CuttingActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableChain.ReceiveOnMeshSliced");

	ASliceableChain_ReceiveOnMeshSliced_Params params;
	params.CuttingActor = CuttingActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableChain.ReceiveOnEndCut
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                  CuttingActor                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void ASliceableChain::ReceiveOnEndCut(class AActor* CuttingActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableChain.ReceiveOnEndCut");

	ASliceableChain_ReceiveOnEndCut_Params params;
	params.CuttingActor = CuttingActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableChain.PlaySlicedAudio
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Location                       (Parm, IsPlainOldData)

void ASliceableChain::PlaySlicedAudio(const struct FVector& Location)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableChain.PlaySlicedAudio");

	ASliceableChain_PlaySlicedAudio_Params params;
	params.Location = Location;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableChain.PlayDestroyedAudio
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Location                       (Parm, IsPlainOldData)

void ASliceableChain::PlayDestroyedAudio(const struct FVector& Location)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableChain.PlayDestroyedAudio");

	ASliceableChain_PlayDestroyedAudio_Params params;
	params.Location = Location;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableChain.OnTouched
// (Final, Native, Public, HasDefaults)
// Parameters:
// class UPrimitiveComponent*     TouchedComponent               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// EHandTouch                     TouchType                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, IsPlainOldData)
// struct FVector                 ContactVelocity                (Parm, IsPlainOldData)

void ASliceableChain::OnTouched(class UPrimitiveComponent* TouchedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, EHandTouch TouchType, const struct FVector& Location, const struct FVector& ContactVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableChain.OnTouched");

	ASliceableChain_OnTouched_Params params;
	params.TouchedComponent = TouchedComponent;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.TouchType = TouchType;
	params.Location = Location;
	params.ContactVelocity = ContactVelocity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableChain.OnHitAudio
// (Final, Native, Public, HasDefaults)
// Parameters:
// class UPrimitiveComponent*     OtherComponent                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 HitImpulse                     (Parm, IsPlainOldData)
// struct FVector                 HitLocation                    (Parm, IsPlainOldData)

void ASliceableChain::OnHitAudio(class UPrimitiveComponent* OtherComponent, const struct FVector& HitImpulse, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableChain.OnHitAudio");

	ASliceableChain_OnHitAudio_Params params;
	params.OtherComponent = OtherComponent;
	params.HitImpulse = HitImpulse;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableChain.OnHit
// (Final, Native, Public, HasOutParms, HasDefaults)
// Parameters:
// class UPrimitiveComponent*     HitComp                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 NormalImpulse                  (Parm, IsPlainOldData)
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void ASliceableChain::OnHit(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableChain.OnHit");

	ASliceableChain_OnHit_Params params;
	params.HitComp = HitComp;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.NormalImpulse = NormalImpulse;
	params.Hit = Hit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableCloth.ReceiveOnUpdateCut
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                  CuttingActor                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void ASliceableCloth::ReceiveOnUpdateCut(class AActor* CuttingActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableCloth.ReceiveOnUpdateCut");

	ASliceableCloth_ReceiveOnUpdateCut_Params params;
	params.CuttingActor = CuttingActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableCloth.ReceiveOnStartCut
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                  CuttingActor                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void ASliceableCloth::ReceiveOnStartCut(class AActor* CuttingActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableCloth.ReceiveOnStartCut");

	ASliceableCloth_ReceiveOnStartCut_Params params;
	params.CuttingActor = CuttingActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableCloth.ReceiveOnMeshSliced
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                  CuttingActor                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void ASliceableCloth::ReceiveOnMeshSliced(class AActor* CuttingActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableCloth.ReceiveOnMeshSliced");

	ASliceableCloth_ReceiveOnMeshSliced_Params params;
	params.CuttingActor = CuttingActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableCloth.ReceiveOnEndCut
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                  CuttingActor                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void ASliceableCloth::ReceiveOnEndCut(class AActor* CuttingActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableCloth.ReceiveOnEndCut");

	ASliceableCloth_ReceiveOnEndCut_Params params;
	params.CuttingActor = CuttingActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableMeshComponent.UpdateCut
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                  CuttingActor                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 CutEntryLocation               (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 CutExitLocation                (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void USliceableMeshComponent::UpdateCut(class AActor* CuttingActor, const struct FVector& CutEntryLocation, const struct FVector& CutExitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableMeshComponent.UpdateCut");

	USliceableMeshComponent_UpdateCut_Params params;
	params.CuttingActor = CuttingActor;
	params.CutEntryLocation = CutEntryLocation;
	params.CutExitLocation = CutExitLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableMeshComponent.StartDissolveOut
// (Final, Native, Public, BlueprintCallable)

void USliceableMeshComponent::StartDissolveOut()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableMeshComponent.StartDissolveOut");

	USliceableMeshComponent_StartDissolveOut_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableMeshComponent.StartCut
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  CuttingActor                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void USliceableMeshComponent::StartCut(class AActor* CuttingActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableMeshComponent.StartCut");

	USliceableMeshComponent_StartCut_Params params;
	params.CuttingActor = CuttingActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableMeshComponent.StampVFX
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D               CollisionUV                    (ConstParm, Parm, IsPlainOldData)

void USliceableMeshComponent::StampVFX(const struct FVector2D& CollisionUV)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableMeshComponent.StampVFX");

	USliceableMeshComponent_StampVFX_Params params;
	params.CollisionUV = CollisionUV;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableMeshComponent.SliceFromBladeCollision
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class AActor*                  Lightsaber                     (Parm, ZeroConstructor, IsPlainOldData)
// class UProceduralMeshComponent* OutOtherHalfProcMesh           (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData)
// EProcMeshSliceCapOption        CapOption                      (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInterface*      CapMat                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          SplitSpeedMultiplier           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bColorCutEdgeWhite             (Parm, ZeroConstructor, IsPlainOldData)

void USliceableMeshComponent::SliceFromBladeCollision(class AActor* Lightsaber, EProcMeshSliceCapOption CapOption, class UMaterialInterface* CapMat, float SplitSpeedMultiplier, bool bColorCutEdgeWhite, class UProceduralMeshComponent** OutOtherHalfProcMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableMeshComponent.SliceFromBladeCollision");

	USliceableMeshComponent_SliceFromBladeCollision_Params params;
	params.Lightsaber = Lightsaber;
	params.CapOption = CapOption;
	params.CapMat = CapMat;
	params.SplitSpeedMultiplier = SplitSpeedMultiplier;
	params.bColorCutEdgeWhite = bColorCutEdgeWhite;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutOtherHalfProcMesh != nullptr)
		*OutOtherHalfProcMesh = params.OutOtherHalfProcMesh;
}


// Function WKND.SliceableMeshComponent.OnTouched
// (Final, Native, Public, HasDefaults)
// Parameters:
// class UPrimitiveComponent*     TouchedComponent               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// EHandTouch                     TouchType                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, IsPlainOldData)
// struct FVector                 ContactVelocity                (Parm, IsPlainOldData)

void USliceableMeshComponent::OnTouched(class UPrimitiveComponent* TouchedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, EHandTouch TouchType, const struct FVector& Location, const struct FVector& ContactVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableMeshComponent.OnTouched");

	USliceableMeshComponent_OnTouched_Params params;
	params.TouchedComponent = TouchedComponent;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.TouchType = TouchType;
	params.Location = Location;
	params.ContactVelocity = ContactVelocity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableMeshComponent.OnHit
// (Final, Native, Public, HasOutParms, HasDefaults)
// Parameters:
// class UPrimitiveComponent*     HitComp                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 NormalImpulse                  (Parm, IsPlainOldData)
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void USliceableMeshComponent::OnHit(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableMeshComponent.OnHit");

	USliceableMeshComponent_OnHit_Params params;
	params.HitComp = HitComp;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.NormalImpulse = NormalImpulse;
	params.Hit = Hit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableMeshComponent.OnAsyncPhysicsCookFinished
// (Final, Native, Private)

void USliceableMeshComponent::OnAsyncPhysicsCookFinished()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableMeshComponent.OnAsyncPhysicsCookFinished");

	USliceableMeshComponent_OnAsyncPhysicsCookFinished_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableMeshComponent.IsFadingOut
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool USliceableMeshComponent::IsFadingOut()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableMeshComponent.IsFadingOut");

	USliceableMeshComponent_IsFadingOut_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.SliceableMeshComponent.HasBeenCut
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool USliceableMeshComponent::HasBeenCut()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableMeshComponent.HasBeenCut");

	USliceableMeshComponent_HasBeenCut_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.SliceableMeshComponent.GetMeshBounds
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FBoxSphereBounds        ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FBoxSphereBounds USliceableMeshComponent::GetMeshBounds()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableMeshComponent.GetMeshBounds");

	USliceableMeshComponent_GetMeshBounds_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.SliceableMeshComponent.GetDissolveStartTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USliceableMeshComponent::GetDissolveStartTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableMeshComponent.GetDissolveStartTime");

	USliceableMeshComponent_GetDissolveStartTime_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.SliceableMeshComponent.FinaliseCut
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                  CuttingActor                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 BladePointingDirection         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void USliceableMeshComponent::FinaliseCut(class AActor* CuttingActor, const struct FVector& BladePointingDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableMeshComponent.FinaliseCut");

	USliceableMeshComponent_FinaliseCut_Params params;
	params.CuttingActor = CuttingActor;
	params.BladePointingDirection = BladePointingDirection;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableMeshComponent.EstimateVolume
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USliceableMeshComponent::EstimateVolume()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableMeshComponent.EstimateVolume");

	USliceableMeshComponent_EstimateVolume_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.SliceableMeshComponent.EstimateCentre
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector USliceableMeshComponent::EstimateCentre()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableMeshComponent.EstimateCentre");

	USliceableMeshComponent_EstimateCentre_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.SliceableSkeleton.UpdateCut
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                  CuttingActor                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 CutLocation                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FName                   BoneName                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void ASliceableSkeleton::UpdateCut(class AActor* CuttingActor, const struct FVector& CutLocation, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableSkeleton.UpdateCut");

	ASliceableSkeleton_UpdateCut_Params params;
	params.CuttingActor = CuttingActor;
	params.CutLocation = CutLocation;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableSkeleton.StopRagdoll
// (Final, Native, Public, BlueprintCallable)

void ASliceableSkeleton::StopRagdoll()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableSkeleton.StopRagdoll");

	ASliceableSkeleton_StopRagdoll_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableSkeleton.StartCut
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class AActor*                  CuttingActor                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   BoneName                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void ASliceableSkeleton::StartCut(class AActor* CuttingActor, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableSkeleton.StartCut");

	ASliceableSkeleton_StartCut_Params params;
	params.CuttingActor = CuttingActor;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableSkeleton.ReceiveStopRagdoll
// (Event, Public, BlueprintEvent)

void ASliceableSkeleton::ReceiveStopRagdoll()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableSkeleton.ReceiveStopRagdoll");

	ASliceableSkeleton_ReceiveStopRagdoll_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableSkeleton.ReceiveRagdoll
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                           bApplySliceImpulse             (Parm, ZeroConstructor, IsPlainOldData)

void ASliceableSkeleton::ReceiveRagdoll(bool bApplySliceImpulse)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableSkeleton.ReceiveRagdoll");

	ASliceableSkeleton_ReceiveRagdoll_Params params;
	params.bApplySliceImpulse = bApplySliceImpulse;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableSkeleton.ReceiveOnUpdateCut
// (Event, Public, HasOutParms, HasDefaults, BlueprintEvent)
// Parameters:
// class AActor*                  CuttingActor                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 CutLocation                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FName                   BoneName                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void ASliceableSkeleton::ReceiveOnUpdateCut(class AActor* CuttingActor, const struct FVector& CutLocation, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableSkeleton.ReceiveOnUpdateCut");

	ASliceableSkeleton_ReceiveOnUpdateCut_Params params;
	params.CuttingActor = CuttingActor;
	params.CutLocation = CutLocation;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableSkeleton.ReceiveOnStartCut
// (Event, Public, HasOutParms, BlueprintEvent)
// Parameters:
// class AActor*                  CuttingActor                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   BoneName                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void ASliceableSkeleton::ReceiveOnStartCut(class AActor* CuttingActor, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableSkeleton.ReceiveOnStartCut");

	ASliceableSkeleton_ReceiveOnStartCut_Params params;
	params.CuttingActor = CuttingActor;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableSkeleton.ReceiveOnSkeletonCut
// (Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// class AActor*                  CuttingActor                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 CutCentre                      (Parm, IsPlainOldData)
// struct FVector                 CutNormal                      (Parm, IsPlainOldData)

void ASliceableSkeleton::ReceiveOnSkeletonCut(class AActor* CuttingActor, const struct FName& BoneName, const struct FVector& CutCentre, const struct FVector& CutNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableSkeleton.ReceiveOnSkeletonCut");

	ASliceableSkeleton_ReceiveOnSkeletonCut_Params params;
	params.CuttingActor = CuttingActor;
	params.BoneName = BoneName;
	params.CutCentre = CutCentre;
	params.CutNormal = CutNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableSkeleton.ReceiveOnEndCut
// (Event, Public, HasOutParms, HasDefaults, BlueprintEvent)
// Parameters:
// class AActor*                  CuttingActor                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 BladePointingDirection         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void ASliceableSkeleton::ReceiveOnEndCut(class AActor* CuttingActor, const struct FVector& BladePointingDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableSkeleton.ReceiveOnEndCut");

	ASliceableSkeleton_ReceiveOnEndCut_Params params;
	params.CuttingActor = CuttingActor;
	params.BladePointingDirection = BladePointingDirection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableSkeleton.ReceiveKill
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                           bApplySliceImpulse             (Parm, ZeroConstructor, IsPlainOldData)

void ASliceableSkeleton::ReceiveKill(bool bApplySliceImpulse)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableSkeleton.ReceiveKill");

	ASliceableSkeleton_ReceiveKill_Params params;
	params.bApplySliceImpulse = bApplySliceImpulse;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableSkeleton.ReceiveDissolveAndDestroy
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ASliceableSkeleton::ReceiveDissolveAndDestroy()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableSkeleton.ReceiveDissolveAndDestroy");

	ASliceableSkeleton_ReceiveDissolveAndDestroy_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableSkeleton.Ragdoll
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bApplySliceImpulse             (Parm, ZeroConstructor, IsPlainOldData)

void ASliceableSkeleton::Ragdoll(bool bApplySliceImpulse)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableSkeleton.Ragdoll");

	ASliceableSkeleton_Ragdoll_Params params;
	params.bApplySliceImpulse = bApplySliceImpulse;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableSkeleton.PlaySlicedVFX
// (Native, Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                 Location                       (Parm, IsPlainOldData)
// struct FVector                 Normal                         (Parm, IsPlainOldData)
// float                          DistanceFromBone               (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ChildBoneName                  (Parm, ZeroConstructor, IsPlainOldData)

void ASliceableSkeleton::PlaySlicedVFX(const struct FVector& Location, const struct FVector& Normal, float DistanceFromBone, const struct FName& BoneName, const struct FName& ChildBoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableSkeleton.PlaySlicedVFX");

	ASliceableSkeleton_PlaySlicedVFX_Params params;
	params.Location = Location;
	params.Normal = Normal;
	params.DistanceFromBone = DistanceFromBone;
	params.BoneName = BoneName;
	params.ChildBoneName = ChildBoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableSkeleton.OverrideChildBone
// (Native, Event, Public, HasOutParms, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FName                   ChildBoneName                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void ASliceableSkeleton::OverrideChildBone(const struct FName& ChildBoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableSkeleton.OverrideChildBone");

	ASliceableSkeleton_OverrideChildBone_Params params;
	params.ChildBoneName = ChildBoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableSkeleton.OnTouched
// (Final, Native, Public, HasDefaults)
// Parameters:
// class UPrimitiveComponent*     TouchedComponent               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// EHandTouch                     TouchType                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, IsPlainOldData)
// struct FVector                 ContactVelocity                (Parm, IsPlainOldData)

void ASliceableSkeleton::OnTouched(class UPrimitiveComponent* TouchedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, EHandTouch TouchType, const struct FVector& Location, const struct FVector& ContactVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableSkeleton.OnTouched");

	ASliceableSkeleton_OnTouched_Params params;
	params.TouchedComponent = TouchedComponent;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.TouchType = TouchType;
	params.Location = Location;
	params.ContactVelocity = ContactVelocity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableSkeleton.OnMeshSliced
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 CentreOfSlice                  (Parm, IsPlainOldData)
// TArray<struct FVector>         CutPoints                      (Parm, ZeroConstructor)
// class UParticleSystem*         SliceBurstPFX                  (Parm, ZeroConstructor, IsPlainOldData)
// class USliceableMeshComponent* MeshA                          (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class USliceableMeshComponent* MeshB                          (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void ASliceableSkeleton::OnMeshSliced(const struct FVector& CentreOfSlice, TArray<struct FVector> CutPoints, class UParticleSystem* SliceBurstPFX, class USliceableMeshComponent* MeshA, class USliceableMeshComponent* MeshB)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableSkeleton.OnMeshSliced");

	ASliceableSkeleton_OnMeshSliced_Params params;
	params.CentreOfSlice = CentreOfSlice;
	params.CutPoints = CutPoints;
	params.SliceBurstPFX = SliceBurstPFX;
	params.MeshA = MeshA;
	params.MeshB = MeshB;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableSkeleton.OnHitAudio
// (Final, Native, Public, HasDefaults)
// Parameters:
// class UPrimitiveComponent*     OtherComponent                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 HitImpulse                     (Parm, IsPlainOldData)
// struct FVector                 HitLocation                    (Parm, IsPlainOldData)

void ASliceableSkeleton::OnHitAudio(class UPrimitiveComponent* OtherComponent, const struct FVector& HitImpulse, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableSkeleton.OnHitAudio");

	ASliceableSkeleton_OnHitAudio_Params params;
	params.OtherComponent = OtherComponent;
	params.HitImpulse = HitImpulse;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableSkeleton.OnHit
// (Final, Native, Public, HasOutParms, HasDefaults)
// Parameters:
// class UPrimitiveComponent*     HitComp                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 NormalImpulse                  (Parm, IsPlainOldData)
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void ASliceableSkeleton::OnHit(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableSkeleton.OnHit");

	ASliceableSkeleton_OnHit_Params params;
	params.HitComp = HitComp;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.NormalImpulse = NormalImpulse;
	params.Hit = Hit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableSkeleton.Kill
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bApplySliceImpulse             (Parm, ZeroConstructor, IsPlainOldData)

void ASliceableSkeleton::Kill(bool bApplySliceImpulse)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableSkeleton.Kill");

	ASliceableSkeleton_Kill_Params params;
	params.bApplySliceImpulse = bApplySliceImpulse;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableSkeleton.IsBoneSliceable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ASliceableSkeleton::IsBoneSliceable(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableSkeleton.IsBoneSliceable");

	ASliceableSkeleton_IsBoneSliceable_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.SliceableSkeleton.GetSkeletonOrientation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<ESkeletonOrientation> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TEnumAsByte<ESkeletonOrientation> ASliceableSkeleton::GetSkeletonOrientation()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableSkeleton.GetSkeletonOrientation");

	ASliceableSkeleton_GetSkeletonOrientation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.SliceableSkeleton.EndCut
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                  CuttingActor                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 BladePointingDirection         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void ASliceableSkeleton::EndCut(class AActor* CuttingActor, const struct FVector& BladePointingDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableSkeleton.EndCut");

	ASliceableSkeleton_EndCut_Params params;
	params.CuttingActor = CuttingActor;
	params.BladePointingDirection = BladePointingDirection;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableSkeletonPart.ReceiveRagdoll
// (Event, Public, BlueprintEvent)

void ASliceableSkeletonPart::ReceiveRagdoll()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableSkeletonPart.ReceiveRagdoll");

	ASliceableSkeletonPart_ReceiveRagdoll_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableSkeletonPart.ReceiveDissolveAndDestroy
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ASliceableSkeletonPart::ReceiveDissolveAndDestroy()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableSkeletonPart.ReceiveDissolveAndDestroy");

	ASliceableSkeletonPart_ReceiveDissolveAndDestroy_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableSkeletonPart.Ragdoll
// (Final, Native, Public, BlueprintCallable)

void ASliceableSkeletonPart::Ragdoll()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableSkeletonPart.Ragdoll");

	ASliceableSkeletonPart_Ragdoll_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableSkeletonPart.OnTouched
// (Final, Native, Public, HasDefaults)
// Parameters:
// class UPrimitiveComponent*     TouchedComponent               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// EHandTouch                     TouchType                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, IsPlainOldData)
// struct FVector                 ContactVelocity                (Parm, IsPlainOldData)

void ASliceableSkeletonPart::OnTouched(class UPrimitiveComponent* TouchedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, EHandTouch TouchType, const struct FVector& Location, const struct FVector& ContactVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableSkeletonPart.OnTouched");

	ASliceableSkeletonPart_OnTouched_Params params;
	params.TouchedComponent = TouchedComponent;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.TouchType = TouchType;
	params.Location = Location;
	params.ContactVelocity = ContactVelocity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableSkeletonPart.OnHitAudio
// (Final, Native, Public, HasDefaults)
// Parameters:
// class UPrimitiveComponent*     OtherComponent                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 HitImpulse                     (Parm, IsPlainOldData)
// struct FVector                 HitLocation                    (Parm, IsPlainOldData)

void ASliceableSkeletonPart::OnHitAudio(class UPrimitiveComponent* OtherComponent, const struct FVector& HitImpulse, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableSkeletonPart.OnHitAudio");

	ASliceableSkeletonPart_OnHitAudio_Params params;
	params.OtherComponent = OtherComponent;
	params.HitImpulse = HitImpulse;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableSkeletonPart.OnHit
// (Final, Native, Public, HasOutParms, HasDefaults)
// Parameters:
// class UPrimitiveComponent*     HitComp                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 NormalImpulse                  (Parm, IsPlainOldData)
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void ASliceableSkeletonPart::OnHit(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableSkeletonPart.OnHit");

	ASliceableSkeletonPart_OnHit_Params params;
	params.HitComp = HitComp;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.NormalImpulse = NormalImpulse;
	params.Hit = Hit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SliceableSkeletonPart.CopyPoseFromSkeletalMesh
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*  SkeletalMeshToCopy             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void ASliceableSkeletonPart::CopyPoseFromSkeletalMesh(class USkeletalMeshComponent* SkeletalMeshToCopy)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SliceableSkeletonPart.CopyPoseFromSkeletalMesh");

	ASliceableSkeletonPart_CopyPoseFromSkeletalMesh_Params params;
	params.SkeletalMeshToCopy = SkeletalMeshToCopy;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SlicingPort.SlicingToolUnsocketed
// (Final, Native, Protected)
// Parameters:
// class AActor*                  SocketedForceItem              (Parm, ZeroConstructor, IsPlainOldData)

void USlicingPort::SlicingToolUnsocketed(class AActor* SocketedForceItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SlicingPort.SlicingToolUnsocketed");

	USlicingPort_SlicingToolUnsocketed_Params params;
	params.SocketedForceItem = SocketedForceItem;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SlicingPort.SlicingToolSocketed
// (Final, Native, Protected)
// Parameters:
// class AActor*                  SocketedForceItem              (Parm, ZeroConstructor, IsPlainOldData)

void USlicingPort::SlicingToolSocketed(class AActor* SocketedForceItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SlicingPort.SlicingToolSocketed");

	USlicingPort_SlicingToolSocketed_Params params;
	params.SocketedForceItem = SocketedForceItem;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SlicingPort.SetPoseableMeshComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPoseableMeshComponent*  PoseableMesh                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void USlicingPort::SetPoseableMeshComponent(class UPoseableMeshComponent* PoseableMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SlicingPort.SetPoseableMeshComponent");

	USlicingPort_SetPoseableMeshComponent_Params params;
	params.PoseableMesh = PoseableMesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SlicingPort.GetPoseableMeshComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UPoseableMeshComponent*  ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UPoseableMeshComponent* USlicingPort::GetPoseableMeshComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SlicingPort.GetPoseableMeshComponent");

	USlicingPort_GetPoseableMeshComponent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.SMMenuButtonComponent.SetMaterialBasedOnState
// (Final, Native, Public, BlueprintCallable)

void USMMenuButtonComponent::SetMaterialBasedOnState()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SMMenuButtonComponent.SetMaterialBasedOnState");

	USMMenuButtonComponent_SetMaterialBasedOnState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SplineFlightComponent.SetLoopSpline
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USplineComponent*        Loop                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void USplineFlightComponent::SetLoopSpline(class USplineComponent* Loop)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SplineFlightComponent.SetLoopSpline");

	USplineFlightComponent_SetLoopSpline_Params params;
	params.Loop = Loop;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SplineFlightComponent.SetCustomSplineComponents
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USplineComponent*        A                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class USplineComponent*        R                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void USplineFlightComponent::SetCustomSplineComponents(class USplineComponent* A, class USplineComponent* R)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SplineFlightComponent.SetCustomSplineComponents");

	USplineFlightComponent_SetCustomSplineComponents_Params params;
	params.A = A;
	params.R = R;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SplineFlightComponent.QueueStartAttack
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Loc                            (Parm, IsPlainOldData)
// struct FVector                 Facing                         (Parm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool USplineFlightComponent::QueueStartAttack(const struct FVector& Loc, const struct FVector& Facing)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SplineFlightComponent.QueueStartAttack");

	USplineFlightComponent_QueueStartAttack_Params params;
	params.Loc = Loc;
	params.Facing = Facing;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.SplineFlightComponent.QueueLaunchToLoopSpline
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USplineComponent*        Loop                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool USplineFlightComponent::QueueLaunchToLoopSpline(class USplineComponent* Loop)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SplineFlightComponent.QueueLaunchToLoopSpline");

	USplineFlightComponent_QueueLaunchToLoopSpline_Params params;
	params.Loop = Loop;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.SplineFlightComponent.QueueFlyToLoopSplineWithCustomPath
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USplineComponent*        Loop                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class USplineComponent*        customPath                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool USplineFlightComponent::QueueFlyToLoopSplineWithCustomPath(class USplineComponent* Loop, class USplineComponent* customPath)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SplineFlightComponent.QueueFlyToLoopSplineWithCustomPath");

	USplineFlightComponent_QueueFlyToLoopSplineWithCustomPath_Params params;
	params.Loop = Loop;
	params.customPath = customPath;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.SplineFlightComponent.QueueFlyToLoopSpline
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USplineComponent*        Loop                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool USplineFlightComponent::QueueFlyToLoopSpline(class USplineComponent* Loop)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SplineFlightComponent.QueueFlyToLoopSpline");

	USplineFlightComponent_QueueFlyToLoopSpline_Params params;
	params.Loop = Loop;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.SquadAttack.OnAllMembersReadyToAttack
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ASquadAttack::OnAllMembersReadyToAttack()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SquadAttack.OnAllMembersReadyToAttack");

	ASquadAttack_OnAllMembersReadyToAttack_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SquadAttack.GetAttackSquadRequests
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// TArray<struct FAttackSquadEnemyRequest> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<struct FAttackSquadEnemyRequest> ASquadAttack::GetAttackSquadRequests()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SquadAttack.GetAttackSquadRequests");

	ASquadAttack_GetAttackSquadRequests_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.SquadAttack.AttackEnds
// (Final, Native, Public, BlueprintCallable)

void ASquadAttack::AttackEnds()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SquadAttack.AttackEnds");

	ASquadAttack_AttackEnds_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SquadAttack.AttackAboutToEnd
// (Final, Native, Public, BlueprintCallable)

void ASquadAttack::AttackAboutToEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SquadAttack.AttackAboutToEnd");

	ASquadAttack_AttackAboutToEnd_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SquadAttack.AddNewRequest
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<struct FAttackSquadEnemyRequest> RequestArray                   (Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FScriptDelegate         SelectionPredicate             (Parm, ZeroConstructor)
// int                            MinEnemiesToRequest            (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaxEnemiesToRequest            (Parm, ZeroConstructor, IsPlainOldData)

void ASquadAttack::AddNewRequest(const struct FScriptDelegate& SelectionPredicate, int MinEnemiesToRequest, int MaxEnemiesToRequest, TArray<struct FAttackSquadEnemyRequest>* RequestArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SquadAttack.AddNewRequest");

	ASquadAttack_AddNewRequest_Params params;
	params.SelectionPredicate = SelectionPredicate;
	params.MinEnemiesToRequest = MinEnemiesToRequest;
	params.MaxEnemiesToRequest = MaxEnemiesToRequest;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (RequestArray != nullptr)
		*RequestArray = params.RequestArray;
}


// Function WKND.SquadOrders.ValidateSquad
// (Final, Native, Public, BlueprintCallable)

void USquadOrders::ValidateSquad()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SquadOrders.ValidateSquad");

	USquadOrders_ValidateSquad_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SquadOrders.TickSquad
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                          deltatTime                     (Parm, ZeroConstructor, IsPlainOldData)

void USquadOrders::TickSquad(float deltatTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SquadOrders.TickSquad");

	USquadOrders_TickSquad_Params params;
	params.deltatTime = deltatTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SquadOrders.StopSquadOrders
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void USquadOrders::StopSquadOrders()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SquadOrders.StopSquadOrders");

	USquadOrders_StopSquadOrders_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SquadOrders.StartSquadOrders
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void USquadOrders::StartSquadOrders()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SquadOrders.StartSquadOrders");

	USquadOrders_StartSquadOrders_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SquadOrders.SpawnAIFromClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ATargetPoint*            spawnTarget                    (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  PawnClass                      (Parm, ZeroConstructor, IsPlainOldData)
// class UBehaviorTree*           BehaviorTree                   (Parm, ZeroConstructor, IsPlainOldData)
// class APawn*                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APawn* USquadOrders::SpawnAIFromClass(class ATargetPoint* spawnTarget, class UClass* PawnClass, class UBehaviorTree* BehaviorTree)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SquadOrders.SpawnAIFromClass");

	USquadOrders_SpawnAIFromClass_Params params;
	params.spawnTarget = spawnTarget;
	params.PawnClass = PawnClass;
	params.BehaviorTree = BehaviorTree;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.SquadOrders.ShowSphere
// (Final, Native, Protected, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FColor                  col                            (Parm, IsPlainOldData)

void USquadOrders::ShowSphere(class AActor* Actor, const struct FColor& col)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SquadOrders.ShowSphere");

	USquadOrders_ShowSphere_Params params;
	params.Actor = Actor;
	params.col = col;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SquadOrders.RemoveFromSquad
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  toRemove                       (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* USquadOrders::RemoveFromSquad(class AActor* toRemove)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SquadOrders.RemoveFromSquad");

	USquadOrders_RemoveFromSquad_Params params;
	params.toRemove = toRemove;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.SquadOrders.OnRemoved
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AActor*                  removed                        (Parm, ZeroConstructor, IsPlainOldData)

void USquadOrders::OnRemoved(class AActor* removed)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SquadOrders.OnRemoved");

	USquadOrders_OnRemoved_Params params;
	params.removed = removed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SquadOrders.OnAdded
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AActor*                  added                          (Parm, ZeroConstructor, IsPlainOldData)

void USquadOrders::OnAdded(class AActor* added)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SquadOrders.OnAdded");

	USquadOrders_OnAdded_Params params;
	params.added = added;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.SquadOrders.GetSquadMembers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class AActor*>          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class AActor*> USquadOrders::GetSquadMembers()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SquadOrders.GetSquadMembers");

	USquadOrders_GetSquadMembers_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.SquadOrders.GetSquadMember
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            Index                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* USquadOrders::GetSquadMember(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SquadOrders.GetSquadMember");

	USquadOrders_GetSquadMember_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.SquadOrders.GetRandomSquadMember
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* USquadOrders::GetRandomSquadMember()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SquadOrders.GetRandomSquadMember");

	USquadOrders_GetRandomSquadMember_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.SquadOrders.GetClosestSquadMemberTo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ATargetPoint*            TargetPoint                    (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* USquadOrders::GetClosestSquadMemberTo(class ATargetPoint* TargetPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SquadOrders.GetClosestSquadMemberTo");

	USquadOrders_GetClosestSquadMemberTo_Params params;
	params.TargetPoint = TargetPoint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.SquadOrders.CountSquadSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int USquadOrders::CountSquadSize()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SquadOrders.CountSquadSize");

	USquadOrders_CountSquadSize_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.SquadOrders.AddToSquad
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  toAdd                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool USquadOrders::AddToSquad(class AActor* toAdd)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.SquadOrders.AddToSquad");

	USquadOrders_AddToSquad_Params params;
	params.toAdd = toAdd;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.StartMenuActor.OnRestartGameButtonPressed
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FPressedButtonComponent RestartButton                  (ConstParm, Parm, OutParm, ReferenceParm)

void AStartMenuActor::OnRestartGameButtonPressed(const struct FPressedButtonComponent& RestartButton)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.StartMenuActor.OnRestartGameButtonPressed");

	AStartMenuActor_OnRestartGameButtonPressed_Params params;
	params.RestartButton = RestartButton;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.StartMenuActor.OnPlayGameButtonPressed
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FPressedButtonComponent PlayButton                     (ConstParm, Parm, OutParm, ReferenceParm)

void AStartMenuActor::OnPlayGameButtonPressed(const struct FPressedButtonComponent& PlayButton)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.StartMenuActor.OnPlayGameButtonPressed");

	AStartMenuActor_OnPlayGameButtonPressed_Params params;
	params.PlayButton = PlayButton;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.TelemetryManager.RegisterWaveStarted
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   WaveName                       (Parm, ZeroConstructor, IsPlainOldData)

void UTelemetryManager::RegisterWaveStarted(const struct FName& WaveName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.TelemetryManager.RegisterWaveStarted");

	UTelemetryManager_RegisterWaveStarted_Params params;
	params.WaveName = WaveName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.TelemetryManager.RegisterWaveFailed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   WaveName                       (Parm, ZeroConstructor, IsPlainOldData)

void UTelemetryManager::RegisterWaveFailed(const struct FName& WaveName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.TelemetryManager.RegisterWaveFailed");

	UTelemetryManager_RegisterWaveFailed_Params params;
	params.WaveName = WaveName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.TelemetryManager.RegisterWaveCompleted
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   WaveName                       (Parm, ZeroConstructor, IsPlainOldData)

void UTelemetryManager::RegisterWaveCompleted(const struct FName& WaveName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.TelemetryManager.RegisterWaveCompleted");

	UTelemetryManager_RegisterWaveCompleted_Params params;
	params.WaveName = WaveName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.TelemetryManager.RegisterTimeLimitExceeded
// (Final, Native, Public, BlueprintCallable)

void UTelemetryManager::RegisterTimeLimitExceeded()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.TelemetryManager.RegisterTimeLimitExceeded");

	UTelemetryManager_RegisterTimeLimitExceeded_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.TelemetryManager.RegisterDeath
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  DeadActor                      (Parm, ZeroConstructor, IsPlainOldData)

void UTelemetryManager::RegisterDeath(class AActor* DeadActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.TelemetryManager.RegisterDeath");

	UTelemetryManager_RegisterDeath_Params params;
	params.DeadActor = DeadActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.TelemetryManager.RegisterDamage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  HurtActor                      (Parm, ZeroConstructor, IsPlainOldData)

void UTelemetryManager::RegisterDamage(class AActor* HurtActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.TelemetryManager.RegisterDamage");

	UTelemetryManager_RegisterDamage_Params params;
	params.HurtActor = HurtActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ToolbeltSlotCollisionComponent.OnToolbeltSlotOverlapEnd
// (Final, Native, Private)
// Parameters:
// class UPrimitiveComponent*     OverlappedComponent            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            OtherBodyIndex                 (Parm, ZeroConstructor, IsPlainOldData)

void UToolbeltSlotCollisionComponent::OnToolbeltSlotOverlapEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ToolbeltSlotCollisionComponent.OnToolbeltSlotOverlapEnd");

	UToolbeltSlotCollisionComponent_OnToolbeltSlotOverlapEnd_Params params;
	params.OverlappedComponent = OverlappedComponent;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.ToolbeltSlotCollisionComponent.OnToolbeltSlotOverlapBegin
// (Final, Native, Private, HasOutParms)
// Parameters:
// class UPrimitiveComponent*     OverlappedComponent            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            OtherBodyIndex                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFromSweep                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepResult                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void UToolbeltSlotCollisionComponent::OnToolbeltSlotOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.ToolbeltSlotCollisionComponent.OnToolbeltSlotOverlapBegin");

	UToolbeltSlotCollisionComponent_OnToolbeltSlotOverlapBegin_Params params;
	params.OverlappedComponent = OverlappedComponent;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;
	params.bFromSweep = bFromSweep;
	params.SweepResult = SweepResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.TransformBufferManager.Update
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// float                          DeltaSeconds                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              CurrentTransform               (Parm, IsPlainOldData)

void UTransformBufferManager::Update(float DeltaSeconds, const struct FTransform& CurrentTransform)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.TransformBufferManager.Update");

	UTransformBufferManager_Update_Params params;
	params.DeltaSeconds = DeltaSeconds;
	params.CurrentTransform = CurrentTransform;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.TransformBufferManager.GetTotalTranslation
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UTransformBufferManager::GetTotalTranslation()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.TransformBufferManager.GetTotalTranslation");

	UTransformBufferManager_GetTotalTranslation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.TransformBufferManager.GetStartEndTranslation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector UTransformBufferManager::GetStartEndTranslation()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.TransformBufferManager.GetStartEndTranslation");

	UTransformBufferManager_GetStartEndTranslation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.TransformBufferManager.GetRegressedVelocity
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector UTransformBufferManager::GetRegressedVelocity()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.TransformBufferManager.GetRegressedVelocity");

	UTransformBufferManager_GetRegressedVelocity_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.TransformBufferManager.GetRegressedAngularVelocity
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector UTransformBufferManager::GetRegressedAngularVelocity()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.TransformBufferManager.GetRegressedAngularVelocity");

	UTransformBufferManager_GetRegressedAngularVelocity_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.TransformBufferManager.GetPointAlongBufferPath
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector UTransformBufferManager::GetPointAlongBufferPath(float Distance)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.TransformBufferManager.GetPointAlongBufferPath");

	UTransformBufferManager_GetPointAlongBufferPath_Params params;
	params.Distance = Distance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.TransformBufferManager.GetLastFrameVelocity
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector UTransformBufferManager::GetLastFrameVelocity()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.TransformBufferManager.GetLastFrameVelocity");

	UTransformBufferManager_GetLastFrameVelocity_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.TransformBufferManager.GetDirectTranslation
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UTransformBufferManager::GetDirectTranslation()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.TransformBufferManager.GetDirectTranslation");

	UTransformBufferManager_GetDirectTranslation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.TransformBufferManager.ClearBuffers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           Location                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           Velocity                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           AngularVelocity                (Parm, ZeroConstructor, IsPlainOldData)

void UTransformBufferManager::ClearBuffers(bool Location, bool Velocity, bool AngularVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.TransformBufferManager.ClearBuffers");

	UTransformBufferManager_ClearBuffers_Params params;
	params.Location = Location;
	params.Velocity = Velocity;
	params.AngularVelocity = AngularVelocity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.VaderCell_INPControllerComponent.SetCellState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<EVaderCell_State>  NewState                       (Parm, ZeroConstructor, IsPlainOldData)

void UVaderCell_INPControllerComponent::SetCellState(TEnumAsByte<EVaderCell_State> NewState)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VaderCell_INPControllerComponent.SetCellState");

	UVaderCell_INPControllerComponent_SetCellState_Params params;
	params.NewState = NewState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.VaderCell_INPControllerComponent.GetCellState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TEnumAsByte<EVaderCell_State>  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TEnumAsByte<EVaderCell_State> UVaderCell_INPControllerComponent::GetCellState()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VaderCell_INPControllerComponent.GetCellState");

	UVaderCell_INPControllerComponent_GetCellState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.VaderCell_INPControllerComponent.EanbleRePosition
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void UVaderCell_INPControllerComponent::EanbleRePosition(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VaderCell_INPControllerComponent.EanbleRePosition");

	UVaderCell_INPControllerComponent_EanbleRePosition_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.VaderCell_INPControllerComponent.EanbleReOrient
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void UVaderCell_INPControllerComponent::EanbleReOrient(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VaderCell_INPControllerComponent.EanbleReOrient");

	UVaderCell_INPControllerComponent_EanbleReOrient_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.VelocityTrackerBase.GetAverageVelocity
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector UVelocityTrackerBase::GetAverageVelocity()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VelocityTrackerBase.GetAverageVelocity");

	UVelocityTrackerBase_GetAverageVelocity_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.VelocityTrackerBase.GetAverageSpeedAwayFromTarget
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 Target                         (Parm, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UVelocityTrackerBase::GetAverageSpeedAwayFromTarget(const struct FVector& Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VelocityTrackerBase.GetAverageSpeedAwayFromTarget");

	UVelocityTrackerBase_GetAverageSpeedAwayFromTarget_Params params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.VRForceMotionController.PrepareToForceGrabItem
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UForceItemComponentBase* ForceItem                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UVRForceMotionController::PrepareToForceGrabItem(class UForceItemComponentBase* ForceItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VRForceMotionController.PrepareToForceGrabItem");

	UVRForceMotionController_PrepareToForceGrabItem_Params params;
	params.ForceItem = ForceItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.VRForceMotionController.PickBestTransformToGrabItem
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UForceItemComponentBase* ForceItem                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform UVRForceMotionController::PickBestTransformToGrabItem(class UForceItemComponentBase* ForceItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VRForceMotionController.PickBestTransformToGrabItem");

	UVRForceMotionController_PickBestTransformToGrabItem_Params params;
	params.ForceItem = ForceItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.VRForceMotionController.IsNearGrabbableObject
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVRForceMotionController::IsNearGrabbableObject()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VRForceMotionController.IsNearGrabbableObject");

	UVRForceMotionController_IsNearGrabbableObject_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.VRForceMotionController.IsHoldingParticularObject
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UForceItemComponentBase* ForceItem                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVRForceMotionController::IsHoldingParticularObject(class UForceItemComponentBase* ForceItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VRForceMotionController.IsHoldingParticularObject");

	UVRForceMotionController_IsHoldingParticularObject_Params params;
	params.ForceItem = ForceItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.VRForceMotionController.IsHoldingObject
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVRForceMotionController::IsHoldingObject()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VRForceMotionController.IsHoldingObject");

	UVRForceMotionController_IsHoldingObject_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.VRForceMotionController.IsControllerTracking
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVRForceMotionController::IsControllerTracking()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VRForceMotionController.IsControllerTracking");

	UVRForceMotionController_IsControllerTracking_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.VRForceMotionController.GetVelocityTracker
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UVelocityTrackerBase*    ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UVelocityTrackerBase* UVRForceMotionController::GetVelocityTracker()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VRForceMotionController.GetVelocityTracker");

	UVRForceMotionController_GetVelocityTracker_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.VRForceMotionController.GetMotionControllerHand
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EControllerHand                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EControllerHand UVRForceMotionController::GetMotionControllerHand()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VRForceMotionController.GetMotionControllerHand");

	UVRForceMotionController_GetMotionControllerHand_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.VRForceMotionController.GetGrabberRotation
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FRotator UVRForceMotionController::GetGrabberRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VRForceMotionController.GetGrabberRotation");

	UVRForceMotionController_GetGrabberRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.VRForceMotionController.GetGrabberLocation
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector UVRForceMotionController::GetGrabberLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VRForceMotionController.GetGrabberLocation");

	UVRForceMotionController_GetGrabberLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.VRForceMotionController.GetForcePowerAim
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*     ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UPrimitiveComponent* UVRForceMotionController::GetForcePowerAim()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VRForceMotionController.GetForcePowerAim");

	UVRForceMotionController_GetForcePowerAim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.VRForceMotionController.ControllerInputIndicatesGrab
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVRForceMotionController::ControllerInputIndicatesGrab()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VRForceMotionController.ControllerInputIndicatesGrab");

	UVRForceMotionController_ControllerInputIndicatesGrab_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.VRForcePawn.GetMotionControllerForHand
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EControllerHand                Hand                           (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* UVRForcePawn::GetMotionControllerForHand(EControllerHand Hand)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VRForcePawn.GetMotionControllerForHand");

	UVRForcePawn_GetMotionControllerForHand_Params params;
	params.Hand = Hand;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.VRForcePawn.GetForcePowerComponent
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UForcePowerComponentBase* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UForcePowerComponentBase* UVRForcePawn::GetForcePowerComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VRForcePawn.GetForcePowerComponent");

	UVRForcePawn_GetForcePowerComponent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.VRLocomotionComponent.SetTeleportVector
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 InTeleportVector               (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 OutResultingWorldTargetLocation (Parm, OutParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVRLocomotionComponent::SetTeleportVector(const struct FVector& InTeleportVector, struct FVector* OutResultingWorldTargetLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VRLocomotionComponent.SetTeleportVector");

	UVRLocomotionComponent_SetTeleportVector_Params params;
	params.InTeleportVector = InTeleportVector;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutResultingWorldTargetLocation != nullptr)
		*OutResultingWorldTargetLocation = params.OutResultingWorldTargetLocation;

	return params.ReturnValue;
}


// Function WKND.VRLocomotionComponent.SetAimTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*         Target                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   TargetSocket                   (Parm, ZeroConstructor, IsPlainOldData)

void UVRLocomotionComponent::SetAimTarget(class USceneComponent* Target, const struct FName& TargetSocket)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VRLocomotionComponent.SetAimTarget");

	UVRLocomotionComponent_SetAimTarget_Params params;
	params.Target = Target;
	params.TargetSocket = TargetSocket;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.VRLocomotionComponent.DoTeleport
// (Final, Native, Public, BlueprintCallable)

void UVRLocomotionComponent::DoTeleport()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VRLocomotionComponent.DoTeleport");

	UVRLocomotionComponent_DoTeleport_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.VRLocomotionComponent.ClearAimTarget
// (Final, Native, Public, BlueprintCallable)

void UVRLocomotionComponent::ClearAimTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VRLocomotionComponent.ClearAimTarget");

	UVRLocomotionComponent_ClearAimTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.VRUtils.StartQuestShaderPrecompile
// (Final, Native, Static, Public, BlueprintCallable)

void UVRUtils::STATIC_StartQuestShaderPrecompile()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VRUtils.StartQuestShaderPrecompile");

	UVRUtils_StartQuestShaderPrecompile_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.VRUtils.GetQuestShaderPrecompilePercent
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UVRUtils::STATIC_GetQuestShaderPrecompilePercent()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VRUtils.GetQuestShaderPrecompilePercent");

	UVRUtils_GetQuestShaderPrecompilePercent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.VRUtils.GetMotionControllerTrackingStatus
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            PlayerIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// EControllerHand                Hand                           (Parm, ZeroConstructor, IsPlainOldData)
// ETrackingStatus                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ETrackingStatus UVRUtils::STATIC_GetMotionControllerTrackingStatus(int PlayerIndex, EControllerHand Hand)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VRUtils.GetMotionControllerTrackingStatus");

	UVRUtils_GetMotionControllerTrackingStatus_Params params;
	params.PlayerIndex = PlayerIndex;
	params.Hand = Hand;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.VRUtils.GetMotionControllerOrientationAndPosition
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// int                            PlayerIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// EControllerHand                Hand                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Position                       (Parm, OutParm, IsPlainOldData)
// struct FRotator                Orientation                    (Parm, OutParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVRUtils::STATIC_GetMotionControllerOrientationAndPosition(class UObject* WorldContextObject, int PlayerIndex, EControllerHand Hand, struct FVector* Position, struct FRotator* Orientation)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VRUtils.GetMotionControllerOrientationAndPosition");

	UVRUtils_GetMotionControllerOrientationAndPosition_Params params;
	params.WorldContextObject = WorldContextObject;
	params.PlayerIndex = PlayerIndex;
	params.Hand = Hand;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Position != nullptr)
		*Position = params.Position;
	if (Orientation != nullptr)
		*Orientation = params.Orientation;

	return params.ReturnValue;
}


// Function WKND.VRUtils.GetHeadsetWorldTransform
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// int                            PlayerIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           allowToRevertToPlayerCamera    (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform UVRUtils::STATIC_GetHeadsetWorldTransform(class UObject* WorldContextObject, int PlayerIndex, bool allowToRevertToPlayerCamera)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VRUtils.GetHeadsetWorldTransform");

	UVRUtils_GetHeadsetWorldTransform_Params params;
	params.WorldContextObject = WorldContextObject;
	params.PlayerIndex = PlayerIndex;
	params.allowToRevertToPlayerCamera = allowToRevertToPlayerCamera;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.VRUtils.GetHeadsetWorldOrientationAndPosition
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// int                            PlayerIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Position                       (Parm, OutParm, IsPlainOldData)
// struct FRotator                Orientation                    (Parm, OutParm, IsPlainOldData)
// bool                           allowToRevertToPlayerCamera    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVRUtils::STATIC_GetHeadsetWorldOrientationAndPosition(class UObject* WorldContextObject, int PlayerIndex, bool allowToRevertToPlayerCamera, struct FVector* Position, struct FRotator* Orientation)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VRUtils.GetHeadsetWorldOrientationAndPosition");

	UVRUtils_GetHeadsetWorldOrientationAndPosition_Params params;
	params.WorldContextObject = WorldContextObject;
	params.PlayerIndex = PlayerIndex;
	params.allowToRevertToPlayerCamera = allowToRevertToPlayerCamera;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Position != nullptr)
		*Position = params.Position;
	if (Orientation != nullptr)
		*Orientation = params.Orientation;

	return params.ReturnValue;
}


// Function WKND.VRUtils.GetHeadsetOrientationAndPosition
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// int                            PlayerIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Position                       (Parm, OutParm, IsPlainOldData)
// struct FRotator                Orientation                    (Parm, OutParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVRUtils::STATIC_GetHeadsetOrientationAndPosition(class UObject* WorldContextObject, int PlayerIndex, struct FVector* Position, struct FRotator* Orientation)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VRUtils.GetHeadsetOrientationAndPosition");

	UVRUtils_GetHeadsetOrientationAndPosition_Params params;
	params.WorldContextObject = WorldContextObject;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Position != nullptr)
		*Position = params.Position;
	if (Orientation != nullptr)
		*Orientation = params.Orientation;

	return params.ReturnValue;
}


// Function WKND.VRUtils.GetHeadsetLocalTransform
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// int                            PlayerIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform UVRUtils::STATIC_GetHeadsetLocalTransform(class UObject* WorldContextObject, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VRUtils.GetHeadsetLocalTransform");

	UVRUtils_GetHeadsetLocalTransform_Params params;
	params.WorldContextObject = WorldContextObject;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.VRUtils.EnableFoveatedRenderMask
// (Final, Native, Static, Public, BlueprintCallable)

void UVRUtils::STATIC_EnableFoveatedRenderMask()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VRUtils.EnableFoveatedRenderMask");

	UVRUtils_EnableFoveatedRenderMask_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.VRUtils.DisableFoveatedRenderMask
// (Final, Native, Static, Public, BlueprintCallable)

void UVRUtils::STATIC_DisableFoveatedRenderMask()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VRUtils.DisableFoveatedRenderMask");

	UVRUtils_DisableFoveatedRenderMask_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.VRWidgetInterface.Touch
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EControllerHand                Hand                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVRWidgetInterface::Touch(EControllerHand Hand)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VRWidgetInterface.Touch");

	UVRWidgetInterface_Touch_Params params;
	params.Hand = Hand;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.VRWidgetInterface.StartHover
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVRWidgetInterface::StartHover()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VRWidgetInterface.StartHover");

	UVRWidgetInterface_StartHover_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.VRWidgetInterface.EndHover
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVRWidgetInterface::EndHover()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.VRWidgetInterface.EndHover");

	UVRWidgetInterface_EndHover_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WeaponInteractivityInterface.UsesCuttingFX
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWeaponInteractivityInterface::UsesCuttingFX()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WeaponInteractivityInterface.UsesCuttingFX");

	UWeaponInteractivityInterface_UsesCuttingFX_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WeaponInteractivityInterface.OnUpdateCut
// (Native, Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                  CuttingActor                   (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     CutComponent                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 CutEntryLocation               (Parm, IsPlainOldData)
// struct FVector                 CutEntryNormal                 (Parm, IsPlainOldData)
// struct FVector2D               CollisionUV                    (Parm, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 CutExitLocation                (Parm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWeaponInteractivityInterface::OnUpdateCut(class AActor* CuttingActor, class UPrimitiveComponent* CutComponent, const struct FVector& CutEntryLocation, const struct FVector& CutEntryNormal, const struct FVector2D& CollisionUV, const struct FName& BoneName, const struct FVector& CutExitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WeaponInteractivityInterface.OnUpdateCut");

	UWeaponInteractivityInterface_OnUpdateCut_Params params;
	params.CuttingActor = CuttingActor;
	params.CutComponent = CutComponent;
	params.CutEntryLocation = CutEntryLocation;
	params.CutEntryNormal = CutEntryNormal;
	params.CollisionUV = CollisionUV;
	params.BoneName = BoneName;
	params.CutExitLocation = CutExitLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WeaponInteractivityInterface.OnStartCut
// (Native, Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                  CuttingActor                   (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     CutComponent                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 CutEntryLocation               (Parm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWeaponInteractivityInterface::OnStartCut(class AActor* CuttingActor, class UPrimitiveComponent* CutComponent, const struct FName& BoneName, const struct FVector& CutEntryLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WeaponInteractivityInterface.OnStartCut");

	UWeaponInteractivityInterface_OnStartCut_Params params;
	params.CuttingActor = CuttingActor;
	params.CutComponent = CutComponent;
	params.BoneName = BoneName;
	params.CutEntryLocation = CutEntryLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WeaponInteractivityInterface.OnEndCut
// (Native, Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                  CuttingActor                   (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     CutComponent                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 BladeDirection                 (Parm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWeaponInteractivityInterface::OnEndCut(class AActor* CuttingActor, class UPrimitiveComponent* CutComponent, const struct FVector& BladeDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WeaponInteractivityInterface.OnEndCut");

	UWeaponInteractivityInterface_OnEndCut_Params params;
	params.CuttingActor = CuttingActor;
	params.CutComponent = CutComponent;
	params.BladeDirection = BladeDirection;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WeaponMotionComponent.GetIsEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWeaponMotionComponent::GetIsEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WeaponMotionComponent.GetIsEnabled");

	UWeaponMotionComponent_GetIsEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WeaponMotionComponent.Enable
// (Native, Public, BlueprintCallable)
// Parameters:
// class ULightsaberBladeComponent* Blade                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UWeaponMotionComponent::Enable(class ULightsaberBladeComponent* Blade)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WeaponMotionComponent.Enable");

	UWeaponMotionComponent_Enable_Params params;
	params.Blade = Blade;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WeaponMotionComponent.Disable
// (Native, Public, BlueprintCallable)

void UWeaponMotionComponent::Disable()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WeaponMotionComponent.Disable");

	UWeaponMotionComponent_Disable_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDAnimInstance.GetElbows
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTransform              LeftWrist                      (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FTransform              RightWrist                     (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 LeftElbow                      (Parm, OutParm, IsPlainOldData)
// struct FVector                 RightElbow                     (Parm, OutParm, IsPlainOldData)

void UWKNDAnimInstance::GetElbows(const struct FTransform& LeftWrist, const struct FTransform& RightWrist, struct FVector* LeftElbow, struct FVector* RightElbow)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDAnimInstance.GetElbows");

	UWKNDAnimInstance_GetElbows_Params params;
	params.LeftWrist = LeftWrist;
	params.RightWrist = RightWrist;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LeftElbow != nullptr)
		*LeftElbow = params.LeftElbow;
	if (RightElbow != nullptr)
		*RightElbow = params.RightElbow;
}


// Function WKND.WKNDAttackPattern.OnAttackPatternStopped
// (Event, Public, BlueprintEvent)

void UWKNDAttackPattern::OnAttackPatternStopped()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDAttackPattern.OnAttackPatternStopped");

	UWKNDAttackPattern_OnAttackPatternStopped_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDAttackPattern.OnAttackPatternStarted
// (Event, Public, BlueprintEvent)

void UWKNDAttackPattern::OnAttackPatternStarted()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDAttackPattern.OnAttackPatternStarted");

	UWKNDAttackPattern_OnAttackPatternStarted_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDAttackPattern.EndAttackPattern
// (Final, Native, Public, BlueprintCallable)

void UWKNDAttackPattern::EndAttackPattern()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDAttackPattern.EndAttackPattern");

	UWKNDAttackPattern_EndAttackPattern_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDAttackPattern.DrawSphere
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Location                       (Parm, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            Segments                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FColor                  col                            (Parm, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDAttackPattern::DrawSphere(const struct FVector& Location, float Radius, int Segments, const struct FColor& col, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDAttackPattern.DrawSphere");

	UWKNDAttackPattern_DrawSphere_Params params;
	params.Location = Location;
	params.Radius = Radius;
	params.Segments = Segments;
	params.col = col;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDAttackPatternComponent.StopAttackPattern
// (Final, Native, Public, BlueprintCallable)

void UWKNDAttackPatternComponent::StopAttackPattern()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDAttackPatternComponent.StopAttackPattern");

	UWKNDAttackPatternComponent_StopAttackPattern_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDAttackPatternComponent.StartAttackPattern
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                  pattern                        (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  TargetActor                    (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDAttackPatternComponent::StartAttackPattern(class UClass* pattern, class AActor* TargetActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDAttackPatternComponent.StartAttackPattern");

	UWKNDAttackPatternComponent_StartAttackPattern_Params params;
	params.pattern = pattern;
	params.TargetActor = TargetActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDAttackPatternComponent.HasAttackPattern
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDAttackPatternComponent::HasAttackPattern()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDAttackPatternComponent.HasAttackPattern");

	UWKNDAttackPatternComponent_HasAttackPattern_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGunComponent.ShootAtVector
// (Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 targetVector                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// TEnumAsByte<EShotSpecifier>    specifier                      (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDGunComponent::ShootAtVector(const struct FVector& targetVector, TEnumAsByte<EShotSpecifier> specifier)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGunComponent.ShootAtVector");

	UWKNDGunComponent_ShootAtVector_Params params;
	params.targetVector = targetVector;
	params.specifier = specifier;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGunComponent.ShootAtActor
// (Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  TargetActor                    (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EShotSpecifier>    specifier                      (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EActorSide>        side                           (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDGunComponent::ShootAtActor(class AActor* TargetActor, TEnumAsByte<EShotSpecifier> specifier, TEnumAsByte<EActorSide> side)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGunComponent.ShootAtActor");

	UWKNDGunComponent_ShootAtActor_Params params;
	params.TargetActor = TargetActor;
	params.specifier = specifier;
	params.side = side;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGunComponent.CancelPendingShots
// (Native, Public, BlueprintCallable)

void UWKNDGunComponent::CancelPendingShots()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGunComponent.CancelPendingShots");

	UWKNDGunComponent_CancelPendingShots_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDBlasterShot.StartStretch
// (Final, Native, Public, BlueprintCallable)

void AWKNDBlasterShot::StartStretch()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDBlasterShot.StartStretch");

	AWKNDBlasterShot_StartStretch_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDCameraComponent.ToggleForcePosition
// (Final, Native, Public, BlueprintCallable)

void UWKNDCameraComponent::ToggleForcePosition()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDCameraComponent.ToggleForcePosition");

	UWKNDCameraComponent_ToggleForcePosition_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDCameraComponent.SetPlayerPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Position                       (Parm, IsPlainOldData)

void UWKNDCameraComponent::SetPlayerPosition(const struct FVector& Position)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDCameraComponent.SetPlayerPosition");

	UWKNDCameraComponent_SetPlayerPosition_Params params;
	params.Position = Position;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDCameraComponent.SetForcePosition
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bForce                         (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDCameraComponent::SetForcePosition(bool bForce)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDCameraComponent.SetForcePosition");

	UWKNDCameraComponent_SetForcePosition_Params params;
	params.bForce = bForce;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDCameraComponent.ResetVR
// (Final, Native, Public)

void UWKNDCameraComponent::ResetVR()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDCameraComponent.ResetVR");

	UWKNDCameraComponent_ResetVR_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDCheckpointTeleporter.SetTeleporterState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ECheckpointTeleporterState     NewState                       (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDCheckpointTeleporter::SetTeleporterState(ECheckpointTeleporterState NewState)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDCheckpointTeleporter.SetTeleporterState");

	AWKNDCheckpointTeleporter_SetTeleporterState_Params params;
	params.NewState = NewState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDCheckpointTeleporter.PerformTeleport
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AWKNDCheckpointTeleporter::PerformTeleport()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDCheckpointTeleporter.PerformTeleport");

	AWKNDCheckpointTeleporter_PerformTeleport_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDCheckpointTeleporter.OnTeleportDone
// (Final, Native, Protected, BlueprintCallable)

void AWKNDCheckpointTeleporter::OnTeleportDone()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDCheckpointTeleporter.OnTeleportDone");

	AWKNDCheckpointTeleporter_OnTeleportDone_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDCheckpointTeleporter.OnCheckpointLevelSetupDone
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ALevelScriptActor*       LevelScriptActor               (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDCheckpointTeleporter::OnCheckpointLevelSetupDone(class ALevelScriptActor* LevelScriptActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDCheckpointTeleporter.OnCheckpointLevelSetupDone");

	AWKNDCheckpointTeleporter_OnCheckpointLevelSetupDone_Params params;
	params.LevelScriptActor = LevelScriptActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDCheckpointTeleporter.IsValidCheckpoint
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UWKNDProgressionCheckpointData* CheckpointData                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDCheckpointTeleporter::IsValidCheckpoint(class UWKNDProgressionCheckpointData* CheckpointData)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDCheckpointTeleporter.IsValidCheckpoint");

	AWKNDCheckpointTeleporter_IsValidCheckpoint_Params params;
	params.CheckpointData = CheckpointData;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDCheckpointTeleporter.InvokeCheckpointTeleport
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWKNDProgressionCheckpointData* CheckpointName                 (Parm, ZeroConstructor, IsPlainOldData)
// class ATargetPoint*            PlayerTargetPointOverride      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bShowLoadingScreen             (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDCheckpointTeleporter::InvokeCheckpointTeleport(class UWKNDProgressionCheckpointData* CheckpointName, class ATargetPoint* PlayerTargetPointOverride, bool bShowLoadingScreen)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDCheckpointTeleporter.InvokeCheckpointTeleport");

	AWKNDCheckpointTeleporter_InvokeCheckpointTeleport_Params params;
	params.CheckpointName = CheckpointName;
	params.PlayerTargetPointOverride = PlayerTargetPointOverride;
	params.bShowLoadingScreen = bShowLoadingScreen;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDCheckpointTeleporter.GetTargetPointFromCheckpoint
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UWKNDProgressionCheckpointData* Checkpoint                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFound                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class ATargetPoint*            PlayerTargetPoint              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class ATargetPoint*            ZoeTargetPoint                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void AWKNDCheckpointTeleporter::GetTargetPointFromCheckpoint(class UWKNDProgressionCheckpointData* Checkpoint, bool* bFound, class ATargetPoint** PlayerTargetPoint, class ATargetPoint** ZoeTargetPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDCheckpointTeleporter.GetTargetPointFromCheckpoint");

	AWKNDCheckpointTeleporter_GetTargetPointFromCheckpoint_Params params;
	params.Checkpoint = Checkpoint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bFound != nullptr)
		*bFound = params.bFound;
	if (PlayerTargetPoint != nullptr)
		*PlayerTargetPoint = params.PlayerTargetPoint;
	if (ZoeTargetPoint != nullptr)
		*ZoeTargetPoint = params.ZoeTargetPoint;
}


// Function WKND.WKNDCheckpointTeleporter.GetNextDebugCheckpoint
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// int                            CurrentIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIncrementIndex                (Parm, ZeroConstructor, IsPlainOldData)
// int                            FoundIndex                     (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FCheckpoint             FoundCheckpoint                (Parm, OutParm)

void AWKNDCheckpointTeleporter::GetNextDebugCheckpoint(int CurrentIndex, bool bIncrementIndex, int* FoundIndex, struct FCheckpoint* FoundCheckpoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDCheckpointTeleporter.GetNextDebugCheckpoint");

	AWKNDCheckpointTeleporter_GetNextDebugCheckpoint_Params params;
	params.CurrentIndex = CurrentIndex;
	params.bIncrementIndex = bIncrementIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (FoundIndex != nullptr)
		*FoundIndex = params.FoundIndex;
	if (FoundCheckpoint != nullptr)
		*FoundCheckpoint = params.FoundCheckpoint;
}


// Function WKND.WKNDCheckpointTeleporter.GetNextChapterCheckpoint
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// int                            CurrentIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIncrementIndex                (Parm, ZeroConstructor, IsPlainOldData)
// int                            FoundIndex                     (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FCheckpoint             FoundCheckpoint                (Parm, OutParm)

void AWKNDCheckpointTeleporter::GetNextChapterCheckpoint(int CurrentIndex, bool bIncrementIndex, int* FoundIndex, struct FCheckpoint* FoundCheckpoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDCheckpointTeleporter.GetNextChapterCheckpoint");

	AWKNDCheckpointTeleporter_GetNextChapterCheckpoint_Params params;
	params.CurrentIndex = CurrentIndex;
	params.bIncrementIndex = bIncrementIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (FoundIndex != nullptr)
		*FoundIndex = params.FoundIndex;
	if (FoundCheckpoint != nullptr)
		*FoundCheckpoint = params.FoundCheckpoint;
}


// Function WKND.WKNDCheckpointTeleporter.GetCheckpointByTargetPoint
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ATargetPoint*            TargetPoint                    (Parm, ZeroConstructor, IsPlainOldData)
// class UWKNDProgressionCheckpointData* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UWKNDProgressionCheckpointData* AWKNDCheckpointTeleporter::GetCheckpointByTargetPoint(class ATargetPoint* TargetPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDCheckpointTeleporter.GetCheckpointByTargetPoint");

	AWKNDCheckpointTeleporter_GetCheckpointByTargetPoint_Params params;
	params.TargetPoint = TargetPoint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDCheckpointTeleporter.GetCheckpointByName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FString                 NameString                     (Parm, ZeroConstructor)
// class UWKNDProgressionCheckpointData* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UWKNDProgressionCheckpointData* AWKNDCheckpointTeleporter::GetCheckpointByName(const struct FString& NameString)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDCheckpointTeleporter.GetCheckpointByName");

	AWKNDCheckpointTeleporter_GetCheckpointByName_Params params;
	params.NameString = NameString;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDCheckpointTeleporter.DoCheckpointTeleport
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWKNDProgressionCheckpointData* DesiredCheckpoint              (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDCheckpointTeleporter::DoCheckpointTeleport(class UWKNDProgressionCheckpointData* DesiredCheckpoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDCheckpointTeleporter.DoCheckpointTeleport");

	AWKNDCheckpointTeleporter_DoCheckpointTeleport_Params params;
	params.DesiredCheckpoint = DesiredCheckpoint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDComboDetectionComponent.ReportFinishedStrike
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDComboDetectionComponent::ReportFinishedStrike()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDComboDetectionComponent.ReportFinishedStrike");

	UWKNDComboDetectionComponent_ReportFinishedStrike_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDComboDetectionComponent.GetStrikingProperties
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FCompleteStrikeData     CurrentStrike                  (Parm, OutParm)

void UWKNDComboDetectionComponent::GetStrikingProperties(struct FCompleteStrikeData* CurrentStrike)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDComboDetectionComponent.GetStrikingProperties");

	UWKNDComboDetectionComponent_GetStrikingProperties_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CurrentStrike != nullptr)
		*CurrentStrike = params.CurrentStrike;
}


// Function WKND.WKNDComboDetectionComponent.GetCurrentStrikeId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UWKNDComboDetectionComponent::GetCurrentStrikeId()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDComboDetectionComponent.GetCurrentStrikeId");

	UWKNDComboDetectionComponent_GetCurrentStrikeId_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDComboDetectionComponent.ExternalComboReset
// (Final, Native, Public, BlueprintCallable)

void UWKNDComboDetectionComponent::ExternalComboReset()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDComboDetectionComponent.ExternalComboReset");

	UWKNDComboDetectionComponent_ExternalComboReset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDComboDetectionComponent.CompareStrikes
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D               StrikeOne                      (Parm, IsPlainOldData)
// struct FVector2D               StrikeTwo                      (Parm, IsPlainOldData)
// float                          AngleDifferenceReqd            (Parm, ZeroConstructor, IsPlainOldData)
// EComboAngleCheck               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EComboAngleCheck UWKNDComboDetectionComponent::STATIC_CompareStrikes(const struct FVector2D& StrikeOne, const struct FVector2D& StrikeTwo, float AngleDifferenceReqd)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDComboDetectionComponent.CompareStrikes");

	UWKNDComboDetectionComponent_CompareStrikes_Params params;
	params.StrikeOne = StrikeOne;
	params.StrikeTwo = StrikeTwo;
	params.AngleDifferenceReqd = AngleDifferenceReqd;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDComboTutor.VisualReset
// (Final, Native, Public)

void AWKNDComboTutor::VisualReset()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDComboTutor.VisualReset");

	AWKNDComboTutor_VisualReset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDComboTutor.UpdateVisibilityStatus
// (Final, Native, Public, BlueprintCallable)

void AWKNDComboTutor::UpdateVisibilityStatus()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDComboTutor.UpdateVisibilityStatus");

	AWKNDComboTutor_UpdateVisibilityStatus_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDComboTutor.UpdatePoseProgress
// (Final, Native, Public)

void AWKNDComboTutor::UpdatePoseProgress()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDComboTutor.UpdatePoseProgress");

	AWKNDComboTutor_UpdatePoseProgress_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDComboTutor.SetNewTutorial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWKNDTutorialData*       NewTutorial                    (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDComboTutor::SetNewTutorial(class UWKNDTutorialData* NewTutorial)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDComboTutor.SetNewTutorial");

	AWKNDComboTutor_SetNewTutorial_Params params;
	params.NewTutorial = NewTutorial;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDComboTutor.SetNewStudent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AWKNDPlayerPawn*         NewStudent                     (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDComboTutor::SetNewStudent(class AWKNDPlayerPawn* NewStudent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDComboTutor.SetNewStudent");

	AWKNDComboTutor_SetNewStudent_Params params;
	params.NewStudent = NewStudent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDComboTutor.SetInTutorialArea
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bInArea                        (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDComboTutor::SetInTutorialArea(bool bInArea)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDComboTutor.SetInTutorialArea");

	AWKNDComboTutor_SetInTutorialArea_Params params;
	params.bInArea = bInArea;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDComboTutor.ResetPostPose
// (Final, Native, Public)

void AWKNDComboTutor::ResetPostPose()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDComboTutor.ResetPostPose");

	AWKNDComboTutor_ResetPostPose_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDComboTutor.ResetPostCombo
// (Final, Native, Public)

void AWKNDComboTutor::ResetPostCombo()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDComboTutor.ResetPostCombo");

	AWKNDComboTutor_ResetPostCombo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDComboTutor.ResetCurrentTutorial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bResetStage                    (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDComboTutor::ResetCurrentTutorial(bool bResetStage)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDComboTutor.ResetCurrentTutorial");

	AWKNDComboTutor_ResetCurrentTutorial_Params params;
	params.bResetStage = bResetStage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDComboTutor.ProgressStrike
// (Final, Native, Public, BlueprintCallable)

void AWKNDComboTutor::ProgressStrike()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDComboTutor.ProgressStrike");

	AWKNDComboTutor_ProgressStrike_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDComboTutor.PreviewStrike
// (Final, Native, Public)
// Parameters:
// int                            UpcomingStrikeIndex            (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDComboTutor::PreviewStrike(int UpcomingStrikeIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDComboTutor.PreviewStrike");

	AWKNDComboTutor_PreviewStrike_Params params;
	params.UpcomingStrikeIndex = UpcomingStrikeIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDComboTutor.PreStrikePauseComplete
// (Final, Native, Public)

void AWKNDComboTutor::PreStrikePauseComplete()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDComboTutor.PreStrikePauseComplete");

	AWKNDComboTutor_PreStrikePauseComplete_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDComboTutor.PostStrikePauseStart
// (Final, Native, Public)

void AWKNDComboTutor::PostStrikePauseStart()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDComboTutor.PostStrikePauseStart");

	AWKNDComboTutor_PostStrikePauseStart_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDComboTutor.PostStrikeCheck
// (Final, Native, Public)

void AWKNDComboTutor::PostStrikeCheck()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDComboTutor.PostStrikeCheck");

	AWKNDComboTutor_PostStrikeCheck_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDComboTutor.NotifyComboStrikeStarted_Pose
// (Final, Native, Public, HasDefaults)
// Parameters:
// class UWKNDPlayerComboData*    Combo                          (Parm, ZeroConstructor, IsPlainOldData)
// class UWKNDPlayerStrikeData*   Strike                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            StrikeIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaxStrikeIndex                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, IsPlainOldData)

void AWKNDComboTutor::NotifyComboStrikeStarted_Pose(class UWKNDPlayerComboData* Combo, class UWKNDPlayerStrikeData* Strike, int StrikeIndex, int MaxStrikeIndex, const struct FVector& Location)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDComboTutor.NotifyComboStrikeStarted_Pose");

	AWKNDComboTutor_NotifyComboStrikeStarted_Pose_Params params;
	params.Combo = Combo;
	params.Strike = Strike;
	params.StrikeIndex = StrikeIndex;
	params.MaxStrikeIndex = MaxStrikeIndex;
	params.Location = Location;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDComboTutor.NotifyComboStrikeStarted_Combo
// (Final, Native, Public, HasDefaults)
// Parameters:
// class UWKNDPlayerComboData*    Combo                          (Parm, ZeroConstructor, IsPlainOldData)
// class UWKNDPlayerStrikeData*   Strike                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            StrikeIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaxStrikeIndex                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, IsPlainOldData)

void AWKNDComboTutor::NotifyComboStrikeStarted_Combo(class UWKNDPlayerComboData* Combo, class UWKNDPlayerStrikeData* Strike, int StrikeIndex, int MaxStrikeIndex, const struct FVector& Location)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDComboTutor.NotifyComboStrikeStarted_Combo");

	AWKNDComboTutor_NotifyComboStrikeStarted_Combo_Params params;
	params.Combo = Combo;
	params.Strike = Strike;
	params.StrikeIndex = StrikeIndex;
	params.MaxStrikeIndex = MaxStrikeIndex;
	params.Location = Location;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDComboTutor.NotifyComboStrikeEnded_Combo
// (Final, Native, Public, HasDefaults)
// Parameters:
// class UWKNDPlayerComboData*    Combo                          (Parm, ZeroConstructor, IsPlainOldData)
// class UWKNDPlayerStrikeData*   Strike                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            StrikeIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaxStrikeIndex                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, IsPlainOldData)
// bool                           bValid                         (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDComboTutor::NotifyComboStrikeEnded_Combo(class UWKNDPlayerComboData* Combo, class UWKNDPlayerStrikeData* Strike, int StrikeIndex, int MaxStrikeIndex, const struct FVector& Location, bool bValid)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDComboTutor.NotifyComboStrikeEnded_Combo");

	AWKNDComboTutor_NotifyComboStrikeEnded_Combo_Params params;
	params.Combo = Combo;
	params.Strike = Strike;
	params.StrikeIndex = StrikeIndex;
	params.MaxStrikeIndex = MaxStrikeIndex;
	params.Location = Location;
	params.bValid = bValid;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDComboTutor.NotifyComboPoseLost_Pose
// (Final, Native, Public)
// Parameters:
// class UWKNDPlayerPoseData*     Pose                           (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDComboTutor::NotifyComboPoseLost_Pose(class UWKNDPlayerPoseData* Pose)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDComboTutor.NotifyComboPoseLost_Pose");

	AWKNDComboTutor_NotifyComboPoseLost_Pose_Params params;
	params.Pose = Pose;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDComboTutor.NotifyComboPoseFound_Pose
// (Final, Native, Public)
// Parameters:
// class UWKNDPlayerPoseData*     Pose                           (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDComboTutor::NotifyComboPoseFound_Pose(class UWKNDPlayerPoseData* Pose)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDComboTutor.NotifyComboPoseFound_Pose");

	AWKNDComboTutor_NotifyComboPoseFound_Pose_Params params;
	params.Pose = Pose;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDComboTutor.NotifyComboAttemptStarted_Pose
// (Final, Native, Public)
// Parameters:
// class UWKNDPlayerPoseData*     Pose                           (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDComboTutor::NotifyComboAttemptStarted_Pose(class UWKNDPlayerPoseData* Pose)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDComboTutor.NotifyComboAttemptStarted_Pose");

	AWKNDComboTutor_NotifyComboAttemptStarted_Pose_Params params;
	params.Pose = Pose;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDComboTutor.NotifyComboAttemptStarted_Combo
// (Final, Native, Public)
// Parameters:
// class UWKNDPlayerPoseData*     Pose                           (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDComboTutor::NotifyComboAttemptStarted_Combo(class UWKNDPlayerPoseData* Pose)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDComboTutor.NotifyComboAttemptStarted_Combo");

	AWKNDComboTutor_NotifyComboAttemptStarted_Combo_Params params;
	params.Pose = Pose;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDComboTutor.NotifyComboAttemptEnded_Pose
// (Final, Native, Public)
// Parameters:
// EComboEndType                  EndType                        (Parm, ZeroConstructor, IsPlainOldData)
// class UWKNDPlayerComboData*    Combo                          (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDComboTutor::NotifyComboAttemptEnded_Pose(EComboEndType EndType, class UWKNDPlayerComboData* Combo)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDComboTutor.NotifyComboAttemptEnded_Pose");

	AWKNDComboTutor_NotifyComboAttemptEnded_Pose_Params params;
	params.EndType = EndType;
	params.Combo = Combo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDComboTutor.NotifyComboAttemptEnded_Combo
// (Final, Native, Public)
// Parameters:
// EComboEndType                  EndType                        (Parm, ZeroConstructor, IsPlainOldData)
// class UWKNDPlayerComboData*    Combo                          (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDComboTutor::NotifyComboAttemptEnded_Combo(EComboEndType EndType, class UWKNDPlayerComboData* Combo)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDComboTutor.NotifyComboAttemptEnded_Combo");

	AWKNDComboTutor_NotifyComboAttemptEnded_Combo_Params params;
	params.EndType = EndType;
	params.Combo = Combo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDComboTutor.EndPoseTracking
// (Final, Native, Public)
// Parameters:
// class UWKNDPlayerPoseData*     Pose                           (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDComboTutor::EndPoseTracking(class UWKNDPlayerPoseData* Pose)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDComboTutor.EndPoseTracking");

	AWKNDComboTutor_EndPoseTracking_Params params;
	params.Pose = Pose;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDComboTutor.CompletedPoseForTutorial
// (Final, Native, Public)

void AWKNDComboTutor::CompletedPoseForTutorial()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDComboTutor.CompletedPoseForTutorial");

	AWKNDComboTutor_CompletedPoseForTutorial_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDComboTutor.BeginPoseTracking
// (Final, Native, Public)
// Parameters:
// class UWKNDPlayerPoseData*     Pose                           (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDComboTutor::BeginPoseTracking(class UWKNDPlayerPoseData* Pose)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDComboTutor.BeginPoseTracking");

	AWKNDComboTutor_BeginPoseTracking_Params params;
	params.Pose = Pose;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDControllerTutorComponent.StartNewTutorial_Component
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            NewTutorial                    (Parm, ZeroConstructor, IsPlainOldData)
// class USceneComponent*         TgtComponent                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// float                          ArrowFadeWhenCloserThanDist    (Parm, ZeroConstructor, IsPlainOldData)
// float                          ArrowTotalFadeDist             (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDControllerTutorComponent::StartNewTutorial_Component(int NewTutorial, class USceneComponent* TgtComponent, float ArrowFadeWhenCloserThanDist, float ArrowTotalFadeDist)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDControllerTutorComponent.StartNewTutorial_Component");

	UWKNDControllerTutorComponent_StartNewTutorial_Component_Params params;
	params.NewTutorial = NewTutorial;
	params.TgtComponent = TgtComponent;
	params.ArrowFadeWhenCloserThanDist = ArrowFadeWhenCloserThanDist;
	params.ArrowTotalFadeDist = ArrowTotalFadeDist;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDControllerTutorComponent.StartNewTutorial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            NewTutorial                    (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  TgtActor                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ArrowFadeWhenCloserThanDist    (Parm, ZeroConstructor, IsPlainOldData)
// float                          ArrowTotalFadeDist             (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDControllerTutorComponent::StartNewTutorial(int NewTutorial, class AActor* TgtActor, float ArrowFadeWhenCloserThanDist, float ArrowTotalFadeDist)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDControllerTutorComponent.StartNewTutorial");

	UWKNDControllerTutorComponent_StartNewTutorial_Params params;
	params.NewTutorial = NewTutorial;
	params.TgtActor = TgtActor;
	params.ArrowFadeWhenCloserThanDist = ArrowFadeWhenCloserThanDist;
	params.ArrowTotalFadeDist = ArrowTotalFadeDist;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDControllerTutorComponent.SetTutorialVisible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bNewVisible                    (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDControllerTutorComponent::SetTutorialVisible(bool bNewVisible)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDControllerTutorComponent.SetTutorialVisible");

	UWKNDControllerTutorComponent_SetTutorialVisible_Params params;
	params.bNewVisible = bNewVisible;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDControllerTutorComponent.GetButtonMesh
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TEnumAsByte<ETutorialButton>   FetchButton                    (Parm, ZeroConstructor, IsPlainOldData)
// class UStaticMeshComponent*    ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UStaticMeshComponent* UWKNDControllerTutorComponent::GetButtonMesh(TEnumAsByte<ETutorialButton> FetchButton)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDControllerTutorComponent.GetButtonMesh");

	UWKNDControllerTutorComponent_GetButtonMesh_Params params;
	params.FetchButton = FetchButton;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDControllerTutorComponent.CompleteTutorial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            CompletedTutorial              (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDControllerTutorComponent::CompleteTutorial(int CompletedTutorial)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDControllerTutorComponent.CompleteTutorial");

	UWKNDControllerTutorComponent_CompleteTutorial_Params params;
	params.CompletedTutorial = CompletedTutorial;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDDamageComponent.GetDamageAmount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EDamageType                    DamageType                     (Parm, ZeroConstructor, IsPlainOldData)
// EDamageStrength                DamageStrength                 (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UWKNDDamageComponent::GetDamageAmount(EDamageType DamageType, EDamageStrength DamageStrength)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDDamageComponent.GetDamageAmount");

	UWKNDDamageComponent_GetDamageAmount_Params params;
	params.DamageType = DamageType;
	params.DamageStrength = DamageStrength;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDDialogueManager.WouldPlayNow
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int                            Priority                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           AllowConcurrent                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDDialogueManager::WouldPlayNow(int Priority, bool AllowConcurrent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDDialogueManager.WouldPlayNow");

	AWKNDDialogueManager_WouldPlayNow_Params params;
	params.Priority = Priority;
	params.AllowConcurrent = AllowConcurrent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDDialogueManager.WaitForNewNagInCurrentSequence
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ProtectAgainstMultipleCalls    (Parm, ZeroConstructor, IsPlainOldData)
// struct FLatentActionInfo       LatentInfo                     (Parm)

void AWKNDDialogueManager::WaitForNewNagInCurrentSequence(bool ProtectAgainstMultipleCalls, const struct FLatentActionInfo& LatentInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDDialogueManager.WaitForNewNagInCurrentSequence");

	AWKNDDialogueManager_WaitForNewNagInCurrentSequence_Params params;
	params.ProtectAgainstMultipleCalls = ProtectAgainstMultipleCalls;
	params.LatentInfo = LatentInfo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDDialogueManager.WaitForDialogueToStart
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FNTPlayingEvent         PlayingEvent                   (Parm)
// bool                           ProtectAgainstMultipleCalls    (Parm, ZeroConstructor, IsPlainOldData)
// struct FLatentActionInfo       LatentInfo                     (Parm)

void AWKNDDialogueManager::WaitForDialogueToStart(const struct FNTPlayingEvent& PlayingEvent, bool ProtectAgainstMultipleCalls, const struct FLatentActionInfo& LatentInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDDialogueManager.WaitForDialogueToStart");

	AWKNDDialogueManager_WaitForDialogueToStart_Params params;
	params.PlayingEvent = PlayingEvent;
	params.ProtectAgainstMultipleCalls = ProtectAgainstMultipleCalls;
	params.LatentInfo = LatentInfo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDDialogueManager.WaitForDialogueEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FNTPlayingEvent         PlayingEvent                   (Parm)
// bool                           ProtectAgainstMultipleCalls    (Parm, ZeroConstructor, IsPlainOldData)
// struct FLatentActionInfo       LatentInfo                     (Parm)

void AWKNDDialogueManager::WaitForDialogueEvent(const struct FNTPlayingEvent& PlayingEvent, bool ProtectAgainstMultipleCalls, const struct FLatentActionInfo& LatentInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDDialogueManager.WaitForDialogueEvent");

	AWKNDDialogueManager_WaitForDialogueEvent_Params params;
	params.PlayingEvent = PlayingEvent;
	params.ProtectAgainstMultipleCalls = ProtectAgainstMultipleCalls;
	params.LatentInfo = LatentInfo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDDialogueManager.WaitForCurrentNagSequence
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ProtectAgainstMultipleCalls    (Parm, ZeroConstructor, IsPlainOldData)
// struct FLatentActionInfo       LatentInfo                     (Parm)

void AWKNDDialogueManager::WaitForCurrentNagSequence(bool ProtectAgainstMultipleCalls, const struct FLatentActionInfo& LatentInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDDialogueManager.WaitForCurrentNagSequence");

	AWKNDDialogueManager_WaitForCurrentNagSequence_Params params;
	params.ProtectAgainstMultipleCalls = ProtectAgainstMultipleCalls;
	params.LatentInfo = LatentInfo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDDialogueManager.UpdateSpeakingActorTable
// (Final, Native, Protected, BlueprintCallable)

void AWKNDDialogueManager::UpdateSpeakingActorTable()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDDialogueManager.UpdateSpeakingActorTable");

	AWKNDDialogueManager_UpdateSpeakingActorTable_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDDialogueManager.StopNagDialogue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           StopCurrentNag                 (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDDialogueManager::StopNagDialogue(bool StopCurrentNag)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDDialogueManager.StopNagDialogue");

	AWKNDDialogueManager_StopNagDialogue_Params params;
	params.StopCurrentNag = StopCurrentNag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDDialogueManager.StopDialogue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            StopPriority                   (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDDialogueManager::StopDialogue(int StopPriority)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDDialogueManager.StopDialogue");

	AWKNDDialogueManager_StopDialogue_Params params;
	params.StopPriority = StopPriority;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDDialogueManager.StaticDialogueDebug
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FString                 Message                        (Parm, ZeroConstructor)

void AWKNDDialogueManager::STATIC_StaticDialogueDebug(const struct FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDDialogueManager.StaticDialogueDebug");

	AWKNDDialogueManager_StaticDialogueDebug_Params params;
	params.Message = Message;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDDialogueManager.StartNagDialogue
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FNagSequence            NagSequence                    (ConstParm, Parm, OutParm, ReferenceParm)
// class AActor*                  DefaultNagActorOverride        (Parm, ZeroConstructor, IsPlainOldData)
// struct FNTPlayingEvent         ReturnValue                    (Parm, OutParm, ReturnParm)

struct FNTPlayingEvent AWKNDDialogueManager::StartNagDialogue(const struct FNagSequence& NagSequence, class AActor* DefaultNagActorOverride)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDDialogueManager.StartNagDialogue");

	AWKNDDialogueManager_StartNagDialogue_Params params;
	params.NagSequence = NagSequence;
	params.DefaultNagActorOverride = DefaultNagActorOverride;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDDialogueManager.SetDialogueSocket
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   SpeakingBone                   (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDDialogueManager::SetDialogueSocket(class AActor* Actor, const struct FName& SpeakingBone)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDDialogueManager.SetDialogueSocket");

	AWKNDDialogueManager_SetDialogueSocket_Params params;
	params.Actor = Actor;
	params.SpeakingBone = SpeakingBone;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDDialogueManager.MakeDialogueRequest
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAkAudioEvent*           AkEvent                        (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            Priority                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          PostPlayDelay                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           AllowConcurrent                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           Queueable                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          SilentCueTime                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FDialogueRequest        ReturnValue                    (Parm, OutParm, ReturnParm)

struct FDialogueRequest AWKNDDialogueManager::MakeDialogueRequest(class UAkAudioEvent* AkEvent, class AActor* Actor, int Priority, float PostPlayDelay, bool AllowConcurrent, bool Queueable, float SilentCueTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDDialogueManager.MakeDialogueRequest");

	AWKNDDialogueManager_MakeDialogueRequest_Params params;
	params.AkEvent = AkEvent;
	params.Actor = Actor;
	params.Priority = Priority;
	params.PostPlayDelay = PostPlayDelay;
	params.AllowConcurrent = AllowConcurrent;
	params.Queueable = Queueable;
	params.SilentCueTime = SilentCueTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDDialogueManager.IsNagging
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDDialogueManager::IsNagging()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDDialogueManager.IsNagging");

	AWKNDDialogueManager_IsNagging_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDDialogueManager.GetSpeakingActor
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FName                   RoleName                       (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  Actor                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FName                   SpeakingBone                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void AWKNDDialogueManager::GetSpeakingActor(const struct FName& RoleName, class AActor** Actor, struct FName* SpeakingBone)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDDialogueManager.GetSpeakingActor");

	AWKNDDialogueManager_GetSpeakingActor_Params params;
	params.RoleName = RoleName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
	if (SpeakingBone != nullptr)
		*SpeakingBone = params.SpeakingBone;
}


// Function WKND.WKNDDialogueManager.GetCurrentNag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FNagInfo                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FNagInfo AWKNDDialogueManager::GetCurrentNag()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDDialogueManager.GetCurrentNag");

	AWKNDDialogueManager_GetCurrentNag_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDDialogueManager.DialogueDebug
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FString                 Message                        (Parm, ZeroConstructor)

void AWKNDDialogueManager::DialogueDebug(const struct FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDDialogueManager.DialogueDebug");

	AWKNDDialogueManager_DialogueDebug_Params params;
	params.Message = Message;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDDialogueManager.AddSpeakingActorInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   RoleName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   SpeakingBone                   (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  CurrentActor                   (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDDialogueManager::AddSpeakingActorInfo(const struct FName& RoleName, const struct FName& SpeakingBone, class AActor* CurrentActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDDialogueManager.AddSpeakingActorInfo");

	AWKNDDialogueManager_AddSpeakingActorInfo_Params params;
	params.RoleName = RoleName;
	params.SpeakingBone = SpeakingBone;
	params.CurrentActor = CurrentActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDDialogueManager.AddDialogueRequestStruct
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FDialogueRequest        DialogueRequest                (Parm, OutParm)
// struct FName                   SpeakingBone                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FNTPlayingEvent         ReturnValue                    (Parm, OutParm, ReturnParm)

struct FNTPlayingEvent AWKNDDialogueManager::AddDialogueRequestStruct(const struct FName& SpeakingBone, struct FDialogueRequest* DialogueRequest)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDDialogueManager.AddDialogueRequestStruct");

	AWKNDDialogueManager_AddDialogueRequestStruct_Params params;
	params.SpeakingBone = SpeakingBone;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DialogueRequest != nullptr)
		*DialogueRequest = params.DialogueRequest;

	return params.ReturnValue;
}


// Function WKND.WKNDDialogueManager.AddDialogueRequest
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAkAudioEvent*           AkEvent                        (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            Priority                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          PostPlayDelay                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           AllowConcurrent                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           Queueable                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   SpeakingBone                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          SilentCueTime                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FNTPlayingEvent         ReturnValue                    (Parm, OutParm, ReturnParm)

struct FNTPlayingEvent AWKNDDialogueManager::AddDialogueRequest(class UAkAudioEvent* AkEvent, class AActor* Actor, int Priority, float PostPlayDelay, bool AllowConcurrent, bool Queueable, const struct FName& SpeakingBone, float SilentCueTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDDialogueManager.AddDialogueRequest");

	AWKNDDialogueManager_AddDialogueRequest_Params params;
	params.AkEvent = AkEvent;
	params.Actor = Actor;
	params.Priority = Priority;
	params.PostPlayDelay = PostPlayDelay;
	params.AllowConcurrent = AllowConcurrent;
	params.Queueable = Queueable;
	params.SpeakingBone = SpeakingBone;
	params.SilentCueTime = SilentCueTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDDroidInstrumentFoleyComponent.GetInstrumentSpeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   instrumentName                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UWKNDDroidInstrumentFoleyComponent::GetInstrumentSpeed(const struct FName& instrumentName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDDroidInstrumentFoleyComponent.GetInstrumentSpeed");

	UWKNDDroidInstrumentFoleyComponent_GetInstrumentSpeed_Params params;
	params.instrumentName = instrumentName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDEnemyProjectileMovementComponent.TestDeflectionAgainstDesiredDirection
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 DeflectionVelocity             (Parm, IsPlainOldData)
// struct FVector                 DesiredDirection               (Parm, IsPlainOldData)
// bool                           bFlatAngleTest                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          AngleTolerance                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          OutAngle                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDEnemyProjectileMovementComponent::TestDeflectionAgainstDesiredDirection(const struct FVector& DeflectionVelocity, const struct FVector& DesiredDirection, bool bFlatAngleTest, float AngleTolerance, float* OutAngle)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDEnemyProjectileMovementComponent.TestDeflectionAgainstDesiredDirection");

	UWKNDEnemyProjectileMovementComponent_TestDeflectionAgainstDesiredDirection_Params params;
	params.DeflectionVelocity = DeflectionVelocity;
	params.DesiredDirection = DesiredDirection;
	params.bFlatAngleTest = bFlatAngleTest;
	params.AngleTolerance = AngleTolerance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutAngle != nullptr)
		*OutAngle = params.OutAngle;

	return params.ReturnValue;
}


// Function WKND.WKNDEnemyProjectileMovementComponent.SetTargetOpponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  NewTargetOpponent              (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EActorSide>        side                           (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDEnemyProjectileMovementComponent::SetTargetOpponent(class AActor* NewTargetOpponent, TEnumAsByte<EActorSide> side)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDEnemyProjectileMovementComponent.SetTargetOpponent");

	UWKNDEnemyProjectileMovementComponent_SetTargetOpponent_Params params;
	params.NewTargetOpponent = NewTargetOpponent;
	params.side = side;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDEnemyProjectileMovementComponent.SetSpeedAdjustProperties
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// bool                           bNewActive                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               NewAdjustDistance              (Parm, IsPlainOldData)
// struct FVector2D               NewAdjustSpeed                 (Parm, IsPlainOldData)

void UWKNDEnemyProjectileMovementComponent::SetSpeedAdjustProperties(bool bNewActive, const struct FVector2D& NewAdjustDistance, const struct FVector2D& NewAdjustSpeed)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDEnemyProjectileMovementComponent.SetSpeedAdjustProperties");

	UWKNDEnemyProjectileMovementComponent_SetSpeedAdjustProperties_Params params;
	params.bNewActive = bNewActive;
	params.NewAdjustDistance = NewAdjustDistance;
	params.NewAdjustSpeed = NewAdjustSpeed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDEnemyProjectileMovementComponent.SelectNewTargetLocation
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EActorSide>        side                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDEnemyProjectileMovementComponent::SelectNewTargetLocation(TEnumAsByte<EActorSide> side)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDEnemyProjectileMovementComponent.SelectNewTargetLocation");

	UWKNDEnemyProjectileMovementComponent_SelectNewTargetLocation_Params params;
	params.side = side;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDEnemyProjectileMovementComponent.ResolvePasses
// (Final, Native, Public, HasDefaults)
// Parameters:
// struct FTransform              CurrentTransform               (Parm, IsPlainOldData)

void UWKNDEnemyProjectileMovementComponent::ResolvePasses(const struct FTransform& CurrentTransform)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDEnemyProjectileMovementComponent.ResolvePasses");

	UWKNDEnemyProjectileMovementComponent_ResolvePasses_Params params;
	params.CurrentTransform = CurrentTransform;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDEnemyProjectileMovementComponent.ResolveHits
// (Final, Native, Public, HasDefaults)
// Parameters:
// struct FTransform              PreviousTransform              (Parm, IsPlainOldData)
// struct FTransform              CurrentTransform               (Parm, IsPlainOldData)

void UWKNDEnemyProjectileMovementComponent::ResolveHits(const struct FTransform& PreviousTransform, const struct FTransform& CurrentTransform)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDEnemyProjectileMovementComponent.ResolveHits");

	UWKNDEnemyProjectileMovementComponent_ResolveHits_Params params;
	params.PreviousTransform = PreviousTransform;
	params.CurrentTransform = CurrentTransform;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDEnemyProjectileMovementComponent.PerformSpeedAdjust
// (Final, Native, Public)

void UWKNDEnemyProjectileMovementComponent::PerformSpeedAdjust()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDEnemyProjectileMovementComponent.PerformSpeedAdjust");

	UWKNDEnemyProjectileMovementComponent_PerformSpeedAdjust_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDEnemyProjectileMovementComponent.GetTargetLocationFromActor
// (Final, Native, Public, HasDefaults, Const)
// Parameters:
// class AActor*                  TargetActor                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector UWKNDEnemyProjectileMovementComponent::GetTargetLocationFromActor(class AActor* TargetActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDEnemyProjectileMovementComponent.GetTargetLocationFromActor");

	UWKNDEnemyProjectileMovementComponent_GetTargetLocationFromActor_Params params;
	params.TargetActor = TargetActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDEnemyProjectileMovementComponent.DeflectProjectile
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FHitResult              HitResult                      (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// class AWKNDPlayerPawn*         DeflectingPlayerPawn           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDEnemyProjectileMovementComponent::DeflectProjectile(const struct FHitResult& HitResult, class AWKNDPlayerPawn* DeflectingPlayerPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDEnemyProjectileMovementComponent.DeflectProjectile");

	UWKNDEnemyProjectileMovementComponent_DeflectProjectile_Params params;
	params.HitResult = HitResult;
	params.DeflectingPlayerPawn = DeflectingPlayerPawn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDFloatingMovementComponent.StopDistanceKeeping
// (Final, Native, Public, BlueprintCallable)

void UWKNDFloatingMovementComponent::StopDistanceKeeping()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDFloatingMovementComponent.StopDistanceKeeping");

	UWKNDFloatingMovementComponent_StopDistanceKeeping_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDFloatingMovementComponent.StartDistanceKeeping
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Location                       (Parm, IsPlainOldData)
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDFloatingMovementComponent::StartDistanceKeeping(const struct FVector& Location, float Distance)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDFloatingMovementComponent.StartDistanceKeeping");

	UWKNDFloatingMovementComponent_StartDistanceKeeping_Params params;
	params.Location = Location;
	params.Distance = Distance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDFloatingMovementComponent.PushMovementType
// (Native, Public, BlueprintCallable)
// Parameters:
// EBuddyAIMovementType           MovementType                   (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDFloatingMovementComponent::PushMovementType(EBuddyAIMovementType MovementType)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDFloatingMovementComponent.PushMovementType");

	UWKNDFloatingMovementComponent_PushMovementType_Params params;
	params.MovementType = MovementType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDFloatingMovementComponent.PopMovementType
// (Native, Public, BlueprintCallable)

void UWKNDFloatingMovementComponent::PopMovementType()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDFloatingMovementComponent.PopMovementType");

	UWKNDFloatingMovementComponent_PopMovementType_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDFloatingMovementComponent.GetPointAtRange
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 TargetLocation                 (Parm, IsPlainOldData)
// struct FVector                 centerPoint                    (Parm, IsPlainOldData)
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector UWKNDFloatingMovementComponent::GetPointAtRange(const struct FVector& TargetLocation, const struct FVector& centerPoint, float Distance)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDFloatingMovementComponent.GetPointAtRange");

	UWKNDFloatingMovementComponent_GetPointAtRange_Params params;
	params.TargetLocation = TargetLocation;
	params.centerPoint = centerPoint;
	params.Distance = Distance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDFoleySoundManager.UpdatePlayerClimbing
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// EWKNDHands                     Handedness                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Speed                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          SmoothedSpeed                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FNTPlayingEvent         PlayingSound                   (Parm)

void UWKNDFoleySoundManager::UpdatePlayerClimbing(float DeltaTime, EWKNDHands Handedness, float Speed, float SmoothedSpeed, const struct FNTPlayingEvent& PlayingSound)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDFoleySoundManager.UpdatePlayerClimbing");

	UWKNDFoleySoundManager_UpdatePlayerClimbing_Params params;
	params.DeltaTime = DeltaTime;
	params.Handedness = Handedness;
	params.Speed = Speed;
	params.SmoothedSpeed = SmoothedSpeed;
	params.PlayingSound = PlayingSound;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDFoleySoundManager.StartClimbingSoundEvent
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EWKNDHands                     Handedness                     (Parm, ZeroConstructor, IsPlainOldData)
// class UAkAudioEvent*           AkEvent                        (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDFoleySoundManager::StartClimbingSoundEvent(EWKNDHands Handedness, class UAkAudioEvent* AkEvent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDFoleySoundManager.StartClimbingSoundEvent");

	UWKNDFoleySoundManager_StartClimbingSoundEvent_Params params;
	params.Handedness = Handedness;
	params.AkEvent = AkEvent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDFoleySoundManager.SetVolume
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESoundChannel                  Channel                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          Volume                         (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDFoleySoundManager::SetVolume(ESoundChannel Channel, float Volume)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDFoleySoundManager.SetVolume");

	UWKNDFoleySoundManager_SetVolume_Params params;
	params.Channel = Channel;
	params.Volume = Volume;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDFoleySoundManager.OnStopAll
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UWKNDFoleySoundManager::OnStopAll()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDFoleySoundManager.OnStopAll");

	UWKNDFoleySoundManager_OnStopAll_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDFoleySoundManager.OnSliceableCollision
// (Event, Protected, HasOutParms, HasDefaults, BlueprintEvent)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, IsPlainOldData)
// float                          RawImpactStrength              (Parm, ZeroConstructor, IsPlainOldData)
// float                          NormalizedImpactStrength       (Parm, ZeroConstructor, IsPlainOldData)
// class UAkAudioEvent*           ImpactSound                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          EstimatedVolume                (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDFoleySoundManager::OnSliceableCollision(class AActor* Actor, class AActor* OtherActor, const struct FVector& Location, float RawImpactStrength, float NormalizedImpactStrength, class UAkAudioEvent* ImpactSound, const struct FHitResult& Hit, float EstimatedVolume)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDFoleySoundManager.OnSliceableCollision");

	UWKNDFoleySoundManager_OnSliceableCollision_Params params;
	params.Actor = Actor;
	params.OtherActor = OtherActor;
	params.Location = Location;
	params.RawImpactStrength = RawImpactStrength;
	params.NormalizedImpactStrength = NormalizedImpactStrength;
	params.ImpactSound = ImpactSound;
	params.Hit = Hit;
	params.EstimatedVolume = EstimatedVolume;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDFoleySoundManager.OnReturnToMainMenu
// (Event, Public, BlueprintEvent)

void UWKNDFoleySoundManager::OnReturnToMainMenu()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDFoleySoundManager.OnReturnToMainMenu");

	UWKNDFoleySoundManager_OnReturnToMainMenu_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDFoleySoundManager.OnQuestHeadPhoneChange
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                           PluggedIn                      (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDFoleySoundManager::OnQuestHeadPhoneChange(bool PluggedIn)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDFoleySoundManager.OnQuestHeadPhoneChange");

	UWKNDFoleySoundManager_OnQuestHeadPhoneChange_Params params;
	params.PluggedIn = PluggedIn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDFoleySoundManager.OnPlayerFootStep
// (Event, Protected, HasDefaults, BlueprintEvent)
// Parameters:
// class AWKNDPlayerPawn*         Player                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           GroundHit                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, IsPlainOldData)
// class UAkAudioEvent*           Footstep                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EPhysicalSurface>  SurfaceType                    (Parm, ZeroConstructor, IsPlainOldData)
// EMovementContext               MovementContext                (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDFoleySoundManager::OnPlayerFootStep(class AWKNDPlayerPawn* Player, bool GroundHit, const struct FVector& Location, class UAkAudioEvent* Footstep, TEnumAsByte<EPhysicalSurface> SurfaceType, EMovementContext MovementContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDFoleySoundManager.OnPlayerFootStep");

	UWKNDFoleySoundManager_OnPlayerFootStep_Params params;
	params.Player = Player;
	params.GroundHit = GroundHit;
	params.Location = Location;
	params.Footstep = Footstep;
	params.SurfaceType = SurfaceType;
	params.MovementContext = MovementContext;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDFoleySoundManager.OnPlayerClimbing
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// EWKNDHands                     Handedness                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Speed                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          SmoothedSpeed                  (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDFoleySoundManager::OnPlayerClimbing(float DeltaTime, EWKNDHands Handedness, float Speed, float SmoothedSpeed)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDFoleySoundManager.OnPlayerClimbing");

	UWKNDFoleySoundManager_OnPlayerClimbing_Params params;
	params.DeltaTime = DeltaTime;
	params.Handedness = Handedness;
	params.Speed = Speed;
	params.SmoothedSpeed = SmoothedSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDFoleySoundManager.OnPauseStart
// (Event, Public, BlueprintEvent)

void UWKNDFoleySoundManager::OnPauseStart()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDFoleySoundManager.OnPauseStart");

	UWKNDFoleySoundManager_OnPauseStart_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDFoleySoundManager.OnPauseEnd
// (Event, Public, BlueprintEvent)

void UWKNDFoleySoundManager::OnPauseEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDFoleySoundManager.OnPauseEnd");

	UWKNDFoleySoundManager_OnPauseEnd_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDFoleySoundManager.OnLevelStartFadeUp
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                          FadeTime                       (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDFoleySoundManager::OnLevelStartFadeUp(float FadeTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDFoleySoundManager.OnLevelStartFadeUp");

	UWKNDFoleySoundManager_OnLevelStartFadeUp_Params params;
	params.FadeTime = FadeTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDFoleySoundManager.OnHandHit
// (Event, Protected, HasDefaults, BlueprintEvent)
// Parameters:
// class URPOCHandEnvironmentInteractionComponent* HandComponent                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// EPlayerHandImpact              ImpactType                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, IsPlainOldData)
// struct FVector                 ImpactVel                      (Parm, IsPlainOldData)
// float                          NormalisedImpactSpeed          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EPhysicalSurface>  SurfaceType                    (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  HeldObject                     (Parm, ZeroConstructor, IsPlainOldData)
// class UAkAudioEvent*           AkEvent                        (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDFoleySoundManager::OnHandHit(class URPOCHandEnvironmentInteractionComponent* HandComponent, EPlayerHandImpact ImpactType, const struct FVector& Location, const struct FVector& ImpactVel, float NormalisedImpactSpeed, TEnumAsByte<EPhysicalSurface> SurfaceType, class AActor* HeldObject, class UAkAudioEvent* AkEvent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDFoleySoundManager.OnHandHit");

	UWKNDFoleySoundManager_OnHandHit_Params params;
	params.HandComponent = HandComponent;
	params.ImpactType = ImpactType;
	params.Location = Location;
	params.ImpactVel = ImpactVel;
	params.NormalisedImpactSpeed = NormalisedImpactSpeed;
	params.SurfaceType = SurfaceType;
	params.HeldObject = HeldObject;
	params.AkEvent = AkEvent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDFoleySoundManager.OnFootStep
// (Event, Protected, HasDefaults, BlueprintEvent)
// Parameters:
// bool                           GroundHit                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, IsPlainOldData)
// class UAkAudioEvent*           Footstep                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EPhysicalSurface>  SurfaceType                    (Parm, ZeroConstructor, IsPlainOldData)
// EMovementContext               MovementContext                (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDFoleySoundManager::OnFootStep(bool GroundHit, const struct FVector& Location, class UAkAudioEvent* Footstep, TEnumAsByte<EPhysicalSurface> SurfaceType, EMovementContext MovementContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDFoleySoundManager.OnFootStep");

	UWKNDFoleySoundManager_OnFootStep_Params params;
	params.GroundHit = GroundHit;
	params.Location = Location;
	params.Footstep = Footstep;
	params.SurfaceType = SurfaceType;
	params.MovementContext = MovementContext;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDFoleySoundManager.OnCollision
// (Event, Protected, HasOutParms, HasDefaults, BlueprintEvent)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, IsPlainOldData)
// float                          RawImpactStrength              (Parm, ZeroConstructor, IsPlainOldData)
// float                          NormalizedImpactStrength       (Parm, ZeroConstructor, IsPlainOldData)
// class UAkAudioEvent*           ImpactSound                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           IsMeshPart                     (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDFoleySoundManager::OnCollision(class AActor* Actor, class AActor* OtherActor, const struct FVector& Location, float RawImpactStrength, float NormalizedImpactStrength, class UAkAudioEvent* ImpactSound, const struct FHitResult& Hit, bool IsMeshPart)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDFoleySoundManager.OnCollision");

	UWKNDFoleySoundManager_OnCollision_Params params;
	params.Actor = Actor;
	params.OtherActor = OtherActor;
	params.Location = Location;
	params.RawImpactStrength = RawImpactStrength;
	params.NormalizedImpactStrength = NormalizedImpactStrength;
	params.ImpactSound = ImpactSound;
	params.Hit = Hit;
	params.IsMeshPart = IsMeshPart;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDFoleySoundManager.MenuSound_OnVolumeChange
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                 ComponentLocation              (Parm, IsPlainOldData)
// bool                           ValueIncreased                 (Parm, ZeroConstructor, IsPlainOldData)
// ESoundChannel                  Channel                        (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDFoleySoundManager::MenuSound_OnVolumeChange(const struct FVector& ComponentLocation, bool ValueIncreased, ESoundChannel Channel)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDFoleySoundManager.MenuSound_OnVolumeChange");

	UWKNDFoleySoundManager_MenuSound_OnVolumeChange_Params params;
	params.ComponentLocation = ComponentLocation;
	params.ValueIncreased = ValueIncreased;
	params.Channel = Channel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDFoleySoundManager.MenuSound_OnTabChange
// (Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                 ComponentLocation              (Parm, IsPlainOldData)

void UWKNDFoleySoundManager::MenuSound_OnTabChange(const struct FVector& ComponentLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDFoleySoundManager.MenuSound_OnTabChange");

	UWKNDFoleySoundManager_MenuSound_OnTabChange_Params params;
	params.ComponentLocation = ComponentLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDFoleySoundManager.MenuSound_OnScrollContainerSelectionChange
// (Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                 ComponentLocation              (Parm, IsPlainOldData)
// bool                           bIssuedFromConsole             (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDFoleySoundManager::MenuSound_OnScrollContainerSelectionChange(const struct FVector& ComponentLocation, bool bIssuedFromConsole)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDFoleySoundManager.MenuSound_OnScrollContainerSelectionChange");

	UWKNDFoleySoundManager_MenuSound_OnScrollContainerSelectionChange_Params params;
	params.ComponentLocation = ComponentLocation;
	params.bIssuedFromConsole = bIssuedFromConsole;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDFoleySoundManager.MenuSound_OnRadioButtonSelectionChange
// (Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                 ComponentLocation              (Parm, IsPlainOldData)

void UWKNDFoleySoundManager::MenuSound_OnRadioButtonSelectionChange(const struct FVector& ComponentLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDFoleySoundManager.MenuSound_OnRadioButtonSelectionChange");

	UWKNDFoleySoundManager_MenuSound_OnRadioButtonSelectionChange_Params params;
	params.ComponentLocation = ComponentLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDFoleySoundManager.MenuSound_OnConsoleButtonPress
// (Event, Protected, HasDefaults, BlueprintEvent)
// Parameters:
// bool                           bPressed                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ComponentLocation              (Parm, IsPlainOldData)

void UWKNDFoleySoundManager::MenuSound_OnConsoleButtonPress(bool bPressed, const struct FVector& ComponentLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDFoleySoundManager.MenuSound_OnConsoleButtonPress");

	UWKNDFoleySoundManager_MenuSound_OnConsoleButtonPress_Params params;
	params.bPressed = bPressed;
	params.ComponentLocation = ComponentLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDFoleySoundManager.MenuSound_OnConsoleBackButtonPress
// (Event, Protected, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                 ComponentLocation              (Parm, IsPlainOldData)

void UWKNDFoleySoundManager::MenuSound_OnConsoleBackButtonPress(const struct FVector& ComponentLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDFoleySoundManager.MenuSound_OnConsoleBackButtonPress");

	UWKNDFoleySoundManager_MenuSound_OnConsoleBackButtonPress_Params params;
	params.ComponentLocation = ComponentLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDFoleySoundManager.MenuSound_OnButtonPress
// (Event, Protected, HasDefaults, BlueprintEvent)
// Parameters:
// bool                           bPressed                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ComponentLocation              (Parm, IsPlainOldData)

void UWKNDFoleySoundManager::MenuSound_OnButtonPress(bool bPressed, const struct FVector& ComponentLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDFoleySoundManager.MenuSound_OnButtonPress");

	UWKNDFoleySoundManager_MenuSound_OnButtonPress_Params params;
	params.bPressed = bPressed;
	params.ComponentLocation = ComponentLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDFoleySoundManager.MenuSound_OnBackButtonPress
// (Event, Protected, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                 ComponentLocation              (Parm, IsPlainOldData)

void UWKNDFoleySoundManager::MenuSound_OnBackButtonPress(const struct FVector& ComponentLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDFoleySoundManager.MenuSound_OnBackButtonPress");

	UWKNDFoleySoundManager_MenuSound_OnBackButtonPress_Params params;
	params.ComponentLocation = ComponentLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDFoleySoundManager.GetParamsForFootStep
// (Final, Native, Protected, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, OutParm, IsPlainOldData)
// TEnumAsByte<EPhysicalSurface>  SurfaceType                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// EQueryResult                   OutResult                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UWKNDFoleySoundManager::GetParamsForFootStep(class AActor* Actor, struct FVector* Location, TEnumAsByte<EPhysicalSurface>* SurfaceType, EQueryResult* OutResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDFoleySoundManager.GetParamsForFootStep");

	UWKNDFoleySoundManager_GetParamsForFootStep_Params params;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Location != nullptr)
		*Location = params.Location;
	if (SurfaceType != nullptr)
		*SurfaceType = params.SurfaceType;
	if (OutResult != nullptr)
		*OutResult = params.OutResult;
}


// Function WKND.WKNDFoleySoundManager.GetLastButtonPressLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector UWKNDFoleySoundManager::GetLastButtonPressLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDFoleySoundManager.GetLastButtonPressLocation");

	UWKNDFoleySoundManager_GetLastButtonPressLocation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDFoleySoundManager.DoFootStepSkelMesh
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*  Skelmesh                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// class UAkAudioEvent*           Footstep                       (Parm, ZeroConstructor, IsPlainOldData)
// EMovementContext               MovementContext                (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDFoleySoundManager::DoFootStepSkelMesh(class USkeletalMeshComponent* Skelmesh, const struct FName& BoneName, class UAkAudioEvent* Footstep, EMovementContext MovementContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDFoleySoundManager.DoFootStepSkelMesh");

	UWKNDFoleySoundManager_DoFootStepSkelMesh_Params params;
	params.Skelmesh = Skelmesh;
	params.BoneName = BoneName;
	params.Footstep = Footstep;
	params.MovementContext = MovementContext;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDFoleySoundManager.DoFootStepPlayer
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AWKNDPlayerPawn*         Player                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           UseNavPos                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 NavPosition                    (Parm, IsPlainOldData)
// class UAkAudioEvent*           Footstep                       (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDFoleySoundManager::DoFootStepPlayer(class AWKNDPlayerPawn* Player, bool UseNavPos, const struct FVector& NavPosition, class UAkAudioEvent* Footstep)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDFoleySoundManager.DoFootStepPlayer");

	UWKNDFoleySoundManager_DoFootStepPlayer_Params params;
	params.Player = Player;
	params.UseNavPos = UseNavPos;
	params.NavPosition = NavPosition;
	params.Footstep = Footstep;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDFoleySoundManager.DebugMessage
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EWKNDHands                     Handedness                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 Message                        (Parm, ZeroConstructor)
// float                          HeightOffset                   (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDFoleySoundManager::DebugMessage(EWKNDHands Handedness, const struct FString& Message, float HeightOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDFoleySoundManager.DebugMessage");

	UWKNDFoleySoundManager_DebugMessage_Params params;
	params.Handedness = Handedness;
	params.Message = Message;
	params.HeightOffset = HeightOffset;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDFoleySoundManager.CallMeshPartCollision
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*     HitComponent                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComponent                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 Impulse                        (Parm, IsPlainOldData)
// struct FHitResult              HitResult                      (Parm, IsPlainOldData)
// class UAkAudioEvent*           ImpactSound                    (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDFoleySoundManager::CallMeshPartCollision(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, const struct FVector& Impulse, const struct FHitResult& HitResult, class UAkAudioEvent* ImpactSound)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDFoleySoundManager.CallMeshPartCollision");

	UWKNDFoleySoundManager_CallMeshPartCollision_Params params;
	params.HitComponent = HitComponent;
	params.OtherActor = OtherActor;
	params.OtherComponent = OtherComponent;
	params.Impulse = Impulse;
	params.HitResult = HitResult;
	params.ImpactSound = ImpactSound;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDFoleySoundManager.AudioDebugToLog
// (Final, Native, Static, Protected, BlueprintCallable)
// Parameters:
// struct FString                 Prefix                         (Parm, ZeroConstructor)
// struct FString                 Message                        (Parm, ZeroConstructor)

void UWKNDFoleySoundManager::STATIC_AudioDebugToLog(const struct FString& Prefix, const struct FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDFoleySoundManager.AudioDebugToLog");

	UWKNDFoleySoundManager_AudioDebugToLog_Params params;
	params.Prefix = Prefix;
	params.Message = Message;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGameInstance.ToggleVRMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVRModeEnum                    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EVRModeEnum UWKNDGameInstance::ToggleVRMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.ToggleVRMode");

	UWKNDGameInstance_ToggleVRMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.ToggleVisualCombatAssist
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVisualCombatAssistEnum        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EVisualCombatAssistEnum UWKNDGameInstance::ToggleVisualCombatAssist()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.ToggleVisualCombatAssist");

	UWKNDGameInstance_ToggleVisualCombatAssist_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.ToggleSubtitles
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ESubtitlesEnum                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ESubtitlesEnum UWKNDGameInstance::ToggleSubtitles()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.ToggleSubtitles");

	UWKNDGameInstance_ToggleSubtitles_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.Toggle360CombatEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// E360CombatEnum                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

E360CombatEnum UWKNDGameInstance::Toggle360CombatEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.Toggle360CombatEnabled");

	UWKNDGameInstance_Toggle360CombatEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.SetVRMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVRModeEnum                    VRModeEnum                     (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDGameInstance::SetVRMode(EVRModeEnum VRModeEnum)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.SetVRMode");

	UWKNDGameInstance_SetVRMode_Params params;
	params.VRModeEnum = VRModeEnum;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGameInstance.SetVolumeSetting
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ESoundChannel                  Channel                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          Volume                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UWKNDGameInstance::SetVolumeSetting(ESoundChannel Channel, float Volume)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.SetVolumeSetting");

	UWKNDGameInstance_SetVolumeSetting_Params params;
	params.Channel = Channel;
	params.Volume = Volume;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.SetVisualCombatAssist
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVisualCombatAssistEnum        VCAEnum                        (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDGameInstance::SetVisualCombatAssist(EVisualCombatAssistEnum VCAEnum)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.SetVisualCombatAssist");

	UWKNDGameInstance_SetVisualCombatAssist_Params params;
	params.VCAEnum = VCAEnum;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGameInstance.SetVignetteDuringMotion
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           vignette                       (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDGameInstance::SetVignetteDuringMotion(bool vignette)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.SetVignetteDuringMotion");

	UWKNDGameInstance_SetVignetteDuringMotion_Params params;
	params.vignette = vignette;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGameInstance.SetupOculusLoadingScreen
// (Final, Native, Public, BlueprintCallable)

void UWKNDGameInstance::SetupOculusLoadingScreen()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.SetupOculusLoadingScreen");

	UWKNDGameInstance_SetupOculusLoadingScreen_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGameInstance.SetTeleportTurn
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           teleturn                       (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDGameInstance::SetTeleportTurn(bool teleturn)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.SetTeleportTurn");

	UWKNDGameInstance_SetTeleportTurn_Params params;
	params.teleturn = teleturn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGameInstance.SetSwapThrottleHands
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           Swap                           (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDGameInstance::SetSwapThrottleHands(bool Swap)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.SetSwapThrottleHands");

	UWKNDGameInstance_SetSwapThrottleHands_Params params;
	params.Swap = Swap;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGameInstance.SetSubtitles
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ESubtitlesEnum                 SubtitlesEnum                  (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDGameInstance::SetSubtitles(ESubtitlesEnum SubtitlesEnum)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.SetSubtitles");

	UWKNDGameInstance_SetSubtitles_Params params;
	params.SubtitlesEnum = SubtitlesEnum;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGameInstance.SetSnapTurnsInstant
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVRInstantSnapTurns            Snap                           (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDGameInstance::SetSnapTurnsInstant(EVRInstantSnapTurns Snap)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.SetSnapTurnsInstant");

	UWKNDGameInstance_SetSnapTurnsInstant_Params params;
	params.Snap = Snap;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGameInstance.SetSlowFalling
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bSetSlowFalling                (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDGameInstance::SetSlowFalling(bool bSetSlowFalling)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.SetSlowFalling");

	UWKNDGameInstance_SetSlowFalling_Params params;
	params.bSetSlowFalling = bSetSlowFalling;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGameInstance.SetSkipClimb
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bSetSkipClimb                  (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDGameInstance::SetSkipClimb(bool bSetSkipClimb)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.SetSkipClimb");

	UWKNDGameInstance_SetSkipClimb_Params params;
	params.bSetSkipClimb = bSetSkipClimb;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGameInstance.SetSafeClimbing
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bSetSafeClimbing               (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDGameInstance::SetSafeClimbing(bool bSetSafeClimbing)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.SetSafeClimbing");

	UWKNDGameInstance_SetSafeClimbing_Params params;
	params.bSetSafeClimbing = bSetSafeClimbing;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGameInstance.SetRequestedDojoWave
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   RequestedWave                  (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDGameInstance::SetRequestedDojoWave(const struct FName& RequestedWave)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.SetRequestedDojoWave");

	UWKNDGameInstance_SetRequestedDojoWave_Params params;
	params.RequestedWave = RequestedWave;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGameInstance.SetQuestShaderPrecompileComplete
// (Final, Native, Private, BlueprintCallable)

void UWKNDGameInstance::SetQuestShaderPrecompileComplete()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.SetQuestShaderPrecompileComplete");

	UWKNDGameInstance_SetQuestShaderPrecompileComplete_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGameInstance.SetPlayerTargetPointOverride
// (Final, Native, Public, BlueprintCallable)

void UWKNDGameInstance::SetPlayerTargetPointOverride()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.SetPlayerTargetPointOverride");

	UWKNDGameInstance_SetPlayerTargetPointOverride_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGameInstance.SetLocomotionMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELocomotionModeEnum            LocomotionModeEnum             (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDGameInstance::SetLocomotionMode(ELocomotionModeEnum LocomotionModeEnum)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.SetLocomotionMode");

	UWKNDGameInstance_SetLocomotionMode_Params params;
	params.LocomotionModeEnum = LocomotionModeEnum;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGameInstance.SetLanguageIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// unsigned char                  LanguageIndex                  (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDGameInstance::SetLanguageIndex(unsigned char LanguageIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.SetLanguageIndex");

	UWKNDGameInstance_SetLanguageIndex_Params params;
	params.LanguageIndex = LanguageIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGameInstance.SetHasSeenComfortPrompt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bSetSeenState                  (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDGameInstance::SetHasSeenComfortPrompt(bool bSetSeenState)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.SetHasSeenComfortPrompt");

	UWKNDGameInstance_SetHasSeenComfortPrompt_Params params;
	params.bSetSeenState = bSetSeenState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGameInstance.SetGraphicsSetting
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGraphicsSetting               SelectedGraphicsSetting        (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDGameInstance::SetGraphicsSetting(EGraphicsSetting SelectedGraphicsSetting)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.SetGraphicsSetting");

	UWKNDGameInstance_SetGraphicsSetting_Params params;
	params.SelectedGraphicsSetting = SelectedGraphicsSetting;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGameInstance.SetFadeOutDuringAcceleration
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           fade                           (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDGameInstance::SetFadeOutDuringAcceleration(bool fade)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.SetFadeOutDuringAcceleration");

	UWKNDGameInstance_SetFadeOutDuringAcceleration_Params params;
	params.fade = fade;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGameInstance.SetDamageIndicatorSetting
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EComfortDamageIndicatorEnum    ComfortDamageIndicatorEnum     (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDGameInstance::SetDamageIndicatorSetting(EComfortDamageIndicatorEnum ComfortDamageIndicatorEnum)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.SetDamageIndicatorSetting");

	UWKNDGameInstance_SetDamageIndicatorSetting_Params params;
	params.ComfortDamageIndicatorEnum = ComfortDamageIndicatorEnum;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGameInstance.SetComfortLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EComfortLevelEnum              ComfortLevelEnum               (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDGameInstance::SetComfortLevel(EComfortLevelEnum ComfortLevelEnum)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.SetComfortLevel");

	UWKNDGameInstance_SetComfortLevel_Params params;
	params.ComfortLevelEnum = ComfortLevelEnum;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGameInstance.SetCameraShakes
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVRCameraShakeEnum             CameraShakeOption              (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDGameInstance::SetCameraShakes(EVRCameraShakeEnum CameraShakeOption)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.SetCameraShakes");

	UWKNDGameInstance_SetCameraShakes_Params params;
	params.CameraShakeOption = CameraShakeOption;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGameInstance.Set360CombatEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// E360CombatEnum                 C360Enum                       (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDGameInstance::Set360CombatEnabled(E360CombatEnum C360Enum)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.Set360CombatEnabled");

	UWKNDGameInstance_Set360CombatEnabled_Params params;
	params.C360Enum = C360Enum;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGameInstance.ResetProgressionCheckpointAndSave
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDGameInstance::ResetProgressionCheckpointAndSave()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.ResetProgressionCheckpointAndSave");

	UWKNDGameInstance_ResetProgressionCheckpointAndSave_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.RegisterUnlockedExtendedDojoWaveAndSave
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   WaveName                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDGameInstance::RegisterUnlockedExtendedDojoWaveAndSave(const struct FName& WaveName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.RegisterUnlockedExtendedDojoWaveAndSave");

	UWKNDGameInstance_RegisterUnlockedExtendedDojoWaveAndSave_Params params;
	params.WaveName = WaveName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.RegisterUnlockedExtendedDojoWave
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   WaveName                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDGameInstance::RegisterUnlockedExtendedDojoWave(const struct FName& WaveName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.RegisterUnlockedExtendedDojoWave");

	UWKNDGameInstance_RegisterUnlockedExtendedDojoWave_Params params;
	params.WaveName = WaveName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.RegisterProgressionCheckpointAndSave
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWKNDProgressionCheckpointData* CheckpointObject               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDGameInstance::RegisterProgressionCheckpointAndSave(class UWKNDProgressionCheckpointData* CheckpointObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.RegisterProgressionCheckpointAndSave");

	UWKNDGameInstance_RegisterProgressionCheckpointAndSave_Params params;
	params.CheckpointObject = CheckpointObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.RegisterProgressionCheckpoint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWKNDProgressionCheckpointData* CheckpointObject               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDGameInstance::RegisterProgressionCheckpoint(class UWKNDProgressionCheckpointData* CheckpointObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.RegisterProgressionCheckpoint");

	UWKNDGameInstance_RegisterProgressionCheckpoint_Params params;
	params.CheckpointObject = CheckpointObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.RegisterCheckpointTeleporter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AWKNDCheckpointTeleporter* NewCheckpointTeleporter        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDGameInstance::RegisterCheckpointTeleporter(class AWKNDCheckpointTeleporter* NewCheckpointTeleporter)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.RegisterCheckpointTeleporter");

	UWKNDGameInstance_RegisterCheckpointTeleporter_Params params;
	params.NewCheckpointTeleporter = NewCheckpointTeleporter;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.LowLevelLog
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FString                 TextToLog                      (Parm, ZeroConstructor)

void UWKNDGameInstance::STATIC_LowLevelLog(const struct FString& TextToLog)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.LowLevelLog");

	UWKNDGameInstance_LowLevelLog_Params params;
	params.TextToLog = TextToLog;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGameInstance.LogPerformanceLabel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FString                 Label                          (Parm, ZeroConstructor)
// bool                           bIsSceneDivider                (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDGameInstance::LogPerformanceLabel(const struct FString& Label, bool bIsSceneDivider)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.LogPerformanceLabel");

	UWKNDGameInstance_LogPerformanceLabel_Params params;
	params.Label = Label;
	params.bIsSceneDivider = bIsSceneDivider;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGameInstance.LoadNewLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   LevelName                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bShowLoadingScreen             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDGameInstance::LoadNewLevel(const struct FName& LevelName, bool bShowLoadingScreen)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.LoadNewLevel");

	UWKNDGameInstance_LoadNewLevel_Params params;
	params.LevelName = LevelName;
	params.bShowLoadingScreen = bShowLoadingScreen;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.IsQuestShaderPrecompileRequired
// (Final, Native, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDGameInstance::IsQuestShaderPrecompileRequired()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.IsQuestShaderPrecompileRequired");

	UWKNDGameInstance_IsQuestShaderPrecompileRequired_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.IsCheckpointUnlocked
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UWKNDProgressionCheckpointData* CheckpointObject               (Parm, ZeroConstructor, IsPlainOldData)
// class UWKNDCheckpointProgressionOrder* UsedOrderData                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDGameInstance::IsCheckpointUnlocked(class UWKNDProgressionCheckpointData* CheckpointObject, class UWKNDCheckpointProgressionOrder* UsedOrderData)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.IsCheckpointUnlocked");

	UWKNDGameInstance_IsCheckpointUnlocked_Params params;
	params.CheckpointObject = CheckpointObject;
	params.UsedOrderData = UsedOrderData;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.HasSeenComfortPrompt
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDGameInstance::HasSeenComfortPrompt()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.HasSeenComfortPrompt");

	UWKNDGameInstance_HasSeenComfortPrompt_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.GetWorldsManager
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UWKNDWorldsManager*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UWKNDWorldsManager* UWKNDGameInstance::GetWorldsManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.GetWorldsManager");

	UWKNDGameInstance_GetWorldsManager_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.GetVRMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EVRModeEnum                    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EVRModeEnum UWKNDGameInstance::GetVRMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.GetVRMode");

	UWKNDGameInstance_GetVRMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.GetVolumeSetting
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// ESoundChannel                  Channel                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          Volume                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDGameInstance::GetVolumeSetting(ESoundChannel Channel, float* Volume)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.GetVolumeSetting");

	UWKNDGameInstance_GetVolumeSetting_Params params;
	params.Channel = Channel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Volume != nullptr)
		*Volume = params.Volume;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.GetVisualCombatAssist
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EVisualCombatAssistEnum        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EVisualCombatAssistEnum UWKNDGameInstance::GetVisualCombatAssist()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.GetVisualCombatAssist");

	UWKNDGameInstance_GetVisualCombatAssist_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.GetVignetteDuringMotion
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDGameInstance::GetVignetteDuringMotion()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.GetVignetteDuringMotion");

	UWKNDGameInstance_GetVignetteDuringMotion_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.GetTeleportTurn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDGameInstance::GetTeleportTurn()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.GetTeleportTurn");

	UWKNDGameInstance_GetTeleportTurn_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.GetSwapThrottleHands
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDGameInstance::GetSwapThrottleHands()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.GetSwapThrottleHands");

	UWKNDGameInstance_GetSwapThrottleHands_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.GetSubtitles
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESubtitlesEnum                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ESubtitlesEnum UWKNDGameInstance::GetSubtitles()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.GetSubtitles");

	UWKNDGameInstance_GetSubtitles_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.GetSnapTurnsInstant
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EVRInstantSnapTurns            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EVRInstantSnapTurns UWKNDGameInstance::GetSnapTurnsInstant()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.GetSnapTurnsInstant");

	UWKNDGameInstance_GetSnapTurnsInstant_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.GetSlowFalling
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDGameInstance::GetSlowFalling()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.GetSlowFalling");

	UWKNDGameInstance_GetSlowFalling_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.GetSkipClimb
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDGameInstance::GetSkipClimb()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.GetSkipClimb");

	UWKNDGameInstance_GetSkipClimb_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.GetSaveGame
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UWKNDSaveGame*           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UWKNDSaveGame* UWKNDGameInstance::GetSaveGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.GetSaveGame");

	UWKNDGameInstance_GetSaveGame_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.GetSavedProgressionCheckpoint
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UWKNDProgressionCheckpointData* CheckpointObject               (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDGameInstance::GetSavedProgressionCheckpoint(class UWKNDProgressionCheckpointData** CheckpointObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.GetSavedProgressionCheckpoint");

	UWKNDGameInstance_GetSavedProgressionCheckpoint_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CheckpointObject != nullptr)
		*CheckpointObject = params.CheckpointObject;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.GetSafeClimbing
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDGameInstance::GetSafeClimbing()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.GetSafeClimbing");

	UWKNDGameInstance_GetSafeClimbing_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.GetRequestedDojoWave
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// bool                           bIsWaveRequested               (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FName                   RequestedWave                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UWKNDGameInstance::GetRequestedDojoWave(bool* bIsWaveRequested, struct FName* RequestedWave)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.GetRequestedDojoWave");

	UWKNDGameInstance_GetRequestedDojoWave_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bIsWaveRequested != nullptr)
		*bIsWaveRequested = params.bIsWaveRequested;
	if (RequestedWave != nullptr)
		*RequestedWave = params.RequestedWave;
}


// Function WKND.WKNDGameInstance.GetPlayerTargetPointOverride
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)

void UWKNDGameInstance::GetPlayerTargetPointOverride()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.GetPlayerTargetPointOverride");

	UWKNDGameInstance_GetPlayerTargetPointOverride_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGameInstance.GetLocomotionMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELocomotionModeEnum            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ELocomotionModeEnum UWKNDGameInstance::GetLocomotionMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.GetLocomotionMode");

	UWKNDGameInstance_GetLocomotionMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.GetLastUnlockedExtendedDojoWave
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FName                   WaveName                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDGameInstance::GetLastUnlockedExtendedDojoWave(struct FName* WaveName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.GetLastUnlockedExtendedDojoWave");

	UWKNDGameInstance_GetLastUnlockedExtendedDojoWave_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (WaveName != nullptr)
		*WaveName = params.WaveName;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.GetLanguageIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

unsigned char UWKNDGameInstance::GetLanguageIndex()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.GetLanguageIndex");

	UWKNDGameInstance_GetLanguageIndex_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.GetHighestUnlockedProgressionCheckpoint
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UWKNDProgressionCheckpointData* CheckpointObject               (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDGameInstance::GetHighestUnlockedProgressionCheckpoint(class UWKNDProgressionCheckpointData** CheckpointObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.GetHighestUnlockedProgressionCheckpoint");

	UWKNDGameInstance_GetHighestUnlockedProgressionCheckpoint_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CheckpointObject != nullptr)
		*CheckpointObject = params.CheckpointObject;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.GetGraphicsSetting
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGraphicsSetting               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EGraphicsSetting UWKNDGameInstance::GetGraphicsSetting()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.GetGraphicsSetting");

	UWKNDGameInstance_GetGraphicsSetting_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.GetFadeOutDuringAcceleration
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDGameInstance::GetFadeOutDuringAcceleration()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.GetFadeOutDuringAcceleration");

	UWKNDGameInstance_GetFadeOutDuringAcceleration_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.GetDamageIndicatorSetting
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EComfortDamageIndicatorEnum    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EComfortDamageIndicatorEnum UWKNDGameInstance::GetDamageIndicatorSetting()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.GetDamageIndicatorSetting");

	UWKNDGameInstance_GetDamageIndicatorSetting_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.GetComfortLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EComfortLevelEnum              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EComfortLevelEnum UWKNDGameInstance::GetComfortLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.GetComfortLevel");

	UWKNDGameInstance_GetComfortLevel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.GetCheckpointTeleporter
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class AWKNDCheckpointTeleporter* RegisteredCheckpointTeleporter (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDGameInstance::GetCheckpointTeleporter(class AWKNDCheckpointTeleporter** RegisteredCheckpointTeleporter)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.GetCheckpointTeleporter");

	UWKNDGameInstance_GetCheckpointTeleporter_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (RegisteredCheckpointTeleporter != nullptr)
		*RegisteredCheckpointTeleporter = params.RegisteredCheckpointTeleporter;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.GetCameraShakes
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EVRCameraShakeEnum             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EVRCameraShakeEnum UWKNDGameInstance::GetCameraShakes()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.GetCameraShakes");

	UWKNDGameInstance_GetCameraShakes_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.Get360CombatEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// E360CombatEnum                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

E360CombatEnum UWKNDGameInstance::Get360CombatEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.Get360CombatEnabled");

	UWKNDGameInstance_Get360CombatEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.CompareProgressionCheckpoint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWKNDProgressionCheckpointData* CheckpointObjectA              (Parm, ZeroConstructor, IsPlainOldData)
// class UWKNDProgressionCheckpointData* CheckpointObjectB              (Parm, ZeroConstructor, IsPlainOldData)
// class UWKNDCheckpointProgressionOrder* UsedOrderData                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDGameInstance::CompareProgressionCheckpoint(class UWKNDProgressionCheckpointData* CheckpointObjectA, class UWKNDProgressionCheckpointData* CheckpointObjectB, class UWKNDCheckpointProgressionOrder* UsedOrderData)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.CompareProgressionCheckpoint");

	UWKNDGameInstance_CompareProgressionCheckpoint_Params params;
	params.CheckpointObjectA = CheckpointObjectA;
	params.CheckpointObjectB = CheckpointObjectB;
	params.UsedOrderData = UsedOrderData;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.ClearRequestedDojoWave
// (Final, Native, Public, BlueprintCallable)

void UWKNDGameInstance::ClearRequestedDojoWave()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.ClearRequestedDojoWave");

	UWKNDGameInstance_ClearRequestedDojoWave_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGameInstance.ClearOculusLoadingScreen
// (Final, Native, Public, BlueprintCallable)

void UWKNDGameInstance::ClearOculusLoadingScreen()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.ClearOculusLoadingScreen");

	UWKNDGameInstance_ClearOculusLoadingScreen_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGameInstance.AttemptSaveGameSettings
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDGameInstance::AttemptSaveGameSettings()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.AttemptSaveGameSettings");

	UWKNDGameInstance_AttemptSaveGameSettings_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.AttemptSaveGame
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDGameInstance::AttemptSaveGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.AttemptSaveGame");

	UWKNDGameInstance_AttemptSaveGame_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameInstance.AttemptLoadGame
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDGameInstance::AttemptLoadGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameInstance.AttemptLoadGame");

	UWKNDGameInstance_AttemptLoadGame_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameMode.TogglePause
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AWKNDGameMode::TogglePause()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameMode.TogglePause");

	AWKNDGameMode_TogglePause_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGameMode.ToggleHaptics
// (Final, Exec, Native, Public)

void AWKNDGameMode::ToggleHaptics()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameMode.ToggleHaptics");

	AWKNDGameMode_ToggleHaptics_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGameMode.IsGameWorldReady
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDGameMode::STATIC_IsGameWorldReady()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameMode.IsGameWorldReady");

	AWKNDGameMode_IsGameWorldReady_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameMode.IsAnAnimatingPose
// (Final, Native, Public)
// Parameters:
// struct FAnimTypeDropdown       PoseName                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDGameMode::IsAnAnimatingPose(const struct FAnimTypeDropdown& PoseName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameMode.IsAnAnimatingPose");

	AWKNDGameMode_IsAnAnimatingPose_Params params;
	params.PoseName = PoseName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameMode.InitDialogueManagerWithSpeakingActors
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AWKNDDialogueManager*    DM                             (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDGameMode::InitDialogueManagerWithSpeakingActors(class AWKNDDialogueManager* DM)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameMode.InitDialogueManagerWithSpeakingActors");

	AWKNDGameMode_InitDialogueManagerWithSpeakingActors_Params params;
	params.DM = DM;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGameMode.GetSaberManager
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ARPOCSaberManager*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ARPOCSaberManager* AWKNDGameMode::GetSaberManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameMode.GetSaberManager");

	AWKNDGameMode_GetSaberManager_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameMode.GetPauseManager
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AWKNDPauseManager*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AWKNDPauseManager* AWKNDGameMode::GetPauseManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameMode.GetPauseManager");

	AWKNDGameMode_GetPauseManager_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameMode.GetHapticsManager
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UNTHapticManagerComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UNTHapticManagerComponent* AWKNDGameMode::GetHapticsManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameMode.GetHapticsManager");

	AWKNDGameMode_GetHapticsManager_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameMode.GetFoleySoundManager
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWKNDFoleySoundManager*  ReturnValue                    (ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UWKNDFoleySoundManager* AWKNDGameMode::GetFoleySoundManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameMode.GetFoleySoundManager");

	AWKNDGameMode_GetFoleySoundManager_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameMode.GetDialogueManager
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AWKNDDialogueManager*    ReturnValue                    (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AWKNDDialogueManager* AWKNDGameMode::GetDialogueManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameMode.GetDialogueManager");

	AWKNDGameMode_GetDialogueManager_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameMode.GetCoordinator
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ARICEAICoordinator*      ReturnValue                    (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ARICEAICoordinator* AWKNDGameMode::GetCoordinator()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameMode.GetCoordinator");

	AWKNDGameMode_GetCoordinator_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGameMode.EnableConsoleMenu
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           Enable                         (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDGameMode::EnableConsoleMenu(bool Enable)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameMode.EnableConsoleMenu");

	AWKNDGameMode_EnableConsoleMenu_Params params;
	params.Enable = Enable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGameMode.DestroyPauseMenu
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AWKNDGameMode::DestroyPauseMenu()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGameMode.DestroyPauseMenu");

	AWKNDGameMode_DestroyPauseMenu_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGrabbableComponent.SetPrimitiveComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*     Prim                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UWKNDGrabbableComponent::SetPrimitiveComponent(class UPrimitiveComponent* Prim)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabbableComponent.SetPrimitiveComponent");

	UWKNDGrabbableComponent_SetPrimitiveComponent_Params params;
	params.Prim = Prim;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGrabbableComponent.SetLooseCarry
// (Final, Native, Public)
// Parameters:
// bool                           shouldBeLoose                  (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDGrabbableComponent::SetLooseCarry(bool shouldBeLoose)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabbableComponent.SetLooseCarry");

	UWKNDGrabbableComponent_SetLooseCarry_Params params;
	params.shouldBeLoose = shouldBeLoose;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGrabbableComponent.SetGrabbablePrimitive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*     inGrabbablePrimitive           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UWKNDGrabbableComponent::SetGrabbablePrimitive(class UPrimitiveComponent* inGrabbablePrimitive)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabbableComponent.SetGrabbablePrimitive");

	UWKNDGrabbableComponent_SetGrabbablePrimitive_Params params;
	params.inGrabbablePrimitive = inGrabbablePrimitive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGrabbableComponent.SetDroppable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           CanDrop                        (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDGrabbableComponent::SetDroppable(bool CanDrop)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabbableComponent.SetDroppable");

	UWKNDGrabbableComponent_SetDroppable_Params params;
	params.CanDrop = CanDrop;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGrabbableComponent.SetDisabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           Disabled                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   DisabledBy                     (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDGrabbableComponent::SetDisabled(bool Disabled, const struct FName& DisabledBy)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabbableComponent.SetDisabled");

	UWKNDGrabbableComponent_SetDisabled_Params params;
	params.Disabled = Disabled;
	params.DisabledBy = DisabledBy;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGrabbableComponent.SetCurrentHandPosition
// (Final, Native, Public)
// Parameters:
// EHandPosition                  nextHandPosition               (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDGrabbableComponent::SetCurrentHandPosition(EHandPosition nextHandPosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabbableComponent.SetCurrentHandPosition");

	UWKNDGrabbableComponent_SetCurrentHandPosition_Params params;
	params.nextHandPosition = nextHandPosition;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGrabbableComponent.SetActorDroppable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           CanDrop                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDGrabbableComponent::STATIC_SetActorDroppable(class AActor* Actor, bool CanDrop)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabbableComponent.SetActorDroppable");

	UWKNDGrabbableComponent_SetActorDroppable_Params params;
	params.Actor = Actor;
	params.CanDrop = CanDrop;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGrabbableComponent.RemoveGrabLocators
// (Final, Native, Public, HasOutParms)
// Parameters:
// TArray<class URPOCGrabLocatorComponent*> toRemove                       (Parm, OutParm, ZeroConstructor)

void UWKNDGrabbableComponent::RemoveGrabLocators(TArray<class URPOCGrabLocatorComponent*>* toRemove)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabbableComponent.RemoveGrabLocators");

	UWKNDGrabbableComponent_RemoveGrabLocators_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (toRemove != nullptr)
		*toRemove = params.toRemove;
}


// Function WKND.WKNDGrabbableComponent.Release
// (Final, Native, Public)
// Parameters:
// bool                           preventImpulse                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDGrabbableComponent::Release(bool preventImpulse)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabbableComponent.Release");

	UWKNDGrabbableComponent_Release_Params params;
	params.preventImpulse = preventImpulse;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGrabbableComponent.RegisterGrabLocator
// (Final, Native, Public)
// Parameters:
// class URPOCGrabLocatorComponent* GrabLocator                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UWKNDGrabbableComponent::RegisterGrabLocator(class URPOCGrabLocatorComponent* GrabLocator)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabbableComponent.RegisterGrabLocator");

	UWKNDGrabbableComponent_RegisterGrabLocator_Params params;
	params.GrabLocator = GrabLocator;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGrabbableComponent.OnOwnerCollision
// (Native, Protected, HasOutParms, HasDefaults)
// Parameters:
// class AActor*                  SelfActor                      (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 NormalImpulse                  (Parm, IsPlainOldData)
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void UWKNDGrabbableComponent::OnOwnerCollision(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabbableComponent.OnOwnerCollision");

	UWKNDGrabbableComponent_OnOwnerCollision_Params params;
	params.SelfActor = SelfActor;
	params.OtherActor = OtherActor;
	params.NormalImpulse = NormalImpulse;
	params.Hit = Hit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGrabbableComponent.IsLooseCarry
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDGrabbableComponent::IsLooseCarry()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabbableComponent.IsLooseCarry");

	UWKNDGrabbableComponent_IsLooseCarry_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGrabbableComponent.IsHeld
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDGrabbableComponent::IsHeld()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabbableComponent.IsHeld");

	UWKNDGrabbableComponent_IsHeld_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGrabbableComponent.IsDroppable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDGrabbableComponent::IsDroppable()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabbableComponent.IsDroppable");

	UWKNDGrabbableComponent_IsDroppable_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGrabbableComponent.IsActorDroppable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDGrabbableComponent::STATIC_IsActorDroppable(class AActor* Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabbableComponent.IsActorDroppable");

	UWKNDGrabbableComponent_IsActorDroppable_Params params;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGrabbableComponent.InitReposition
// (Final, Native, Public, HasDefaults)
// Parameters:
// struct FTransform              HandTransform                  (Parm, IsPlainOldData)
// float                          RepositioningTime              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bKeepRelativeRotation          (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDGrabbableComponent::InitReposition(const struct FTransform& HandTransform, float RepositioningTime, bool bKeepRelativeRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabbableComponent.InitReposition");

	UWKNDGrabbableComponent_InitReposition_Params params;
	params.HandTransform = HandTransform;
	params.RepositioningTime = RepositioningTime;
	params.bKeepRelativeRotation = bKeepRelativeRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGrabbableComponent.Grab
// (Final, Native, Public, HasOutParms)
// Parameters:
// class UWKNDGrabberComponent*   grabber                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FPickupData             PickupData                     (ConstParm, Parm, OutParm, ReferenceParm)
// class URPOCGrabLocatorComponent* Locator                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class URPOCGrabLocatorComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class URPOCGrabLocatorComponent* UWKNDGrabbableComponent::Grab(class UWKNDGrabberComponent* grabber, const struct FPickupData& PickupData, class URPOCGrabLocatorComponent* Locator)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabbableComponent.Grab");

	UWKNDGrabbableComponent_Grab_Params params;
	params.grabber = grabber;
	params.PickupData = PickupData;
	params.Locator = Locator;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGrabbableComponent.GetRegressedVelocity
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector UWKNDGrabbableComponent::GetRegressedVelocity()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabbableComponent.GetRegressedVelocity");

	UWKNDGrabbableComponent_GetRegressedVelocity_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGrabbableComponent.GetRegressedAngularVelocity
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector UWKNDGrabbableComponent::GetRegressedAngularVelocity()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabbableComponent.GetRegressedAngularVelocity");

	UWKNDGrabbableComponent_GetRegressedAngularVelocity_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGrabbableComponent.GetPrimitiveComponent
// (Final, Native, Public, Const)
// Parameters:
// class URPOCGrabLocatorComponent* Locator                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class UPrimitiveComponent*     ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UPrimitiveComponent* UWKNDGrabbableComponent::GetPrimitiveComponent(class URPOCGrabLocatorComponent* Locator)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabbableComponent.GetPrimitiveComponent");

	UWKNDGrabbableComponent_GetPrimitiveComponent_Params params;
	params.Locator = Locator;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGrabbableComponent.GetLatestVelocityFromBuffer
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector UWKNDGrabbableComponent::GetLatestVelocityFromBuffer()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabbableComponent.GetLatestVelocityFromBuffer");

	UWKNDGrabbableComponent_GetLatestVelocityFromBuffer_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGrabbableComponent.GetHoldingActor
// (Final, Native, Public)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* UWKNDGrabbableComponent::GetHoldingActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabbableComponent.GetHoldingActor");

	UWKNDGrabbableComponent_GetHoldingActor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGrabbableComponent.GetGrabLocatorArray
// (Final, Native, Public, Const)
// Parameters:
// TArray<class URPOCGrabLocatorComponent*> ReturnValue                    (ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm)

TArray<class URPOCGrabLocatorComponent*> UWKNDGrabbableComponent::GetGrabLocatorArray()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabbableComponent.GetGrabLocatorArray");

	UWKNDGrabbableComponent_GetGrabLocatorArray_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGrabbableComponent.GetGrabLocator
// (Final, Native, Public, HasOutParms, HasDefaults)
// Parameters:
// struct FVector                 GrabShapeLocation              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// EGrabHand                      Hand                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           Main                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           RangedOnly                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ignoreMaxRange                 (Parm, ZeroConstructor, IsPlainOldData)
// class URPOCGrabLocatorComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class URPOCGrabLocatorComponent* UWKNDGrabbableComponent::GetGrabLocator(const struct FVector& GrabShapeLocation, EGrabHand Hand, bool Main, bool RangedOnly, bool ignoreMaxRange)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabbableComponent.GetGrabLocator");

	UWKNDGrabbableComponent_GetGrabLocator_Params params;
	params.GrabShapeLocation = GrabShapeLocation;
	params.Hand = Hand;
	params.Main = Main;
	params.RangedOnly = RangedOnly;
	params.ignoreMaxRange = ignoreMaxRange;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGrabbableComponent.GetGrabbedLocator
// (Final, Native, Public)
// Parameters:
// class URPOCGrabLocatorComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class URPOCGrabLocatorComponent* UWKNDGrabbableComponent::GetGrabbedLocator()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabbableComponent.GetGrabbedLocator");

	UWKNDGrabbableComponent_GetGrabbedLocator_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGrabbableComponent.GetAnimType
// (Final, Native, Public)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName UWKNDGrabbableComponent::GetAnimType()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabbableComponent.GetAnimType");

	UWKNDGrabbableComponent_GetAnimType_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGrabbableComponent.EnablePhysicsSimulation
// (Final, Native, Public)
// Parameters:
// bool                           Enable                         (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDGrabbableComponent::EnablePhysicsSimulation(bool Enable)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabbableComponent.EnablePhysicsSimulation");

	UWKNDGrabbableComponent_EnablePhysicsSimulation_Params params;
	params.Enable = Enable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGrabbableComponent.CanBePickedUp
// (Final, Native, Public, HasOutParms, HasDefaults)
// Parameters:
// struct FVector                 GrabSphereLoc                  (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 outGrabDirection               (Parm, OutParm, IsPlainOldData)
// float                          outDistance                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDGrabbableComponent::CanBePickedUp(const struct FVector& GrabSphereLoc, struct FVector* outGrabDirection, float* outDistance)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabbableComponent.CanBePickedUp");

	UWKNDGrabbableComponent_CanBePickedUp_Params params;
	params.GrabSphereLoc = GrabSphereLoc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (outGrabDirection != nullptr)
		*outGrabDirection = params.outGrabDirection;
	if (outDistance != nullptr)
		*outDistance = params.outDistance;

	return params.ReturnValue;
}


// Function WKND.WKNDGrabbableComponent.ApplyImpulseOnRelease
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDGrabbableComponent::ApplyImpulseOnRelease()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabbableComponent.ApplyImpulseOnRelease");

	UWKNDGrabbableComponent_ApplyImpulseOnRelease_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGrabbableComponent.AddGrabLocators
// (Final, Native, Public, HasOutParms)
// Parameters:
// TArray<class URPOCGrabLocatorComponent*> toAdd                          (Parm, OutParm, ZeroConstructor)

void UWKNDGrabbableComponent::AddGrabLocators(TArray<class URPOCGrabLocatorComponent*>* toAdd)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabbableComponent.AddGrabLocators");

	UWKNDGrabbableComponent_AddGrabLocators_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (toAdd != nullptr)
		*toAdd = params.toAdd;
}


// Function WKND.WKNDGrabberComponentWithPhysics.SetPhysicsHandleParams
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FNTPhysicsHandleParams  Settings                       (ConstParm, Parm, OutParm, ReferenceParm)

void UWKNDGrabberComponentWithPhysics::SetPhysicsHandleParams(const struct FNTPhysicsHandleParams& Settings)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabberComponentWithPhysics.SetPhysicsHandleParams");

	UWKNDGrabberComponentWithPhysics_SetPhysicsHandleParams_Params params;
	params.Settings = Settings;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGrabberComponentWithPhysics.Drop
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           GoIntoRecoveryState            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           preventImpulse                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDGrabberComponentWithPhysics::Drop(bool GoIntoRecoveryState, bool preventImpulse)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGrabberComponentWithPhysics.Drop");

	UWKNDGrabberComponentWithPhysics_Drop_Params params;
	params.GoIntoRecoveryState = GoIntoRecoveryState;
	params.preventImpulse = preventImpulse;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDGunnerComponent.ShootAtActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  TargetActor                    (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EShotSpecifier>    specifier                      (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EActorSide>        side                           (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDGunnerComponent::ShootAtActor(class AActor* TargetActor, TEnumAsByte<EShotSpecifier> specifier, TEnumAsByte<EActorSide> side)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGunnerComponent.ShootAtActor");

	UWKNDGunnerComponent_ShootAtActor_Params params;
	params.TargetActor = TargetActor;
	params.specifier = specifier;
	params.side = side;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGunnerComponent.EquipWeapon
// (Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  weapon                         (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDGunnerComponent::EquipWeapon(class AActor* weapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGunnerComponent.EquipWeapon");

	UWKNDGunnerComponent_EquipWeapon_Params params;
	params.weapon = weapon;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDGunnerComponent.ClearWeapon
// (Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  weapon                         (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDGunnerComponent::ClearWeapon(class AActor* weapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDGunnerComponent.ClearWeapon");

	UWKNDGunnerComponent_ClearWeapon_Params params;
	params.weapon = weapon;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDHapticFeedbackComponent.SetOuterBounds
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*     CollisionComponent             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UWKNDHapticFeedbackComponent::SetOuterBounds(class UPrimitiveComponent* CollisionComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDHapticFeedbackComponent.SetOuterBounds");

	UWKNDHapticFeedbackComponent_SetOuterBounds_Params params;
	params.CollisionComponent = CollisionComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDHapticFeedbackComponent.SetInnerBounds
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*     CollisionComponent             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UWKNDHapticFeedbackComponent::SetInnerBounds(class UPrimitiveComponent* CollisionComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDHapticFeedbackComponent.SetInnerBounds");

	UWKNDHapticFeedbackComponent_SetInnerBounds_Params params;
	params.CollisionComponent = CollisionComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDHapticFeedbackComponent.OnOwnerEndOverlap
// (Final, Native, Protected)
// Parameters:
// class AActor*                  ThisActor                      (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDHapticFeedbackComponent::OnOwnerEndOverlap(class AActor* ThisActor, class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDHapticFeedbackComponent.OnOwnerEndOverlap");

	UWKNDHapticFeedbackComponent_OnOwnerEndOverlap_Params params;
	params.ThisActor = ThisActor;
	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDHapticFeedbackComponent.OnOuterBoundsBeginOverlap
// (Final, Native, Private, HasOutParms)
// Parameters:
// class UPrimitiveComponent*     OverlappedComponent            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            OtherBodyIndex                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFromSweep                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepResult                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void UWKNDHapticFeedbackComponent::OnOuterBoundsBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDHapticFeedbackComponent.OnOuterBoundsBeginOverlap");

	UWKNDHapticFeedbackComponent_OnOuterBoundsBeginOverlap_Params params;
	params.OverlappedComponent = OverlappedComponent;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;
	params.bFromSweep = bFromSweep;
	params.SweepResult = SweepResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDHapticFeedbackComponent.OnInnerBoundsEndOverlap
// (Final, Native, Private)
// Parameters:
// class UPrimitiveComponent*     OverlappedComponent            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            OtherBodyIndex                 (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDHapticFeedbackComponent::OnInnerBoundsEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDHapticFeedbackComponent.OnInnerBoundsEndOverlap");

	UWKNDHapticFeedbackComponent_OnInnerBoundsEndOverlap_Params params;
	params.OverlappedComponent = OverlappedComponent;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDHapticFeedbackComponent.OnInnerBoundsBeginOverlap
// (Final, Native, Private, HasOutParms)
// Parameters:
// class UPrimitiveComponent*     OverlappedComponent            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            OtherBodyIndex                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFromSweep                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepResult                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void UWKNDHapticFeedbackComponent::OnInnerBoundsBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDHapticFeedbackComponent.OnInnerBoundsBeginOverlap");

	UWKNDHapticFeedbackComponent_OnInnerBoundsBeginOverlap_Params params;
	params.OverlappedComponent = OverlappedComponent;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;
	params.bFromSweep = bFromSweep;
	params.SweepResult = SweepResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDHealthComponent.TakeDamage
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FWKNDDamageInfo         Info                           (Parm, OutParm, ReferenceParm)

void UWKNDHealthComponent::TakeDamage(struct FWKNDDamageInfo* Info)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDHealthComponent.TakeDamage");

	UWKNDHealthComponent_TakeDamage_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Info != nullptr)
		*Info = params.Info;
}


// Function WKND.WKNDHealthComponent.SetInitialHealth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            NewInitialHealth               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bRestoreCurrentHealth          (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDHealthComponent::SetInitialHealth(int NewInitialHealth, bool bRestoreCurrentHealth)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDHealthComponent.SetInitialHealth");

	UWKNDHealthComponent_SetInitialHealth_Params params;
	params.NewInitialHealth = NewInitialHealth;
	params.bRestoreCurrentHealth = bRestoreCurrentHealth;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDHealthComponent.RestoreHealth
// (Final, Native, Public, BlueprintCallable)

void UWKNDHealthComponent::RestoreHealth()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDHealthComponent.RestoreHealth");

	UWKNDHealthComponent_RestoreHealth_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDHealthComponent.RequestInvulnerableStateChangeWithReason
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bInvulnerable                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 Reason                         (Parm, ZeroConstructor)

void UWKNDHealthComponent::RequestInvulnerableStateChangeWithReason(bool bInvulnerable, const struct FString& Reason)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDHealthComponent.RequestInvulnerableStateChangeWithReason");

	UWKNDHealthComponent_RequestInvulnerableStateChangeWithReason_Params params;
	params.bInvulnerable = bInvulnerable;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDHealthComponent.RequestInvulnerableStateChange
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bInvulnerable                  (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDHealthComponent::RequestInvulnerableStateChange(bool bInvulnerable)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDHealthComponent.RequestInvulnerableStateChange");

	UWKNDHealthComponent_RequestInvulnerableStateChange_Params params;
	params.bInvulnerable = bInvulnerable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDHealthComponent.IsInvulnerable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDHealthComponent::IsInvulnerable()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDHealthComponent.IsInvulnerable");

	UWKNDHealthComponent_IsInvulnerable_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDHealthComponent.IsDead
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDHealthComponent::IsDead()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDHealthComponent.IsDead");

	UWKNDHealthComponent_IsDead_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDHealthComponent.IsAlive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDHealthComponent::IsAlive()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDHealthComponent.IsAlive");

	UWKNDHealthComponent_IsAlive_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDHealthComponent.GetHealthLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            MaxHealthLevel                 (Parm, ZeroConstructor, IsPlainOldData)
// int                            RemainingHealth                (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UWKNDHealthComponent::GetHealthLevel(int MaxHealthLevel, int RemainingHealth)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDHealthComponent.GetHealthLevel");

	UWKNDHealthComponent_GetHealthLevel_Params params;
	params.MaxHealthLevel = MaxHealthLevel;
	params.RemainingHealth = RemainingHealth;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDHealthComponent.GetCustomHealthLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            MaxHealthLevel                 (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UWKNDHealthComponent::GetCustomHealthLevel(int MaxHealthLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDHealthComponent.GetCustomHealthLevel");

	UWKNDHealthComponent_GetCustomHealthLevel_Params params;
	params.MaxHealthLevel = MaxHealthLevel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDHealthComponent.GetCurrentHealthLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UWKNDHealthComponent::GetCurrentHealthLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDHealthComponent.GetCurrentHealthLevel");

	UWKNDHealthComponent_GetCurrentHealthLevel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDHealthComponent.GetCurrentHealth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UWKNDHealthComponent::GetCurrentHealth()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDHealthComponent.GetCurrentHealth");

	UWKNDHealthComponent_GetCurrentHealth_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDHitResponseInterface.ReceiveMynockHit
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                  StrikingActor                  (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDHitResponseInterface::ReceiveMynockHit(class AActor* StrikingActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDHitResponseInterface.ReceiveMynockHit");

	UWKNDHitResponseInterface_ReceiveMynockHit_Params params;
	params.StrikingActor = StrikingActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDHitResponseInterface.ReceiveBlasterHit
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                  StrikingActor                  (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDHitResponseInterface::ReceiveBlasterHit(class AActor* StrikingActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDHitResponseInterface.ReceiveBlasterHit");

	UWKNDHitResponseInterface_ReceiveBlasterHit_Params params;
	params.StrikingActor = StrikingActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDHitResponseInterface.ReceiveBladeHit
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                  StrikingActor                  (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDHitResponseInterface::ReceiveBladeHit(class AActor* StrikingActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDHitResponseInterface.ReceiveBladeHit");

	UWKNDHitResponseInterface_ReceiveBladeHit_Params params;
	params.StrikingActor = StrikingActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDHitResponseInterface.DeflectProjectile
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                  Projectile                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bParried                       (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDHitResponseInterface::DeflectProjectile(class AActor* Projectile, bool bParried)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDHitResponseInterface.DeflectProjectile");

	UWKNDHitResponseInterface_DeflectProjectile_Params params;
	params.Projectile = Projectile;
	params.bParried = bParried;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDHolsterableComponent.OnInteraction
// (Final, Native, Private)
// Parameters:
// EXLABInteractionEventType      InteractionEventType           (Parm, ZeroConstructor, IsPlainOldData)
// TScriptInterface<class UXLABInteractionHandler> Handler                        (Parm, ZeroConstructor, IsPlainOldData)
// TScriptInterface<class UXLABInteractive> Interactive                    (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDHolsterableComponent::OnInteraction(EXLABInteractionEventType InteractionEventType, const TScriptInterface<class UXLABInteractionHandler>& Handler, const TScriptInterface<class UXLABInteractive>& Interactive)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDHolsterableComponent.OnInteraction");

	UWKNDHolsterableComponent_OnInteraction_Params params;
	params.InteractionEventType = InteractionEventType;
	params.Handler = Handler;
	params.Interactive = Interactive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDHolsterableComponent.GetHolsterSocketName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName UWKNDHolsterableComponent::GetHolsterSocketName()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDHolsterableComponent.GetHolsterSocketName");

	UWKNDHolsterableComponent_GetHolsterSocketName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDHolsterableExtension.OnAttachedToToolbelt
// (Native, Event, Public, BlueprintEvent)

void UWKNDHolsterableExtension::OnAttachedToToolbelt()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDHolsterableExtension.OnAttachedToToolbelt");

	UWKNDHolsterableExtension_OnAttachedToToolbelt_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDHolsterableExtension.GetHolsterSocketName
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName UWKNDHolsterableExtension::GetHolsterSocketName()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDHolsterableExtension.GetHolsterSocketName");

	UWKNDHolsterableExtension_GetHolsterSocketName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDHolsterComponent.Grab
// (Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  actorToGrab                    (Parm, ZeroConstructor, IsPlainOldData)
// class URPOCGrabLocatorComponent* Locator                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDHolsterComponent::Grab(class AActor* actorToGrab, class URPOCGrabLocatorComponent* Locator)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDHolsterComponent.Grab");

	UWKNDHolsterComponent_Grab_Params params;
	params.actorToGrab = actorToGrab;
	params.Locator = Locator;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDHolsterComponent.Drop
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           GoIntoRecoveryState            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           preventImpulse                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDHolsterComponent::Drop(bool GoIntoRecoveryState, bool preventImpulse)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDHolsterComponent.Drop");

	UWKNDHolsterComponent_Drop_Params params;
	params.GoIntoRecoveryState = GoIntoRecoveryState;
	params.preventImpulse = preventImpulse;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDMotionController.WidgetRelease
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDMotionController::WidgetRelease()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.WidgetRelease");

	AWKNDMotionController_WidgetRelease_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDMotionController.WidgetInteract
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDMotionController::WidgetInteract()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.WidgetInteract");

	AWKNDMotionController_WidgetInteract_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDMotionController.UpdateTouchData
// (Final, Native, Private)
// Parameters:
// float                          DeltaSeconds                   (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDMotionController::UpdateTouchData(float DeltaSeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.UpdateTouchData");

	AWKNDMotionController_UpdateTouchData_Params params;
	params.DeltaSeconds = DeltaSeconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.UpdateHandAwarenessAnims
// (Final, Native, Protected)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDMotionController::UpdateHandAwarenessAnims(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.UpdateHandAwarenessAnims");

	AWKNDMotionController_UpdateHandAwarenessAnims_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.UpdateClimber
// (Final, Native, Public)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDMotionController::UpdateClimber(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.UpdateClimber");

	AWKNDMotionController_UpdateClimber_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.ToggleTeleportOnClimb
// (Final, Native, Static, Public)

void AWKNDMotionController::STATIC_ToggleTeleportOnClimb()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.ToggleTeleportOnClimb");

	AWKNDMotionController_ToggleTeleportOnClimb_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.ToggleSnapTurnLocks
// (Final, Native, Static, Public)

void AWKNDMotionController::STATIC_ToggleSnapTurnLocks()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.ToggleSnapTurnLocks");

	AWKNDMotionController_ToggleSnapTurnLocks_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.ToggleDebugNavMagnets
// (Final, Native, Static, Public)

void AWKNDMotionController::STATIC_ToggleDebugNavMagnets()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.ToggleDebugNavMagnets");

	AWKNDMotionController_ToggleDebugNavMagnets_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.StopDisarmMontage
// (Event, Public, BlueprintEvent)

void AWKNDMotionController::StopDisarmMontage()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.StopDisarmMontage");

	AWKNDMotionController_StopDisarmMontage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.StartWeaponHitLag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          startDelay                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          lagDuration                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          lagStrength                    (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDMotionController::StartWeaponHitLag(float startDelay, float lagDuration, float lagStrength)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.StartWeaponHitLag");

	AWKNDMotionController_StartWeaponHitLag_Params params;
	params.startDelay = startDelay;
	params.lagDuration = lagDuration;
	params.lagStrength = lagStrength;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.StartClimbShock
// (Final, Native, Public)
// Parameters:
// float                          Magnitude                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDMotionController::StartClimbShock(float Magnitude, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.StartClimbShock");

	AWKNDMotionController_StartClimbShock_Params params;
	params.Magnitude = Magnitude;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.Squeeze
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          RawPinchAmount                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          RawGrabAmount                  (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDMotionController::Squeeze(float RawPinchAmount, float RawGrabAmount)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.Squeeze");

	AWKNDMotionController_Squeeze_Params params;
	params.RawPinchAmount = RawPinchAmount;
	params.RawGrabAmount = RawGrabAmount;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.ShowTeleportDestination
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                           alsoShowArcEndpoint            (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDMotionController::ShowTeleportDestination(bool alsoShowArcEndpoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.ShowTeleportDestination");

	AWKNDMotionController_ShowTeleportDestination_Params params;
	params.alsoShowArcEndpoint = alsoShowArcEndpoint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.ShouldDisplayNavMagnetVisualization
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDMotionController::ShouldDisplayNavMagnetVisualization()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.ShouldDisplayNavMagnetVisualization");

	AWKNDMotionController_ShouldDisplayNavMagnetVisualization_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDMotionController.ShouldDisplayHandAnimationInfo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDMotionController::ShouldDisplayHandAnimationInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.ShouldDisplayHandAnimationInfo");

	AWKNDMotionController_ShouldDisplayHandAnimationInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDMotionController.SetTriggerAxisValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Val                            (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDMotionController::SetTriggerAxisValue(float Val)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.SetTriggerAxisValue");

	AWKNDMotionController_SetTriggerAxisValue_Params params;
	params.Val = Val;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.SetTeleportDestination
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                 Location                       (Parm, IsPlainOldData)
// struct FRotator                Rotation                       (Parm, IsPlainOldData)

void AWKNDMotionController::SetTeleportDestination(const struct FVector& Location, const struct FRotator& Rotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.SetTeleportDestination");

	AWKNDMotionController_SetTeleportDestination_Params params;
	params.Location = Location;
	params.Rotation = Rotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.SetTeleportArcColour
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ETeleportUIState               teleportUIState                (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDMotionController::SetTeleportArcColour(ETeleportUIState teleportUIState)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.SetTeleportArcColour");

	AWKNDMotionController_SetTeleportArcColour_Params params;
	params.teleportUIState = teleportUIState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.SetSnapTurnEnabled
// (Final, Native, Public)
// Parameters:
// bool                           Enabled                        (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDMotionController::SetSnapTurnEnabled(bool Enabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.SetSnapTurnEnabled");

	AWKNDMotionController_SetSnapTurnEnabled_Params params;
	params.Enabled = Enabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.SetPlayerHeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Height                         (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDMotionController::SetPlayerHeight(float Height)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.SetPlayerHeight");

	AWKNDMotionController_SetPlayerHeight_Params params;
	params.Height = Height;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.SetPinHand
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                           Val                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AWKNDMotionController::SetPinHand(bool Val)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.SetPinHand");

	AWKNDMotionController_SetPinHand_Params params;
	params.Val = Val;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.SetOtherController
// (Final, Native, Public)
// Parameters:
// class AWKNDMotionController*   Other                          (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDMotionController::SetOtherController(class AWKNDMotionController* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.SetOtherController");

	AWKNDMotionController_SetOtherController_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.SetIsPointing
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bPoint                         (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDMotionController::SetIsPointing(bool bPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.SetIsPointing");

	AWKNDMotionController_SetIsPointing_Params params;
	params.bPoint = bPoint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.SetGripState
// (Final, Native, Private)
// Parameters:
// EGripState                     NewState                       (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDMotionController::SetGripState(EGripState NewState)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.SetGripState");

	AWKNDMotionController_SetGripState_Params params;
	params.NewState = NewState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.SetGrabRadius
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDMotionController::SetGrabRadius(float Radius)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.SetGrabRadius");

	AWKNDMotionController_SetGrabRadius_Params params;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.SetEnvironmentCollisionMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHandEnvironmentInteractionMode InteractionMode                (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDMotionController::SetEnvironmentCollisionMode(EHandEnvironmentInteractionMode InteractionMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.SetEnvironmentCollisionMode");

	AWKNDMotionController_SetEnvironmentCollisionMode_Params params;
	params.InteractionMode = InteractionMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.SetEnvironmentCollisionEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDMotionController::SetEnvironmentCollisionEnabled(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.SetEnvironmentCollisionEnabled");

	AWKNDMotionController_SetEnvironmentCollisionEnabled_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.SetEnableVRWidgetInteraction
// (Final, Native, Public)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDMotionController::SetEnableVRWidgetInteraction(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.SetEnableVRWidgetInteraction");

	AWKNDMotionController_SetEnableVRWidgetInteraction_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.SetControllerHand
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EControllerHand                Hand                           (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDMotionController::SetControllerHand(EControllerHand Hand)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.SetControllerHand");

	AWKNDMotionController_SetControllerHand_Params params;
	params.Hand = Hand;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.SendUMGClick
// (Event, Public, BlueprintEvent)

void AWKNDMotionController::SendUMGClick()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.SendUMGClick");

	AWKNDMotionController_SendUMGClick_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.RequestHandPose
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UAnimMontage*            AnimMontage                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FNTAnimVarStruct        animData                       (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           lockReadyPosers                (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDMotionController::RequestHandPose(class UAnimMontage* AnimMontage, const struct FNTAnimVarStruct& animData, bool lockReadyPosers)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.RequestHandPose");

	AWKNDMotionController_RequestHandPose_Params params;
	params.AnimMontage = AnimMontage;
	params.animData = animData;
	params.lockReadyPosers = lockReadyPosers;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.ReleaseUMGClick
// (Event, Public, BlueprintEvent)

void AWKNDMotionController::ReleaseUMGClick()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.ReleaseUMGClick");

	AWKNDMotionController_ReleaseUMGClick_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.ReleaseClimbHold
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           Force                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           WithFallBehaviour              (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDMotionController::ReleaseClimbHold(bool Force, bool WithFallBehaviour)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.ReleaseClimbHold");

	AWKNDMotionController_ReleaseClimbHold_Params params;
	params.Force = Force;
	params.WithFallBehaviour = WithFallBehaviour;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.ReleaseActor_Internal
// (Final, Native, Private)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDMotionController::ReleaseActor_Internal()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.ReleaseActor_Internal");

	AWKNDMotionController_ReleaseActor_Internal_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDMotionController.ReceiveOnNotHeldInBothHands
// (Event, Public, BlueprintEvent)

void AWKNDMotionController::ReceiveOnNotHeldInBothHands()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.ReceiveOnNotHeldInBothHands");

	AWKNDMotionController_ReceiveOnNotHeldInBothHands_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.ReceiveOnNewGripState
// (Event, Public, BlueprintEvent)

void AWKNDMotionController::ReceiveOnNewGripState()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.ReceiveOnNewGripState");

	AWKNDMotionController_ReceiveOnNewGripState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.ReceiveOnIndexFingerEndOverlap
// (Event, Public, BlueprintEvent)

void AWKNDMotionController::ReceiveOnIndexFingerEndOverlap()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.ReceiveOnIndexFingerEndOverlap");

	AWKNDMotionController_ReceiveOnIndexFingerEndOverlap_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.ReceiveOnIndexFingerBeginOverlap
// (Event, Public, BlueprintEvent)

void AWKNDMotionController::ReceiveOnIndexFingerBeginOverlap()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.ReceiveOnIndexFingerBeginOverlap");

	AWKNDMotionController_ReceiveOnIndexFingerBeginOverlap_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.ReceiveOnHitLagStarted
// (Event, Public, BlueprintEvent)
// Parameters:
// float                          lagDuration                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          lagStrength                    (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDMotionController::ReceiveOnHitLagStarted(float lagDuration, float lagStrength)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.ReceiveOnHitLagStarted");

	AWKNDMotionController_ReceiveOnHitLagStarted_Params params;
	params.lagDuration = lagDuration;
	params.lagStrength = lagStrength;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.ReceiveOnHeldInBothHands
// (Event, Public, BlueprintEvent)

void AWKNDMotionController::ReceiveOnHeldInBothHands()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.ReceiveOnHeldInBothHands");

	AWKNDMotionController_ReceiveOnHeldInBothHands_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.ReceiveOnDropSaber
// (Event, Public, BlueprintEvent)

void AWKNDMotionController::ReceiveOnDropSaber()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.ReceiveOnDropSaber");

	AWKNDMotionController_ReceiveOnDropSaber_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.ReceiveManuallyUpdateHandPosition
// (Event, Public, BlueprintEvent)

void AWKNDMotionController::ReceiveManuallyUpdateHandPosition()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.ReceiveManuallyUpdateHandPosition");

	AWKNDMotionController_ReceiveManuallyUpdateHandPosition_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.ReceiveLockPosers
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                           lock                           (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDMotionController::ReceiveLockPosers(bool lock)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.ReceiveLockPosers");

	AWKNDMotionController_ReceiveLockPosers_Params params;
	params.lock = lock;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.ReceiveInitializeMotionController
// (Event, Public, BlueprintEvent)

void AWKNDMotionController::ReceiveInitializeMotionController()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.ReceiveInitializeMotionController");

	AWKNDMotionController_ReceiveInitializeMotionController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.ReceiveDeactivateTeleporter
// (Event, Public, BlueprintEvent)

void AWKNDMotionController::ReceiveDeactivateTeleporter()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.ReceiveDeactivateTeleporter");

	AWKNDMotionController_ReceiveDeactivateTeleporter_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.ReceiveActivateTeleporter
// (Event, Public, BlueprintEvent)

void AWKNDMotionController::ReceiveActivateTeleporter()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.ReceiveActivateTeleporter");

	AWKNDMotionController_ReceiveActivateTeleporter_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.ReAttachWidgetIntearact
// (Event, Public, BlueprintEvent)

void AWKNDMotionController::ReAttachWidgetIntearact()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.ReAttachWidgetIntearact");

	AWKNDMotionController_ReAttachWidgetIntearact_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.RangedGrabSuccess
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                  GrabbedItem                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          GrabbedRange                   (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDMotionController::RangedGrabSuccess(class AActor* GrabbedItem, float GrabbedRange)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.RangedGrabSuccess");

	AWKNDMotionController_RangedGrabSuccess_Params params;
	params.GrabbedItem = GrabbedItem;
	params.GrabbedRange = GrabbedRange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.OnSqueezeReleased
// (Final, Native, Public)

void AWKNDMotionController::OnSqueezeReleased()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.OnSqueezeReleased");

	AWKNDMotionController_OnSqueezeReleased_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.OnSqueezeActivated
// (Final, Native, Public)

void AWKNDMotionController::OnSqueezeActivated()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.OnSqueezeActivated");

	AWKNDMotionController_OnSqueezeActivated_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.OnSecondHandRelease
// (Event, Public, BlueprintEvent)

void AWKNDMotionController::OnSecondHandRelease()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.OnSecondHandRelease");

	AWKNDMotionController_OnSecondHandRelease_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.OnSecondHandGrab
// (Event, Public, BlueprintEvent)

void AWKNDMotionController::OnSecondHandGrab()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.OnSecondHandGrab");

	AWKNDMotionController_OnSecondHandGrab_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.OnReverseGrip
// (Event, Public, BlueprintEvent)

void AWKNDMotionController::OnReverseGrip()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.OnReverseGrip");

	AWKNDMotionController_OnReverseGrip_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.OnIndexFingerEndOverlap
// (Final, Native, Public)
// Parameters:
// class UPrimitiveComponent*     OverlappedComponent            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            OtherBodyIndex                 (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDMotionController::OnIndexFingerEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.OnIndexFingerEndOverlap");

	AWKNDMotionController_OnIndexFingerEndOverlap_Params params;
	params.OverlappedComponent = OverlappedComponent;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.OnIndexFingerBeginOverlap
// (Final, Native, Public, HasOutParms)
// Parameters:
// class UPrimitiveComponent*     OverlappedComponent            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            OtherBodyIndex                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFromSweep                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepResult                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void AWKNDMotionController::OnIndexFingerBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.OnIndexFingerBeginOverlap");

	AWKNDMotionController_OnIndexFingerBeginOverlap_Params params;
	params.OverlappedComponent = OverlappedComponent;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;
	params.bFromSweep = bFromSweep;
	params.SweepResult = SweepResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.OnHoverFingerEndOverlap
// (Final, Native, Public)
// Parameters:
// class UPrimitiveComponent*     OverlappedComponent            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            OtherBodyIndex                 (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDMotionController::OnHoverFingerEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.OnHoverFingerEndOverlap");

	AWKNDMotionController_OnHoverFingerEndOverlap_Params params;
	params.OverlappedComponent = OverlappedComponent;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.OnHoverFingerBeginOverlap
// (Final, Native, Public, HasOutParms)
// Parameters:
// class UPrimitiveComponent*     OverlappedComponent            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            OtherBodyIndex                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFromSweep                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepResult                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void AWKNDMotionController::OnHoverFingerBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.OnHoverFingerBeginOverlap");

	AWKNDMotionController_OnHoverFingerBeginOverlap_Params params;
	params.OverlappedComponent = OverlappedComponent;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;
	params.bFromSweep = bFromSweep;
	params.SweepResult = SweepResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.OnGripShift
// (Event, Public, BlueprintEvent)

void AWKNDMotionController::OnGripShift()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.OnGripShift");

	AWKNDMotionController_OnGripShift_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.OnForeGrip
// (Event, Public, BlueprintEvent)

void AWKNDMotionController::OnForeGrip()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.OnForeGrip");

	AWKNDMotionController_OnForeGrip_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.OnDenyVRWidgetInput
// (Final, Native, Public)
// Parameters:
// struct FName                   TokenName                      (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDMotionController::OnDenyVRWidgetInput(const struct FName& TokenName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.OnDenyVRWidgetInput");

	AWKNDMotionController_OnDenyVRWidgetInput_Params params;
	params.TokenName = TokenName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.OnAllowVRWidgetInput
// (Final, Native, Public)
// Parameters:
// struct FName                   TokenName                      (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDMotionController::OnAllowVRWidgetInput(const struct FName& TokenName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.OnAllowVRWidgetInput");

	AWKNDMotionController_OnAllowVRWidgetInput_Params params;
	params.TokenName = TokenName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.OnActorReleased
// (Final, Native, Public)
// Parameters:
// class AActor*                  droppedActor                   (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDMotionController::OnActorReleased(class AActor* droppedActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.OnActorReleased");

	AWKNDMotionController_OnActorReleased_Params params;
	params.droppedActor = droppedActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.IsGrabbed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDMotionController::IsGrabbed()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.IsGrabbed");

	AWKNDMotionController_IsGrabbed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDMotionController.HideTeleportDestination
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AWKNDMotionController::HideTeleportDestination()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.HideTeleportDestination");

	AWKNDMotionController_HideTeleportDestination_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.GrabActor_Internal
// (Final, Native, Private)
// Parameters:
// class AActor*                  NearestActor                   (Parm, ZeroConstructor, IsPlainOldData)
// class URPOCGrabLocatorComponent* Locator                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           forceNotReversed               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           GrabbingFromOtherHand          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EGrabResult>       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TEnumAsByte<EGrabResult> AWKNDMotionController::GrabActor_Internal(class AActor* NearestActor, class URPOCGrabLocatorComponent* Locator, bool forceNotReversed, bool GrabbingFromOtherHand)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.GrabActor_Internal");

	AWKNDMotionController_GrabActor_Internal_Params params;
	params.NearestActor = NearestActor;
	params.Locator = Locator;
	params.forceNotReversed = forceNotReversed;
	params.GrabbingFromOtherHand = GrabbingFromOtherHand;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDMotionController.GrabActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  actorToGrab                    (Parm, ZeroConstructor, IsPlainOldData)
// class URPOCGrabLocatorComponent* Locator                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void AWKNDMotionController::GrabActor(class AActor* actorToGrab, class URPOCGrabLocatorComponent* Locator)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.GrabActor");

	AWKNDMotionController_GrabActor_Params params;
	params.actorToGrab = actorToGrab;
	params.Locator = Locator;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.GetWeaponToWrist
// (Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform AWKNDMotionController::GetWeaponToWrist()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.GetWeaponToWrist");

	AWKNDMotionController_GetWeaponToWrist_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDMotionController.GetWeaponSocketTransform
// (Final, Native, Public, HasDefaults)
// Parameters:
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform AWKNDMotionController::GetWeaponSocketTransform()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.GetWeaponSocketTransform");

	AWKNDMotionController_GetWeaponSocketTransform_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDMotionController.GetThumbTouch
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDMotionController::GetThumbTouch()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.GetThumbTouch");

	AWKNDMotionController_GetThumbTouch_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDMotionController.GetSnapEnabled
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDMotionController::GetSnapEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.GetSnapEnabled");

	AWKNDMotionController_GetSnapEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDMotionController.GetPoseAwareness
// (Final, Native, Public)
// Parameters:
// struct FPoseAlphaData          ReturnValue                    (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm)

struct FPoseAlphaData AWKNDMotionController::GetPoseAwareness()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.GetPoseAwareness");

	AWKNDMotionController_GetPoseAwareness_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDMotionController.GetNearestRecenteringPoint
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 PlayerLocation                 (Parm, IsPlainOldData)
// struct FRotator                PlayerRotation                 (Parm, IsPlainOldData)
// struct FTransform              outTransform                   (Parm, OutParm, IsPlainOldData)
// int                            outIndex                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           outFound                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void AWKNDMotionController::GetNearestRecenteringPoint(const struct FVector& PlayerLocation, const struct FRotator& PlayerRotation, struct FTransform* outTransform, int* outIndex, bool* outFound)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.GetNearestRecenteringPoint");

	AWKNDMotionController_GetNearestRecenteringPoint_Params params;
	params.PlayerLocation = PlayerLocation;
	params.PlayerRotation = PlayerRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (outTransform != nullptr)
		*outTransform = params.outTransform;
	if (outIndex != nullptr)
		*outIndex = params.outIndex;
	if (outFound != nullptr)
		*outFound = params.outFound;
}


// Function WKND.WKNDMotionController.GetMotionGripTransform
// (Final, Native, Public, HasDefaults)
// Parameters:
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform AWKNDMotionController::GetMotionGripTransform()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.GetMotionGripTransform");

	AWKNDMotionController_GetMotionGripTransform_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDMotionController.GetHandSocket
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName AWKNDMotionController::GetHandSocket()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.GetHandSocket");

	AWKNDMotionController_GetHandSocket_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDMotionController.GetGrabSocket
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName AWKNDMotionController::GetGrabSocket()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.GetGrabSocket");

	AWKNDMotionController_GetGrabSocket_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDMotionController.GetGrabbableAtRange
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* AWKNDMotionController::GetGrabbableAtRange()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.GetGrabbableAtRange");

	AWKNDMotionController_GetGrabbableAtRange_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDMotionController.GetDotToTarget
// (Final, Native, Public, HasOutParms, HasDefaults)
// Parameters:
// struct FVector                 grabDirection                  (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AWKNDMotionController::GetDotToTarget(const struct FVector& grabDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.GetDotToTarget");

	AWKNDMotionController_GetDotToTarget_Params params;
	params.grabDirection = grabDirection;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDMotionController.GetBoneName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EXLABHandlerBoneType           BoneType                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName AWKNDMotionController::GetBoneName(EXLABHandlerBoneType BoneType)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.GetBoneName");

	AWKNDMotionController_GetBoneName_Params params;
	params.BoneType = BoneType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDMotionController.GetActorNearHand
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bCheckForGrab                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           Debug                          (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* AWKNDMotionController::GetActorNearHand(bool bCheckForGrab, bool Debug)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.GetActorNearHand");

	AWKNDMotionController_GetActorNearHand_Params params;
	params.bCheckForGrab = bCheckForGrab;
	params.Debug = Debug;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDMotionController.FinishedGripShift
// (Final, Native, Public, BlueprintCallable)

void AWKNDMotionController::FinishedGripShift()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.FinishedGripShift");

	AWKNDMotionController_FinishedGripShift_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.EnableFrontendInteraction
// (Final, Native, Public, BlueprintCallable)

void AWKNDMotionController::EnableFrontendInteraction()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.EnableFrontendInteraction");

	AWKNDMotionController_EnableFrontendInteraction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.DoHandRepositioning
// (Final, Native, Private)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDMotionController::DoHandRepositioning(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.DoHandRepositioning");

	AWKNDMotionController_DoHandRepositioning_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.DisableFrontendInteraction
// (Final, Native, Public, BlueprintCallable)

void AWKNDMotionController::DisableFrontendInteraction()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.DisableFrontendInteraction");

	AWKNDMotionController_DisableFrontendInteraction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.DetachWidgetIntearact
// (Event, Public, BlueprintEvent)

void AWKNDMotionController::DetachWidgetIntearact()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.DetachWidgetIntearact");

	AWKNDMotionController_DetachWidgetIntearact_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.DeactivateTeleporter
// (Final, Native, Public, BlueprintCallable)

void AWKNDMotionController::DeactivateTeleporter()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.DeactivateTeleporter");

	AWKNDMotionController_DeactivateTeleporter_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.CheckForReverseGrip
// (Final, Native, Private)
// Parameters:
// struct FName                   SocketName                     (Parm, ZeroConstructor, IsPlainOldData)
// class URPOCGrabLocatorComponent* GrabComponent                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           forceNotReversed               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDMotionController::CheckForReverseGrip(const struct FName& SocketName, class URPOCGrabLocatorComponent* GrabComponent, bool forceNotReversed)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.CheckForReverseGrip");

	AWKNDMotionController_CheckForReverseGrip_Params params;
	params.SocketName = SocketName;
	params.GrabComponent = GrabComponent;
	params.forceNotReversed = forceNotReversed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDMotionController.CheckForceUseStatus
// (Final, Native, Private)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDMotionController::CheckForceUseStatus()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.CheckForceUseStatus");

	AWKNDMotionController_CheckForceUseStatus_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDMotionController.ChannelForceOnActorStart
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                  GrabbedItem                    (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDMotionController::ChannelForceOnActorStart(class AActor* GrabbedItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.ChannelForceOnActorStart");

	AWKNDMotionController_ChannelForceOnActorStart_Params params;
	params.GrabbedItem = GrabbedItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.ChannelForceOnActorComplete
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                  GrabbedItem                    (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDMotionController::ChannelForceOnActorComplete(class AActor* GrabbedItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.ChannelForceOnActorComplete");

	AWKNDMotionController_ChannelForceOnActorComplete_Params params;
	params.GrabbedItem = GrabbedItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.ChannelForceOnActorBroken
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                  GrabbedItem                    (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDMotionController::ChannelForceOnActorBroken(class AActor* GrabbedItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.ChannelForceOnActorBroken");

	AWKNDMotionController_ChannelForceOnActorBroken_Params params;
	params.GrabbedItem = GrabbedItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.AttachHandLocatorToHeldObject
// (Final, Native, Private)
// Parameters:
// TScriptInterface<class URPOCPickupActorInterface> PickupInterface                (Parm, ZeroConstructor, IsPlainOldData)
// class URPOCGrabLocatorComponent* ForSecondaryHold               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           JustHandLocator                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDMotionController::AttachHandLocatorToHeldObject(const TScriptInterface<class URPOCPickupActorInterface>& PickupInterface, class URPOCGrabLocatorComponent* ForSecondaryHold, bool JustHandLocator)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.AttachHandLocatorToHeldObject");

	AWKNDMotionController_AttachHandLocatorToHeldObject_Params params;
	params.PickupInterface = PickupInterface;
	params.ForSecondaryHold = ForSecondaryHold;
	params.JustHandLocator = JustHandLocator;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDMotionController.AttachHandLocatorToController
// (Final, Native, Public)

void AWKNDMotionController::AttachHandLocatorToController()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.AttachHandLocatorToController");

	AWKNDMotionController_AttachHandLocatorToController_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMotionController.ActivateTeleporter
// (Final, Native, Public, BlueprintCallable)

void AWKNDMotionController::ActivateTeleporter()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMotionController.ActivateTeleporter");

	AWKNDMotionController_ActivateTeleporter_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMynock.StartAttacking
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ATargetPoint*            Target                         (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDMynock::StartAttacking(class ATargetPoint* Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMynock.StartAttacking");

	AWKNDMynock_StartAttacking_Params params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMynock.OnReturnedToLoop
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AWKNDMynock::OnReturnedToLoop()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMynock.OnReturnedToLoop");

	AWKNDMynock_OnReturnedToLoop_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMynock.OnAttackStarted
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AWKNDMynock::OnAttackStarted()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMynock.OnAttackStarted");

	AWKNDMynock_OnAttackStarted_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMynock.OnAttackFinished
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AWKNDMynock::OnAttackFinished()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMynock.OnAttackFinished");

	AWKNDMynock_OnAttackFinished_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDMynock.FlyToLoopSpline
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USplineComponent*        spline                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void AWKNDMynock::FlyToLoopSpline(class USplineComponent* spline)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDMynock.FlyToLoopSpline");

	AWKNDMynock_FlyToLoopSpline_Params params;
	params.spline = spline;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPauseContainer.TeleportToContainer
// (Final, Native, Public, BlueprintCallable)

void AWKNDPauseContainer::TeleportToContainer()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPauseContainer.TeleportToContainer");

	AWKNDPauseContainer_TeleportToContainer_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPauseContainer.ReturnPlayer
// (Final, Native, Public, BlueprintCallable)

void AWKNDPauseContainer::ReturnPlayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPauseContainer.ReturnPlayer");

	AWKNDPauseContainer_ReturnPlayer_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPauseManager.UnPauseGame
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDPauseManager::UnPauseGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPauseManager.UnPauseGame");

	AWKNDPauseManager_UnPauseGame_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPauseManager.PauseGame
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bShowPauseMenu                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForcePause                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDPauseManager::PauseGame(bool bShowPauseMenu, bool bForcePause)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPauseManager.PauseGame");

	AWKNDPauseManager_PauseGame_Params params;
	params.bShowPauseMenu = bShowPauseMenu;
	params.bForcePause = bForcePause;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPauseManager.IssueBackToMainMenuCall
// (Final, Native, Public, BlueprintCallable)

void AWKNDPauseManager::IssueBackToMainMenuCall()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPauseManager.IssueBackToMainMenuCall");

	AWKNDPauseManager_IssueBackToMainMenuCall_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPauseManager.IsGamePaused
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDPauseManager::IsGamePaused()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPauseManager.IsGamePaused");

	AWKNDPauseManager_IsGamePaused_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPerformanceCapturer.StopPerformanceCapture
// (Final, Native, Public, BlueprintCallable)

void AWKNDPerformanceCapturer::StopPerformanceCapture()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPerformanceCapturer.StopPerformanceCapture");

	AWKNDPerformanceCapturer_StopPerformanceCapture_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPerformanceCapturer.StartPerformanceCapture
// (Final, Native, Public, BlueprintCallable)

void AWKNDPerformanceCapturer::StartPerformanceCapture()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPerformanceCapturer.StartPerformanceCapture");

	AWKNDPerformanceCapturer_StartPerformanceCapture_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPerformanceCapturer.PerformanceCaptureIsRunning
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDPerformanceCapturer::PerformanceCaptureIsRunning()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPerformanceCapturer.PerformanceCaptureIsRunning");

	AWKNDPerformanceCapturer_PerformanceCaptureIsRunning_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerCameraManager.PlayCameraShake
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UClass*                  ShakeClass                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECameraAnimPlaySpace> PlaySpace                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                UserPlaySpaceRot               (Parm, IsPlainOldData)
// class UCameraShake*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UCameraShake* AWKNDPlayerCameraManager::PlayCameraShake(class UClass* ShakeClass, float Scale, TEnumAsByte<ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerCameraManager.PlayCameraShake");

	AWKNDPlayerCameraManager_PlayCameraShake_Params params;
	params.ShakeClass = ShakeClass;
	params.Scale = Scale;
	params.PlaySpace = PlaySpace;
	params.UserPlaySpaceRot = UserPlaySpaceRot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerCameraManager.EnableCameraShake
// (Final, Native, Public, BlueprintCallable)

void AWKNDPlayerCameraManager::EnableCameraShake()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerCameraManager.EnableCameraShake");

	AWKNDPlayerCameraManager_EnableCameraShake_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerCameraManager.DisableCameraShake
// (Final, Native, Public, BlueprintCallable)

void AWKNDPlayerCameraManager::DisableCameraShake()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerCameraManager.DisableCameraShake");

	AWKNDPlayerCameraManager_DisableCameraShake_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerController.ProjectWorldLocationToScreenNormalised
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 WorldLocation                  (Parm, IsPlainOldData)
// struct FVector2D               ScreenLocationNormalised       (Parm, OutParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDPlayerController::ProjectWorldLocationToScreenNormalised(const struct FVector& WorldLocation, struct FVector2D* ScreenLocationNormalised)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerController.ProjectWorldLocationToScreenNormalised");

	AWKNDPlayerController_ProjectWorldLocationToScreenNormalised_Params params;
	params.WorldLocation = WorldLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ScreenLocationNormalised != nullptr)
		*ScreenLocationNormalised = params.ScreenLocationNormalised;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerController.IsWorldLocationOnScreen
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 WorldLocation                  (Parm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDPlayerController::IsWorldLocationOnScreen(const struct FVector& WorldLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerController.IsWorldLocationOnScreen");

	AWKNDPlayerController_IsWorldLocationOnScreen_Params params;
	params.WorldLocation = WorldLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerController.GetHandInputData
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EControllerHand                Hand                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FHandInputData          ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FHandInputData AWKNDPlayerController::GetHandInputData(EControllerHand Hand)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerController.GetHandInputData");

	AWKNDPlayerController_GetHandInputData_Params params;
	params.Hand = Hand;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerPawn.WasRecentlyHit
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          NumSeconds                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 OutLocation                    (Parm, OutParm, IsPlainOldData)
// struct FVector                 OutDirection                   (Parm, OutParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDPlayerPawn::WasRecentlyHit(float NumSeconds, struct FVector* OutLocation, struct FVector* OutDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.WasRecentlyHit");

	AWKNDPlayerPawn_WasRecentlyHit_Params params;
	params.NumSeconds = NumSeconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutLocation != nullptr)
		*OutLocation = params.OutLocation;
	if (OutDirection != nullptr)
		*OutDirection = params.OutDirection;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerPawn.UsingOutOfBoundsTeleport
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDPlayerPawn::UsingOutOfBoundsTeleport()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.UsingOutOfBoundsTeleport");

	AWKNDPlayerPawn_UsingOutOfBoundsTeleport_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerPawn.UsingHeightAdjust
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDPlayerPawn::UsingHeightAdjust()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.UsingHeightAdjust");

	AWKNDPlayerPawn_UsingHeightAdjust_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerPawn.UseOldTeleportStyle
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDPlayerPawn::STATIC_UseOldTeleportStyle()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.UseOldTeleportStyle");

	AWKNDPlayerPawn_UseOldTeleportStyle_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerPawn.UpdateClimbing
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           AllowMovement                  (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::UpdateClimbing(float DeltaTime, bool AllowMovement)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.UpdateClimbing");

	AWKNDPlayerPawn_UpdateClimbing_Params params;
	params.DeltaTime = DeltaTime;
	params.AllowMovement = AllowMovement;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.UnlockCameraBlackout
// (Final, Native, Public, BlueprintCallable)

void AWKNDPlayerPawn::UnlockCameraBlackout()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.UnlockCameraBlackout");

	AWKNDPlayerPawn_UnlockCameraBlackout_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.UnFreezeCameraLocomotion
// (Final, Native, Public, BlueprintCallable)

void AWKNDPlayerPawn::UnFreezeCameraLocomotion()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.UnFreezeCameraLocomotion");

	AWKNDPlayerPawn_UnFreezeCameraLocomotion_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.UnDisableLocomotion
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   locoReason                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDPlayerPawn::UnDisableLocomotion(const struct FName& locoReason)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.UnDisableLocomotion");

	AWKNDPlayerPawn_UnDisableLocomotion_Params params;
	params.locoReason = locoReason;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerPawn.ToggleVRMode
// (Final, Native, Public, BlueprintCallable)

void AWKNDPlayerPawn::ToggleVRMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.ToggleVRMode");

	AWKNDPlayerPawn_ToggleVRMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.TogglePause
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AWKNDPlayerPawn::TogglePause()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.TogglePause");

	AWKNDPlayerPawn_TogglePause_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.ToggleOverloadOnBurn
// (Final, Native, Static, Public, BlueprintCallable)

void AWKNDPlayerPawn::STATIC_ToggleOverloadOnBurn()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.ToggleOverloadOnBurn");

	AWKNDPlayerPawn_ToggleOverloadOnBurn_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.StopAnimMontage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*            AnimMontage                    (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::StopAnimMontage(class UAnimMontage* AnimMontage)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.StopAnimMontage");

	AWKNDPlayerPawn_StopAnimMontage_Params params;
	params.AnimMontage = AnimMontage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.SnapTurnFinished
// (Final, Native, Protected)

void AWKNDPlayerPawn::SnapTurnFinished()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.SnapTurnFinished");

	AWKNDPlayerPawn_SnapTurnFinished_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.Snap
// (Native, Public, BlueprintCallable)
// Parameters:
// float                          Direction                      (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::Snap(float Direction)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.Snap");

	AWKNDPlayerPawn_Snap_Params params;
	params.Direction = Direction;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.SetUseOutOfBoundsTeleport
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                           boundsTeleport                 (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::STATIC_SetUseOutOfBoundsTeleport(bool boundsTeleport)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.SetUseOutOfBoundsTeleport");

	AWKNDPlayerPawn_SetUseOutOfBoundsTeleport_Params params;
	params.boundsTeleport = boundsTeleport;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.SetUseOldTeleport
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                           oldTeleport                    (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::STATIC_SetUseOldTeleport(bool oldTeleport)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.SetUseOldTeleport");

	AWKNDPlayerPawn_SetUseOldTeleport_Params params;
	params.oldTeleport = oldTeleport;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.SetUseHeightAdjust
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                           heightAdjust                   (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::STATIC_SetUseHeightAdjust(bool heightAdjust)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.SetUseHeightAdjust");

	AWKNDPlayerPawn_SetUseHeightAdjust_Params params;
	params.heightAdjust = heightAdjust;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.SetSnapTurnEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           Enabled                        (Parm, ZeroConstructor, IsPlainOldData)
// EWKNDHands                     hands                          (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::SetSnapTurnEnabled(bool Enabled, EWKNDHands hands)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.SetSnapTurnEnabled");

	AWKNDPlayerPawn_SetSnapTurnEnabled_Params params;
	params.Enabled = Enabled;
	params.hands = hands;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.SetRecenterAnchor
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class AActor*                  Anchor                         (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::SetRecenterAnchor(class AActor* Anchor)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.SetRecenterAnchor");

	AWKNDPlayerPawn_SetRecenterAnchor_Params params;
	params.Anchor = Anchor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.SetMovementContext
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMovementContext               nextMovementContext            (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::SetMovementContext(EMovementContext nextMovementContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.SetMovementContext");

	AWKNDPlayerPawn_SetMovementContext_Params params;
	params.nextMovementContext = nextMovementContext;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.SetManualBlackoutDistances
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          StartDistance                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          CompleteDistance               (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::SetManualBlackoutDistances(float StartDistance, float CompleteDistance)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.SetManualBlackoutDistances");

	AWKNDPlayerPawn_SetManualBlackoutDistances_Params params;
	params.StartDistance = StartDistance;
	params.CompleteDistance = CompleteDistance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.SetEnvironmentCollisionMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHandEnvironmentInteractionMode InteractionMode                (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::SetEnvironmentCollisionMode(EHandEnvironmentInteractionMode InteractionMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.SetEnvironmentCollisionMode");

	AWKNDPlayerPawn_SetEnvironmentCollisionMode_Params params;
	params.InteractionMode = InteractionMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.SetEnvironmentCollisionEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::SetEnvironmentCollisionEnabled(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.SetEnvironmentCollisionEnabled");

	AWKNDPlayerPawn_SetEnvironmentCollisionEnabled_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.SetDeflectionToleranceMultiplierActive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           newActive                      (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::SetDeflectionToleranceMultiplierActive(bool newActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.SetDeflectionToleranceMultiplierActive");

	AWKNDPlayerPawn_SetDeflectionToleranceMultiplierActive_Params params;
	params.newActive = newActive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.SetDeflectionToleranceMultiplier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewMultiplier                  (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::SetDeflectionToleranceMultiplier(float NewMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.SetDeflectionToleranceMultiplier");

	AWKNDPlayerPawn_SetDeflectionToleranceMultiplier_Params params;
	params.NewMultiplier = NewMultiplier;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.SetCameraConstraintDistances
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          StartDistance                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          EndDistance                    (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::SetCameraConstraintDistances(float StartDistance, float EndDistance)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.SetCameraConstraintDistances");

	AWKNDPlayerPawn_SetCameraConstraintDistances_Params params;
	params.StartDistance = StartDistance;
	params.EndDistance = EndDistance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.SetAllowHandBurns
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                           allow                          (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::STATIC_SetAllowHandBurns(bool allow)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.SetAllowHandBurns");

	AWKNDPlayerPawn_SetAllowHandBurns_Params params;
	params.allow = allow;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.ResetVR
// (Native, Public, BlueprintCallable)

void AWKNDPlayerPawn::ResetVR()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.ResetVR");

	AWKNDPlayerPawn_ResetVR_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.ReleaseClimbHolds
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           WithFallBehaviour              (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::ReleaseClimbHolds(bool WithFallBehaviour)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.ReleaseClimbHolds");

	AWKNDPlayerPawn_ReleaseClimbHolds_Params params;
	params.WithFallBehaviour = WithFallBehaviour;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.RegisterDeflectionResult
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bSuccess                       (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::RegisterDeflectionResult(bool bSuccess)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.RegisterDeflectionResult");

	AWKNDPlayerPawn_RegisterDeflectionResult_Params params;
	params.bSuccess = bSuccess;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.RecenterPlayerIfPossible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDPlayerPawn::RecenterPlayerIfPossible()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.RecenterPlayerIfPossible");

	AWKNDPlayerPawn_RecenterPlayerIfPossible_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerPawn.RecenterCameraDuringTurns
// (Final, Native, Public, BlueprintCallable)

void AWKNDPlayerPawn::RecenterCameraDuringTurns()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.RecenterCameraDuringTurns");

	AWKNDPlayerPawn_RecenterCameraDuringTurns_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.ReceiveOnTeleport
// (Event, Public, BlueprintEvent)
// Parameters:
// class AWKNDMotionController*   MotionController               (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::ReceiveOnTeleport(class AWKNDMotionController* MotionController)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.ReceiveOnTeleport");

	AWKNDPlayerPawn_ReceiveOnTeleport_Params params;
	params.MotionController = MotionController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.ReceiveOnBurntHand
// (Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                 Location                       (Parm, IsPlainOldData)
// struct FVector                 Normal                         (Parm, IsPlainOldData)
// struct FVector                 Direction                      (Parm, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::ReceiveOnBurntHand(const struct FVector& Location, const struct FVector& Normal, const struct FVector& Direction, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.ReceiveOnBurntHand");

	AWKNDPlayerPawn_ReceiveOnBurntHand_Params params;
	params.Location = Location;
	params.Normal = Normal;
	params.Direction = Direction;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.PlayDisarmMontage
// (Event, Public, BlueprintEvent)
// Parameters:
// EDisarmType                    DisarmedHand                   (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::PlayDisarmMontage(EDisarmType DisarmedHand)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.PlayDisarmMontage");

	AWKNDPlayerPawn_PlayDisarmMontage_Params params;
	params.DisarmedHand = DisarmedHand;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.OnEnemySaberStrike
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARPOCPickup_Lightsaber*  AttackingSaber                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           PlayerWasStruckBeforeBlock     (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::OnEnemySaberStrike(class ARPOCPickup_Lightsaber* AttackingSaber, bool PlayerWasStruckBeforeBlock)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.OnEnemySaberStrike");

	AWKNDPlayerPawn_OnEnemySaberStrike_Params params;
	params.AttackingSaber = AttackingSaber;
	params.PlayerWasStruckBeforeBlock = PlayerWasStruckBeforeBlock;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.LockCameraConstraint
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// bool                           lock                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnLocation                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void AWKNDPlayerPawn::LockCameraConstraint(bool lock, const struct FVector& ReturnLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.LockCameraConstraint");

	AWKNDPlayerPawn_LockCameraConstraint_Params params;
	params.lock = lock;
	params.ReturnLocation = ReturnLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.LockCameraBlackout
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 InitialImpact                  (Parm, IsPlainOldData)

void AWKNDPlayerPawn::LockCameraBlackout(const struct FVector& InitialImpact)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.LockCameraBlackout");

	AWKNDPlayerPawn_LockCameraBlackout_Params params;
	params.InitialImpact = InitialImpact;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.LockAllPlayerItems
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           lock                           (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::LockAllPlayerItems(bool lock)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.LockAllPlayerItems");

	AWKNDPlayerPawn_LockAllPlayerItems_Params params;
	params.lock = lock;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.IsPlayerHoldingLightsaber
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// bool                           bIsHolding                     (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// EControllerHand                Hand                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::IsPlayerHoldingLightsaber(bool* bIsHolding, EControllerHand* Hand)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.IsPlayerHoldingLightsaber");

	AWKNDPlayerPawn_IsPlayerHoldingLightsaber_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bIsHolding != nullptr)
		*bIsHolding = params.bIsHolding;
	if (Hand != nullptr)
		*Hand = params.Hand;
}


// Function WKND.WKNDPlayerPawn.IsPlayerHoldingHydrospanner
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// bool                           bIsHolding                     (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// EControllerHand                Hand                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::IsPlayerHoldingHydrospanner(bool* bIsHolding, EControllerHand* Hand)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.IsPlayerHoldingHydrospanner");

	AWKNDPlayerPawn_IsPlayerHoldingHydrospanner_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bIsHolding != nullptr)
		*bIsHolding = params.bIsHolding;
	if (Hand != nullptr)
		*Hand = params.Hand;
}


// Function WKND.WKNDPlayerPawn.IsPlayerHoldingActor
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class AActor*                  ActorToCheck                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsHolding                     (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// EControllerHand                Hand                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::IsPlayerHoldingActor(class AActor* ActorToCheck, bool* bIsHolding, EControllerHand* Hand)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.IsPlayerHoldingActor");

	AWKNDPlayerPawn_IsPlayerHoldingActor_Params params;
	params.ActorToCheck = ActorToCheck;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bIsHolding != nullptr)
		*bIsHolding = params.bIsHolding;
	if (Hand != nullptr)
		*Hand = params.Hand;
}


// Function WKND.WKNDPlayerPawn.IsNavMagnetCameraConstraintEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDPlayerPawn::IsNavMagnetCameraConstraintEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.IsNavMagnetCameraConstraintEnabled");

	AWKNDPlayerPawn_IsNavMagnetCameraConstraintEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerPawn.IsMotionControllerTracked
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EControllerHand                ControllerType                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDPlayerPawn::IsMotionControllerTracked(EControllerHand ControllerType)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.IsMotionControllerTracked");

	AWKNDPlayerPawn_IsMotionControllerTracked_Params params;
	params.ControllerType = ControllerType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerPawn.IsMandatedPointBlue
// (Event, Public, BlueprintEvent)
// Parameters:
// int                            pointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDPlayerPawn::IsMandatedPointBlue(int pointIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.IsMandatedPointBlue");

	AWKNDPlayerPawn_IsMandatedPointBlue_Params params;
	params.pointIndex = pointIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerPawn.IsLockedAtAStoryPoint
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDPlayerPawn::IsLockedAtAStoryPoint()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.IsLockedAtAStoryPoint");

	AWKNDPlayerPawn_IsLockedAtAStoryPoint_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerPawn.IsFrontendInteractionEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDPlayerPawn::IsFrontendInteractionEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.IsFrontendInteractionEnabled");

	AWKNDPlayerPawn_IsFrontendInteractionEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerPawn.IsClimbing
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDPlayerPawn::IsClimbing()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.IsClimbing");

	AWKNDPlayerPawn_IsClimbing_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerPawn.IsCameraCollisionActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                  CheckActor                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDPlayerPawn::IsCameraCollisionActor(class AActor* CheckActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.IsCameraCollisionActor");

	AWKNDPlayerPawn_IsCameraCollisionActor_Params params;
	params.CheckActor = CheckActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerPawn.InvalidateRecenterTransform
// (Final, Native, Protected, BlueprintCallable)

void AWKNDPlayerPawn::InvalidateRecenterTransform()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.InvalidateRecenterTransform");

	AWKNDPlayerPawn_InvalidateRecenterTransform_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.HidePlayerItemsAndHands
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bHide                          (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::HidePlayerItemsAndHands(bool bHide)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.HidePlayerItemsAndHands");

	AWKNDPlayerPawn_HidePlayerItemsAndHands_Params params;
	params.bHide = bHide;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.HidePlayerItems
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bHide                          (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::HidePlayerItems(bool bHide)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.HidePlayerItems");

	AWKNDPlayerPawn_HidePlayerItems_Params params;
	params.bHide = bHide;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.HidePlayerHands
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bHide                          (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::HidePlayerHands(bool bHide)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.HidePlayerHands");

	AWKNDPlayerPawn_HidePlayerHands_Params params;
	params.bHide = bHide;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.GetThrottledDistance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AWKNDPlayerPawn::GetThrottledDistance()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.GetThrottledDistance");

	AWKNDPlayerPawn_GetThrottledDistance_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerPawn.GetStoryPointLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector AWKNDPlayerPawn::GetStoryPointLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.GetStoryPointLocation");

	AWKNDPlayerPawn_GetStoryPointLocation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerPawn.GetSnapTurnEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EWKNDHands                     hands                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDPlayerPawn::GetSnapTurnEnabled(EWKNDHands hands)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.GetSnapTurnEnabled");

	AWKNDPlayerPawn_GetSnapTurnEnabled_Params params;
	params.hands = hands;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerPawn.GetSidewaysSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AWKNDPlayerPawn::GetSidewaysSpeed()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.GetSidewaysSpeed");

	AWKNDPlayerPawn_GetSidewaysSpeed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerPawn.GetSeatedCameraOffset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AWKNDPlayerPawn::GetSeatedCameraOffset()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.GetSeatedCameraOffset");

	AWKNDPlayerPawn_GetSeatedCameraOffset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerPawn.GetRecenter
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTransform              recenterTansform               (Parm, OutParm, IsPlainOldData)
// bool                           Valid                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::GetRecenter(struct FTransform* recenterTansform, bool* Valid)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.GetRecenter");

	AWKNDPlayerPawn_GetRecenter_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (recenterTansform != nullptr)
		*recenterTansform = params.recenterTansform;
	if (Valid != nullptr)
		*Valid = params.Valid;
}


// Function WKND.WKNDPlayerPawn.GetPlayerLightsaber
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* AWKNDPlayerPawn::GetPlayerLightsaber()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.GetPlayerLightsaber");

	AWKNDPlayerPawn_GetPlayerLightsaber_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerPawn.GetPlayerItems
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FPlayerItems            outItems                       (Parm, OutParm)

void AWKNDPlayerPawn::GetPlayerItems(struct FPlayerItems* outItems)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.GetPlayerItems");

	AWKNDPlayerPawn_GetPlayerItems_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (outItems != nullptr)
		*outItems = params.outItems;
}


// Function WKND.WKNDPlayerPawn.GetMovementContext
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMovementContext               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EMovementContext AWKNDPlayerPawn::GetMovementContext()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.GetMovementContext");

	AWKNDPlayerPawn_GetMovementContext_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerPawn.GetMotionController
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EControllerHand                ControllerType                 (Parm, ZeroConstructor, IsPlainOldData)
// class AWKNDMotionController*   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AWKNDMotionController* AWKNDPlayerPawn::GetMotionController(EControllerHand ControllerType)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.GetMotionController");

	AWKNDPlayerPawn_GetMotionController_Params params;
	params.ControllerType = ControllerType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerPawn.GetLastValidLocationBeforeBlackout
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 LastValidLocation              (Parm, OutParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDPlayerPawn::GetLastValidLocationBeforeBlackout(struct FVector* LastValidLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.GetLastValidLocationBeforeBlackout");

	AWKNDPlayerPawn_GetLastValidLocationBeforeBlackout_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LastValidLocation != nullptr)
		*LastValidLocation = params.LastValidLocation;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerPawn.GetHandBones
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FWKNDHandBones          ReturnValue                    (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm)

struct FWKNDHandBones AWKNDPlayerPawn::GetHandBones()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.GetHandBones");

	AWKNDPlayerPawn_GetHandBones_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerPawn.GetForwardSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AWKNDPlayerPawn::GetForwardSpeed()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.GetForwardSpeed");

	AWKNDPlayerPawn_GetForwardSpeed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerPawn.GetDeflectionToleranceMultiplierActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDPlayerPawn::GetDeflectionToleranceMultiplierActive()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.GetDeflectionToleranceMultiplierActive");

	AWKNDPlayerPawn_GetDeflectionToleranceMultiplierActive_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerPawn.GetDeflectionToleranceMultiplier
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AWKNDPlayerPawn::GetDeflectionToleranceMultiplier()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.GetDeflectionToleranceMultiplier");

	AWKNDPlayerPawn_GetDeflectionToleranceMultiplier_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerPawn.GetCurrentCameraConstraintPoint
// (Native, Event, Public, HasOutParms, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                 ConstraintPoint                (Parm, OutParm, IsPlainOldData)
// float                          StartDistance                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          EndDistance                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDPlayerPawn::GetCurrentCameraConstraintPoint(float StartDistance, float EndDistance, struct FVector* ConstraintPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.GetCurrentCameraConstraintPoint");

	AWKNDPlayerPawn_GetCurrentCameraConstraintPoint_Params params;
	params.StartDistance = StartDistance;
	params.EndDistance = EndDistance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ConstraintPoint != nullptr)
		*ConstraintPoint = params.ConstraintPoint;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerPawn.GetClosestRecenteringPoint
// (Event, Public, HasOutParms, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                 CheckLocation                  (Parm, IsPlainOldData)
// struct FTransform              outTransform                   (Parm, OutParm, IsPlainOldData)
// int                            outIndex                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           found                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::GetClosestRecenteringPoint(const struct FVector& CheckLocation, struct FTransform* outTransform, int* outIndex, bool* found)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.GetClosestRecenteringPoint");

	AWKNDPlayerPawn_GetClosestRecenteringPoint_Params params;
	params.CheckLocation = CheckLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (outTransform != nullptr)
		*outTransform = params.outTransform;
	if (outIndex != nullptr)
		*outIndex = params.outIndex;
	if (found != nullptr)
		*found = params.found;
}


// Function WKND.WKNDPlayerPawn.GetClosestMandatedPoint
// (Event, Public, HasOutParms, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                 CheckLocation                  (Parm, IsPlainOldData)
// struct FTransform              outTransform                   (Parm, OutParm, IsPlainOldData)
// int                            outIndex                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           found                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::GetClosestMandatedPoint(const struct FVector& CheckLocation, struct FTransform* outTransform, int* outIndex, bool* found)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.GetClosestMandatedPoint");

	AWKNDPlayerPawn_GetClosestMandatedPoint_Params params;
	params.CheckLocation = CheckLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (outTransform != nullptr)
		*outTransform = params.outTransform;
	if (outIndex != nullptr)
		*outIndex = params.outIndex;
	if (found != nullptr)
		*found = params.found;
}


// Function WKND.WKNDPlayerPawn.GetClimbDistanceThisFrame
// (Final, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AWKNDPlayerPawn::GetClimbDistanceThisFrame()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.GetClimbDistanceThisFrame");

	AWKNDPlayerPawn_GetClimbDistanceThisFrame_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerPawn.GetCameraConstraintReturnPoint
// (Native, Event, Public, HasOutParms, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                 ReturnPoint                    (Parm, OutParm, IsPlainOldData)
// float                          DistanceFromReturn             (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDPlayerPawn::GetCameraConstraintReturnPoint(struct FVector* ReturnPoint, float* DistanceFromReturn)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.GetCameraConstraintReturnPoint");

	AWKNDPlayerPawn_GetCameraConstraintReturnPoint_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ReturnPoint != nullptr)
		*ReturnPoint = params.ReturnPoint;
	if (DistanceFromReturn != nullptr)
		*DistanceFromReturn = params.DistanceFromReturn;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerPawn.GetCameraCollisionActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* AWKNDPlayerPawn::GetCameraCollisionActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.GetCameraCollisionActor");

	AWKNDPlayerPawn_GetCameraCollisionActor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerPawn.GetBackwardSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AWKNDPlayerPawn::GetBackwardSpeed()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.GetBackwardSpeed");

	AWKNDPlayerPawn_GetBackwardSpeed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerPawn.GetAudioMovementContext
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMovementContext               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EMovementContext AWKNDPlayerPawn::GetAudioMovementContext()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.GetAudioMovementContext");

	AWKNDPlayerPawn_GetAudioMovementContext_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerPawn.GetActorsToIgnoreForLocomotion
// (Final, Native, Public, HasOutParms)
// Parameters:
// TArray<class AActor*>          ignorables                     (Parm, OutParm, ZeroConstructor)

void AWKNDPlayerPawn::GetActorsToIgnoreForLocomotion(TArray<class AActor*>* ignorables)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.GetActorsToIgnoreForLocomotion");

	AWKNDPlayerPawn_GetActorsToIgnoreForLocomotion_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ignorables != nullptr)
		*ignorables = params.ignorables;
}


// Function WKND.WKNDPlayerPawn.FreezeCameraLocomotionInPlace
// (Final, Native, Public, BlueprintCallable)

void AWKNDPlayerPawn::FreezeCameraLocomotionInPlace()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.FreezeCameraLocomotionInPlace");

	AWKNDPlayerPawn_FreezeCameraLocomotionInPlace_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.EndFallingTimeline
// (Final, Native, Public, BlueprintCallable)

void AWKNDPlayerPawn::EndFallingTimeline()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.EndFallingTimeline");

	AWKNDPlayerPawn_EndFallingTimeline_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.EnablePlayerGrab
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bDisableGhosting               (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::EnablePlayerGrab(bool bDisableGhosting)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.EnablePlayerGrab");

	AWKNDPlayerPawn_EnablePlayerGrab_Params params;
	params.bDisableGhosting = bDisableGhosting;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.EnableNavMagnetCameraConstraint
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 InNavMagnetConstraintCenter    (Parm, IsPlainOldData)
// float                          EnageAtDistance                (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlackoutBeginFraction          (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlackoutEndFraction            (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::EnableNavMagnetCameraConstraint(const struct FVector& InNavMagnetConstraintCenter, float EnageAtDistance, float BlackoutBeginFraction, float BlackoutEndFraction)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.EnableNavMagnetCameraConstraint");

	AWKNDPlayerPawn_EnableNavMagnetCameraConstraint_Params params;
	params.InNavMagnetConstraintCenter = InNavMagnetConstraintCenter;
	params.EnageAtDistance = EnageAtDistance;
	params.BlackoutBeginFraction = BlackoutBeginFraction;
	params.BlackoutEndFraction = BlackoutEndFraction;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.EnableLocomotion
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   locoReason                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDPlayerPawn::EnableLocomotion(const struct FName& locoReason)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.EnableLocomotion");

	AWKNDPlayerPawn_EnableLocomotion_Params params;
	params.locoReason = locoReason;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerPawn.EnableHandGhosting
// (Final, Native, Public, BlueprintCallable)

void AWKNDPlayerPawn::EnableHandGhosting()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.EnableHandGhosting");

	AWKNDPlayerPawn_EnableHandGhosting_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.EnableFrontendInteraction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EControllerHand                ControllerHand                 (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::EnableFrontendInteraction(EControllerHand ControllerHand)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.EnableFrontendInteraction");

	AWKNDPlayerPawn_EnableFrontendInteraction_Params params;
	params.ControllerHand = ControllerHand;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.EnableCameraConstraintAuto
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           Enable                         (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::EnableCameraConstraintAuto(bool Enable)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.EnableCameraConstraintAuto");

	AWKNDPlayerPawn_EnableCameraConstraintAuto_Params params;
	params.Enable = Enable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.DropHeldObject
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  ObjectToDrop                   (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::DropHeldObject(class AActor* ObjectToDrop)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.DropHeldObject");

	AWKNDPlayerPawn_DropHeldObject_Params params;
	params.ObjectToDrop = ObjectToDrop;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.Disarm
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Enemy                          (Parm, ZeroConstructor, IsPlainOldData)
// EDisarmType                    DisarmedHand                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          Force                          (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::Disarm(class AActor* Enemy, EDisarmType DisarmedHand, float Force)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.Disarm");

	AWKNDPlayerPawn_Disarm_Params params;
	params.Enemy = Enemy;
	params.DisarmedHand = DisarmedHand;
	params.Force = Force;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.DisablePlayerGrab
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnableGhosting                (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::DisablePlayerGrab(bool bEnableGhosting)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.DisablePlayerGrab");

	AWKNDPlayerPawn_DisablePlayerGrab_Params params;
	params.bEnableGhosting = bEnableGhosting;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.DisableNavMagnetCameraConstraint
// (Final, Native, Public, BlueprintCallable)

void AWKNDPlayerPawn::DisableNavMagnetCameraConstraint()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.DisableNavMagnetCameraConstraint");

	AWKNDPlayerPawn_DisableNavMagnetCameraConstraint_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.DisableLocomotion
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   locoReason                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDPlayerPawn::DisableLocomotion(const struct FName& locoReason)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.DisableLocomotion");

	AWKNDPlayerPawn_DisableLocomotion_Params params;
	params.locoReason = locoReason;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerPawn.DisableFrontendInteraction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EControllerHand                ControllerHand                 (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::DisableFrontendInteraction(EControllerHand ControllerHand)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.DisableFrontendInteraction");

	AWKNDPlayerPawn_DisableFrontendInteraction_Params params;
	params.ControllerHand = ControllerHand;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.DetermineNavigationGround
// (Final, Native, Protected, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 projectedToNavmesh             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 navigationGround               (Parm, OutParm, IsPlainOldData)
// bool                           navigationGroundInit           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           locationInvalid                (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::DetermineNavigationGround(const struct FVector& projectedToNavmesh, struct FVector* navigationGround, bool* navigationGroundInit, bool* locationInvalid)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.DetermineNavigationGround");

	AWKNDPlayerPawn_DetermineNavigationGround_Params params;
	params.projectedToNavmesh = projectedToNavmesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (navigationGround != nullptr)
		*navigationGround = params.navigationGround;
	if (navigationGroundInit != nullptr)
		*navigationGroundInit = params.navigationGroundInit;
	if (locationInvalid != nullptr)
		*locationInvalid = params.locationInvalid;
}


// Function WKND.WKNDPlayerPawn.ControlsLimitedBySaberHold
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDPlayerPawn::ControlsLimitedBySaberHold()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.ControlsLimitedBySaberHold");

	AWKNDPlayerPawn_ControlsLimitedBySaberHold_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerPawn.ConstrainCameraToRadiusWhenImmobile
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           constrain                      (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::ConstrainCameraToRadiusWhenImmobile(bool constrain)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.ConstrainCameraToRadiusWhenImmobile");

	AWKNDPlayerPawn_ConstrainCameraToRadiusWhenImmobile_Params params;
	params.constrain = constrain;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.ConstrainCameraToRadius
// (Final, Native, Public, BlueprintCallable)

void AWKNDPlayerPawn::ConstrainCameraToRadius()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.ConstrainCameraToRadius");

	AWKNDPlayerPawn_ConstrainCameraToRadius_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.ClimbShock
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Magnitude                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::ClimbShock(float Magnitude, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.ClimbShock");

	AWKNDPlayerPawn_ClimbShock_Params params;
	params.Magnitude = Magnitude;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.ClearBonusDamage
// (Final, Native, Public, BlueprintCallable)

void AWKNDPlayerPawn::ClearBonusDamage()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.ClearBonusDamage");

	AWKNDPlayerPawn_ClearBonusDamage_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.ChangeVRMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVRModeEnum                    VRMode                         (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::ChangeVRMode(EVRModeEnum VRMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.ChangeVRMode");

	AWKNDPlayerPawn_ChangeVRMode_Params params;
	params.VRMode = VRMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.CameraTeleport
// (Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                 Location                       (Parm, IsPlainOldData)
// struct FRotator                Rotator                        (Parm, IsPlainOldData)

void AWKNDPlayerPawn::CameraTeleport(const struct FVector& Location, const struct FRotator& Rotator)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.CameraTeleport");

	AWKNDPlayerPawn_CameraTeleport_Params params;
	params.Location = Location;
	params.Rotator = Rotator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.CameraShouldRecenterDuringTurns
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDPlayerPawn::CameraShouldRecenterDuringTurns()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.CameraShouldRecenterDuringTurns");

	AWKNDPlayerPawn_CameraShouldRecenterDuringTurns_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerPawn.CameraIsFrozenForAllMovement
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDPlayerPawn::CameraIsFrozenForAllMovement()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.CameraIsFrozenForAllMovement");

	AWKNDPlayerPawn_CameraIsFrozenForAllMovement_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerPawn.CameraIsConstrainedToRadius
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDPlayerPawn::CameraIsConstrainedToRadius()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.CameraIsConstrainedToRadius");

	AWKNDPlayerPawn_CameraIsConstrainedToRadius_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerPawn.CameraConstraintVolumeFound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDPlayerPawn::CameraConstraintVolumeFound()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.CameraConstraintVolumeFound");

	AWKNDPlayerPawn_CameraConstraintVolumeFound_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerPawn.CameraConstraintUpdate
// (Final, Native, Public, BlueprintCallable)

void AWKNDPlayerPawn::CameraConstraintUpdate()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.CameraConstraintUpdate");

	AWKNDPlayerPawn_CameraConstraintUpdate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.CameraConstraintTeleport
// (Native, Event, Public, HasOutParms, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                 cameraConstraintPoint          (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void AWKNDPlayerPawn::CameraConstraintTeleport(const struct FVector& cameraConstraintPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.CameraConstraintTeleport");

	AWKNDPlayerPawn_CameraConstraintTeleport_Params params;
	params.cameraConstraintPoint = cameraConstraintPoint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.CameraConstraintDebugDraw
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// bool                           DrawConstraintPoint            (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ConstraintPoint                (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          StartDistance                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          EndDistance                    (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::CameraConstraintDebugDraw(bool DrawConstraintPoint, const struct FVector& ConstraintPoint, float StartDistance, float EndDistance)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.CameraConstraintDebugDraw");

	AWKNDPlayerPawn_CameraConstraintDebugDraw_Params params;
	params.DrawConstraintPoint = DrawConstraintPoint;
	params.ConstraintPoint = ConstraintPoint;
	params.StartDistance = StartDistance;
	params.EndDistance = EndDistance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.CalculateManualBlackout
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          DistanceFromReturn             (Parm, ZeroConstructor, IsPlainOldData)
// float                          StartBlackoutDistance          (Parm, ZeroConstructor, IsPlainOldData)
// float                          CompleteBlackoutDistance       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AWKNDPlayerPawn::CalculateManualBlackout(float DistanceFromReturn, float StartBlackoutDistance, float CompleteBlackoutDistance)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.CalculateManualBlackout");

	AWKNDPlayerPawn_CalculateManualBlackout_Params params;
	params.DistanceFromReturn = DistanceFromReturn;
	params.StartBlackoutDistance = StartBlackoutDistance;
	params.CompleteBlackoutDistance = CompleteBlackoutDistance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDPlayerPawn.BroadcastMandatedSlideAsTeleport
// (Event, Public, BlueprintEvent)
// Parameters:
// class AWKNDMotionController*   teleportingController          (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::BroadcastMandatedSlideAsTeleport(class AWKNDMotionController* teleportingController)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.BroadcastMandatedSlideAsTeleport");

	AWKNDPlayerPawn_BroadcastMandatedSlideAsTeleport_Params params;
	params.teleportingController = teleportingController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.BeginFallHaptics
// (Event, Public, BlueprintEvent)
// Parameters:
// float                          FallDistance                   (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDPlayerPawn::BeginFallHaptics(float FallDistance)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.BeginFallHaptics");

	AWKNDPlayerPawn_BeginFallHaptics_Params params;
	params.FallDistance = FallDistance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.AssignRecenterTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform              RCTransform                    (Parm, IsPlainOldData)

void AWKNDPlayerPawn::AssignRecenterTransform(const struct FTransform& RCTransform)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.AssignRecenterTransform");

	AWKNDPlayerPawn_AssignRecenterTransform_Params params;
	params.RCTransform = RCTransform;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDPlayerPawn.AssignRecenterAtFeet
// (Final, Native, Public, BlueprintCallable)

void AWKNDPlayerPawn::AssignRecenterAtFeet()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDPlayerPawn.AssignRecenterAtFeet");

	AWKNDPlayerPawn_AssignRecenterAtFeet_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDSaveGame.SetCustomizationSettings
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FCustomizationSettings  NewCustomizationSettings       (ConstParm, Parm, OutParm, ReferenceParm)

void UWKNDSaveGame::SetCustomizationSettings(const struct FCustomizationSettings& NewCustomizationSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSaveGame.SetCustomizationSettings");

	UWKNDSaveGame_SetCustomizationSettings_Params params;
	params.NewCustomizationSettings = NewCustomizationSettings;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDSaveGame.SaveLightsaberHiltSetting
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   SelectedLightsaberHilt         (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDSaveGame::SaveLightsaberHiltSetting(const struct FName& SelectedLightsaberHilt)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSaveGame.SaveLightsaberHiltSetting");

	UWKNDSaveGame_SaveLightsaberHiltSetting_Params params;
	params.SelectedLightsaberHilt = SelectedLightsaberHilt;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDSaveGame.SaveLightsaberHiltAndColorSettings
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   SelectedLightsaberHilt         (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   SelectedLightsaberColor        (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDSaveGame::SaveLightsaberHiltAndColorSettings(const struct FName& SelectedLightsaberHilt, const struct FName& SelectedLightsaberColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSaveGame.SaveLightsaberHiltAndColorSettings");

	UWKNDSaveGame_SaveLightsaberHiltAndColorSettings_Params params;
	params.SelectedLightsaberHilt = SelectedLightsaberHilt;
	params.SelectedLightsaberColor = SelectedLightsaberColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDSaveGame.SaveLightsaberColorSetting
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   SelectedLightsaberColor        (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDSaveGame::SaveLightsaberColorSetting(const struct FName& SelectedLightsaberColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSaveGame.SaveLightsaberColorSetting");

	UWKNDSaveGame_SaveLightsaberColorSetting_Params params;
	params.SelectedLightsaberColor = SelectedLightsaberColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDSaveGame.SaveDojoEnvironmentSetting
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   SelectedDojoEnvironment        (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   DojoEnvironmentLevelName       (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDSaveGame::SaveDojoEnvironmentSetting(const struct FName& SelectedDojoEnvironment, const struct FName& DojoEnvironmentLevelName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSaveGame.SaveDojoEnvironmentSetting");

	UWKNDSaveGame_SaveDojoEnvironmentSetting_Params params;
	params.SelectedDojoEnvironment = SelectedDojoEnvironment;
	params.DojoEnvironmentLevelName = DojoEnvironmentLevelName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDSaveGame.GetCustomizationSettings
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FCustomizationSettings  ReturnValue                    (Parm, OutParm, ReturnParm)

struct FCustomizationSettings UWKNDSaveGame::GetCustomizationSettings()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSaveGame.GetCustomizationSettings");

	UWKNDSaveGame_GetCustomizationSettings_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDSnapRotationComponent.UpdateVRCameraOffset
// (Native, Public, BlueprintCallable)

void UWKNDSnapRotationComponent::UpdateVRCameraOffset()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSnapRotationComponent.UpdateVRCameraOffset");

	UWKNDSnapRotationComponent_UpdateVRCameraOffset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDSnapRotationComponent.Snap
// (Native, Public, BlueprintCallable)
// Parameters:
// float                          Direction                      (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDSnapRotationComponent::Snap(float Direction)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSnapRotationComponent.Snap");

	UWKNDSnapRotationComponent_Snap_Params params;
	params.Direction = Direction;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDSnapRotationComponent.ResetVRCameraOffset
// (Native, Public, BlueprintCallable)

void UWKNDSnapRotationComponent::ResetVRCameraOffset()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSnapRotationComponent.ResetVRCameraOffset");

	UWKNDSnapRotationComponent_ResetVRCameraOffset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDSnapRotationComponent.ResetInitialRotation
// (Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                NewInitialRotation             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void UWKNDSnapRotationComponent::ResetInitialRotation(const struct FRotator& NewInitialRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSnapRotationComponent.ResetInitialRotation");

	UWKNDSnapRotationComponent_ResetInitialRotation_Params params;
	params.NewInitialRotation = NewInitialRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDSnapRotationComponent.ResetDesiredOffsetStack
// (Native, Public, BlueprintCallable)

void UWKNDSnapRotationComponent::ResetDesiredOffsetStack()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSnapRotationComponent.ResetDesiredOffsetStack");

	UWKNDSnapRotationComponent_ResetDesiredOffsetStack_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDSnapRotationComponent.PushRotationOffset
// (Native, Public, BlueprintCallable)

void UWKNDSnapRotationComponent::PushRotationOffset()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSnapRotationComponent.PushRotationOffset");

	UWKNDSnapRotationComponent_PushRotationOffset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDSnapRotationComponent.PopRotationOffset
// (Native, Public, BlueprintCallable)

void UWKNDSnapRotationComponent::PopRotationOffset()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSnapRotationComponent.PopRotationOffset");

	UWKNDSnapRotationComponent_PopRotationOffset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDSnapRotationComponent.InstantUpdateSnap
// (Native, Public, BlueprintCallable)

void UWKNDSnapRotationComponent::InstantUpdateSnap()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSnapRotationComponent.InstantUpdateSnap");

	UWKNDSnapRotationComponent_InstantUpdateSnap_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDSnapRotationComponent.GetTurnDelta
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                ReturnValue                    (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, IsPlainOldData)

struct FRotator UWKNDSnapRotationComponent::GetTurnDelta()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSnapRotationComponent.GetTurnDelta");

	UWKNDSnapRotationComponent_GetTurnDelta_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDSnapRotationComponent.GetFadeOutTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UWKNDSnapRotationComponent::GetFadeOutTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSnapRotationComponent.GetFadeOutTime");

	UWKNDSnapRotationComponent_GetFadeOutTime_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDSnapRotationComponent.GetDesiredRotationOffset
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FRotator UWKNDSnapRotationComponent::GetDesiredRotationOffset()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSnapRotationComponent.GetDesiredRotationOffset");

	UWKNDSnapRotationComponent_GetDesiredRotationOffset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDSnapRotationComponent.ApplySnapRotation
// (Native, Public, BlueprintCallable)

void UWKNDSnapRotationComponent::ApplySnapRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSnapRotationComponent.ApplySnapRotation");

	UWKNDSnapRotationComponent_ApplySnapRotation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDSquadLeader.StopSquad
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USquadName*              SquadName                      (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDSquadLeader::StopSquad(class USquadName* SquadName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSquadLeader.StopSquad");

	UWKNDSquadLeader_StopSquad_Params params;
	params.SquadName = SquadName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDSquadLeader.StopActionCooldown
// (Final, Native, Public, BlueprintCallable)

void UWKNDSquadLeader::StopActionCooldown()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSquadLeader.StopActionCooldown");

	UWKNDSquadLeader_StopActionCooldown_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDSquadLeader.StartSquad
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USquadName*              SquadName                      (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDSquadLeader::StartSquad(class USquadName* SquadName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSquadLeader.StartSquad");

	UWKNDSquadLeader_StartSquad_Params params;
	params.SquadName = SquadName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDSquadLeader.StartActionCooldown
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          cooldown                       (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDSquadLeader::StartActionCooldown(float cooldown)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSquadLeader.StartActionCooldown");

	UWKNDSquadLeader_StartActionCooldown_Params params;
	params.cooldown = cooldown;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDSquadLeader.RemoveFromSquad
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  toRemove                       (Parm, ZeroConstructor, IsPlainOldData)
// class USquadName*              SquadName                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UWKNDSquadLeader::RemoveFromSquad(class AActor* toRemove, class USquadName* SquadName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSquadLeader.RemoveFromSquad");

	UWKNDSquadLeader_RemoveFromSquad_Params params;
	params.toRemove = toRemove;
	params.SquadName = SquadName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDSquadLeader.OpenSquad
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USquadName*              SquadName                      (Parm, ZeroConstructor, IsPlainOldData)
// class USquadOrders*            SquadOrders                    (Parm, ZeroConstructor, IsPlainOldData)
// EAISquadAction                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EAISquadAction UWKNDSquadLeader::OpenSquad(class USquadName* SquadName, class USquadOrders* SquadOrders)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSquadLeader.OpenSquad");

	UWKNDSquadLeader_OpenSquad_Params params;
	params.SquadName = SquadName;
	params.SquadOrders = SquadOrders;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDSquadLeader.OpenNewSquad
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USquadName*              SquadName                      (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ordersClass                    (Parm, ZeroConstructor, IsPlainOldData)
// class USquadOrders*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class USquadOrders* UWKNDSquadLeader::OpenNewSquad(class USquadName* SquadName, class UClass* ordersClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSquadLeader.OpenNewSquad");

	UWKNDSquadLeader_OpenNewSquad_Params params;
	params.SquadName = SquadName;
	params.ordersClass = ordersClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDSquadLeader.OnAction
// (Event, Public, BlueprintEvent)

void UWKNDSquadLeader::OnAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSquadLeader.OnAction");

	UWKNDSquadLeader_OnAction_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDSquadLeader.GetRandomCombatant
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* UWKNDSquadLeader::GetRandomCombatant()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSquadLeader.GetRandomCombatant");

	UWKNDSquadLeader_GetRandomCombatant_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDSquadLeader.GetActionCooldown
// (Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UWKNDSquadLeader::GetActionCooldown()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSquadLeader.GetActionCooldown");

	UWKNDSquadLeader_GetActionCooldown_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDSquadLeader.CountSquadSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UWKNDSquadLeader::CountSquadSize()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSquadLeader.CountSquadSize");

	UWKNDSquadLeader_CountSquadSize_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDSquadLeader.CloseSquad
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USquadName*              SquadName                      (Parm, ZeroConstructor, IsPlainOldData)
// EAISquadAction                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EAISquadAction UWKNDSquadLeader::CloseSquad(class USquadName* SquadName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSquadLeader.CloseSquad");

	UWKNDSquadLeader_CloseSquad_Params params;
	params.SquadName = SquadName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDSquadLeader.AddToSquad
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  toAdd                          (Parm, ZeroConstructor, IsPlainOldData)
// class USquadName*              SquadName                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UWKNDSquadLeader::AddToSquad(class AActor* toAdd, class USquadName* SquadName)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSquadLeader.AddToSquad");

	UWKNDSquadLeader_AddToSquad_Params params;
	params.toAdd = toAdd;
	params.SquadName = SquadName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDSubtitle.UpdateTransform
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          DeltaSeconds                   (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDSubtitle::UpdateTransform(float DeltaSeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSubtitle.UpdateTransform");

	AWKNDSubtitle_UpdateTransform_Params params;
	params.DeltaSeconds = DeltaSeconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDSubtitle.SplitOverflowText
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FText                   InText                         (Parm)
// struct FText                   outOverflowText                (Parm, OutParm)
// int                            outTextWordCount               (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText AWKNDSubtitle::SplitOverflowText(const struct FText& InText, struct FText* outOverflowText, int* outTextWordCount)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSubtitle.SplitOverflowText");

	AWKNDSubtitle_SplitOverflowText_Params params;
	params.InText = InText;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (outOverflowText != nullptr)
		*outOverflowText = params.outOverflowText;
	if (outTextWordCount != nullptr)
		*outTextWordCount = params.outTextWordCount;

	return params.ReturnValue;
}


// Function WKND.WKNDSubtitle.ShowSubtitle
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor            TextColor                      (Parm, IsPlainOldData)
// class AActor*                  speakingActor                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FText                   SubtitleText                   (Parm)
// struct FText                   SpeakerName                    (Parm)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDSubtitle::ShowSubtitle(const struct FLinearColor& TextColor, class AActor* speakingActor, const struct FText& SubtitleText, const struct FText& SpeakerName, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSubtitle.ShowSubtitle");

	AWKNDSubtitle_ShowSubtitle_Params params;
	params.TextColor = TextColor;
	params.speakingActor = speakingActor;
	params.SubtitleText = SubtitleText;
	params.SpeakerName = SpeakerName;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDSubtitle.ShiftText
// (Event, Public, BlueprintEvent)
// Parameters:
// float                          Offset                         (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDSubtitle::ShiftText(float Offset)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSubtitle.ShiftText");

	AWKNDSubtitle_ShiftText_Params params;
	params.Offset = Offset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDSubtitle.SetScreenPositionOffset
// (Event, Public, BlueprintEvent)
// Parameters:
// int                            Offset                         (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDSubtitle::SetScreenPositionOffset(int Offset)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSubtitle.SetScreenPositionOffset");

	AWKNDSubtitle_SetScreenPositionOffset_Params params;
	params.Offset = Offset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDSubtitle.OnShowSubtitle
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AWKNDSubtitle::OnShowSubtitle()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSubtitle.OnShowSubtitle");

	AWKNDSubtitle_OnShowSubtitle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDSubtitle.OnHidden
// (Event, Public, BlueprintEvent)

void AWKNDSubtitle::OnHidden()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSubtitle.OnHidden");

	AWKNDSubtitle_OnHidden_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDSubtitle.HideSubtitle
// (Final, Native, Public, BlueprintCallable)

void AWKNDSubtitle::HideSubtitle()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSubtitle.HideSubtitle");

	AWKNDSubtitle_HideSubtitle_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDSubtitle.HasPendingText
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDSubtitle::HasPendingText()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSubtitle.HasPendingText");

	AWKNDSubtitle_HasPendingText_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDSubtitle.GetVerticalSize
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AWKNDSubtitle::GetVerticalSize()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSubtitle.GetVerticalSize");

	AWKNDSubtitle_GetVerticalSize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDSubtitle.GetTargetTransform
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 outPos                         (Parm, OutParm, IsPlainOldData)
// struct FRotator                outRot                         (Parm, OutParm, IsPlainOldData)
// struct FVector                 outScale                       (Parm, OutParm, IsPlainOldData)
// float                          outAngleToPlayer               (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void AWKNDSubtitle::GetTargetTransform(struct FVector* outPos, struct FRotator* outRot, struct FVector* outScale, float* outAngleToPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSubtitle.GetTargetTransform");

	AWKNDSubtitle_GetTargetTransform_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (outPos != nullptr)
		*outPos = params.outPos;
	if (outRot != nullptr)
		*outRot = params.outRot;
	if (outScale != nullptr)
		*outScale = params.outScale;
	if (outAngleToPlayer != nullptr)
		*outAngleToPlayer = params.outAngleToPlayer;
}


// Function WKND.WKNDSubtitle.GetApproximateDuration
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FText                   InText                         (Parm)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AWKNDSubtitle::GetApproximateDuration(const struct FText& InText)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSubtitle.GetApproximateDuration");

	AWKNDSubtitle_GetApproximateDuration_Params params;
	params.InText = InText;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDSubtitle.FormatLineSpacing
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FText                   InText                         (Parm)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText AWKNDSubtitle::FormatLineSpacing(const struct FText& InText)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSubtitle.FormatLineSpacing");

	AWKNDSubtitle_FormatLineSpacing_Params params;
	params.InText = InText;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDSubtitleManager.TryAddSubtitleByEventName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FString                 EventName                      (Parm, ZeroConstructor)
// class AActor*                  Speaker                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDSubtitleManager::STATIC_TryAddSubtitleByEventName(const struct FString& EventName, class AActor* Speaker, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSubtitleManager.TryAddSubtitleByEventName");

	AWKNDSubtitleManager_TryAddSubtitleByEventName_Params params;
	params.EventName = EventName;
	params.Speaker = Speaker;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDSubtitleManager.TryAddSubtitle
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAkAudioEvent*           AudioEvent                     (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  Speaker                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDSubtitleManager::STATIC_TryAddSubtitle(class UAkAudioEvent* AudioEvent, class AActor* Speaker, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSubtitleManager.TryAddSubtitle");

	AWKNDSubtitleManager_TryAddSubtitle_Params params;
	params.AudioEvent = AudioEvent;
	params.Speaker = Speaker;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDSubtitleManager.SubtitleSpawnedEvent
// (Event, Public, BlueprintEvent)
// Parameters:
// class AWKNDSubtitle*           spawnedSubtitle                (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDSubtitleManager::SubtitleSpawnedEvent(class AWKNDSubtitle* spawnedSubtitle)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSubtitleManager.SubtitleSpawnedEvent");

	AWKNDSubtitleManager_SubtitleSpawnedEvent_Params params;
	params.spawnedSubtitle = spawnedSubtitle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDSubtitleManager.SubtitleHiddenEvent
// (Event, Public, BlueprintEvent)
// Parameters:
// class AWKNDSubtitle*           HiddenSubtitle                 (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDSubtitleManager::SubtitleHiddenEvent(class AWKNDSubtitle* HiddenSubtitle)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSubtitleManager.SubtitleHiddenEvent");

	AWKNDSubtitleManager_SubtitleHiddenEvent_Params params;
	params.HiddenSubtitle = HiddenSubtitle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDSubtitleManager.SetSubtitlesEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           IsEnabled                      (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDSubtitleManager::SetSubtitlesEnabled(bool IsEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSubtitleManager.SetSubtitlesEnabled");

	AWKNDSubtitleManager_SetSubtitlesEnabled_Params params;
	params.IsEnabled = IsEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDSubtitleManager.SetManagerInstance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AWKNDSubtitleManager*    ManagerInstance                (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDSubtitleManager::SetManagerInstance(class AWKNDSubtitleManager* ManagerInstance)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSubtitleManager.SetManagerInstance");

	AWKNDSubtitleManager_SetManagerInstance_Params params;
	params.ManagerInstance = ManagerInstance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDSubtitleManager.OnSubtitleHidden
// (Final, Native, Public)
// Parameters:
// class AWKNDSubtitle*           HiddenSubtitle                 (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDSubtitleManager::OnSubtitleHidden(class AWKNDSubtitle* HiddenSubtitle)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSubtitleManager.OnSubtitleHidden");

	AWKNDSubtitleManager_OnSubtitleHidden_Params params;
	params.HiddenSubtitle = HiddenSubtitle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDSubtitleManager.GetSubtitleManager
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AWKNDSubtitleManager*    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AWKNDSubtitleManager* AWKNDSubtitleManager::STATIC_GetSubtitleManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSubtitleManager.GetSubtitleManager");

	AWKNDSubtitleManager_GetSubtitleManager_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDSubtitleManager.GetSubtitle
// (Final, Native, Public)
// Parameters:
// class AWKNDSubtitle*           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AWKNDSubtitle* AWKNDSubtitleManager::GetSubtitle()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSubtitleManager.GetSubtitle");

	AWKNDSubtitleManager_GetSubtitle_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDSubtitleManager.DestroySubtitlePool
// (Final, Native, Public, BlueprintCallable)

void AWKNDSubtitleManager::DestroySubtitlePool()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSubtitleManager.DestroySubtitlePool");

	AWKNDSubtitleManager_DestroySubtitlePool_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDSubtitleManager.ClearAllSubtitles
// (Final, Native, Public, BlueprintCallable)

void AWKNDSubtitleManager::ClearAllSubtitles()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSubtitleManager.ClearAllSubtitles");

	AWKNDSubtitleManager_ClearAllSubtitles_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDSubtitleManager.BuildSubtitlePool
// (Final, Native, Public, BlueprintCallable)

void AWKNDSubtitleManager::BuildSubtitlePool()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSubtitleManager.BuildSubtitlePool");

	AWKNDSubtitleManager_BuildSubtitlePool_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDSubtitleManager.AddSubtitleByEventName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FString                 EventName                      (Parm, ZeroConstructor)
// class AActor*                  Speaker                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDSubtitleManager::AddSubtitleByEventName(const struct FString& EventName, class AActor* Speaker, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSubtitleManager.AddSubtitleByEventName");

	AWKNDSubtitleManager_AddSubtitleByEventName_Params params;
	params.EventName = EventName;
	params.Speaker = Speaker;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDSubtitleManager.AddSubtitle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAkAudioEvent*           AudioEvent                     (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  Speaker                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDSubtitleManager::AddSubtitle(class UAkAudioEvent* AudioEvent, class AActor* Speaker, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDSubtitleManager.AddSubtitle");

	AWKNDSubtitleManager_AddSubtitle_Params params;
	params.AudioEvent = AudioEvent;
	params.Speaker = Speaker;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDToolbeltComponent.Unassign
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class UXLABInteractiveGroup> Group                          (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDToolbeltComponent::Unassign(const TScriptInterface<class UXLABInteractiveGroup>& Group)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDToolbeltComponent.Unassign");

	UWKNDToolbeltComponent_Unassign_Params params;
	params.Group = Group;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDToolbeltComponent.SetEnableAssignedItems
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDToolbeltComponent::SetEnableAssignedItems(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDToolbeltComponent.SetEnableAssignedItems");

	UWKNDToolbeltComponent_SetEnableAssignedItems_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDToolbeltComponent.HasFreeSlots
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWKNDToolbeltComponent::HasFreeSlots()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDToolbeltComponent.HasFreeSlots");

	UWKNDToolbeltComponent_HasFreeSlots_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDToolbeltComponent.Assign
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class UXLABInteractiveGroup> Group                          (Parm, ZeroConstructor, IsPlainOldData)
// class UWKNDToolbeltSlotComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UWKNDToolbeltSlotComponent* UWKNDToolbeltComponent::Assign(const TScriptInterface<class UXLABInteractiveGroup>& Group)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDToolbeltComponent.Assign");

	UWKNDToolbeltComponent_Assign_Params params;
	params.Group = Group;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDToolbeltSlotComponent.OnInteraction
// (Final, Native, Private)
// Parameters:
// EXLABInteractionEventType      InteractionEventType           (Parm, ZeroConstructor, IsPlainOldData)
// TScriptInterface<class UXLABInteractionHandler> Handler                        (Parm, ZeroConstructor, IsPlainOldData)
// TScriptInterface<class UXLABInteractive> Interactive                    (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDToolbeltSlotComponent::OnInteraction(EXLABInteractionEventType InteractionEventType, const TScriptInterface<class UXLABInteractionHandler>& Handler, const TScriptInterface<class UXLABInteractive>& Interactive)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDToolbeltSlotComponent.OnInteraction");

	UWKNDToolbeltSlotComponent_OnInteraction_Params params;
	params.InteractionEventType = InteractionEventType;
	params.Handler = Handler;
	params.Interactive = Interactive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDToolbeltSlotComponent.GetAttachedActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* UWKNDToolbeltSlotComponent::GetAttachedActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDToolbeltSlotComponent.GetAttachedActor");

	UWKNDToolbeltSlotComponent_GetAttachedActor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDToolbeltSlotComponent.GetAssignedActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* UWKNDToolbeltSlotComponent::GetAssignedActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDToolbeltSlotComponent.GetAssignedActor");

	UWKNDToolbeltSlotComponent_GetAssignedActor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDToolbeltSlotComponent.ForceAttachAssignedActor
// (Final, Native, Public, BlueprintCallable)

void UWKNDToolbeltSlotComponent::ForceAttachAssignedActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDToolbeltSlotComponent.ForceAttachAssignedActor");

	UWKNDToolbeltSlotComponent_ForceAttachAssignedActor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDToolbeltSlotComponent.Assign
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class UXLABInteractiveGroup> Group                          (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDToolbeltSlotComponent::Assign(const TScriptInterface<class UXLABInteractiveGroup>& Group)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDToolbeltSlotComponent.Assign");

	UWKNDToolbeltSlotComponent_Assign_Params params;
	params.Group = Group;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDTrainingDroidComponent.UpdatePlayerAdjustment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AWKNDPlayerPawn*         Player                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDTrainingDroidComponent::UpdatePlayerAdjustment(class AWKNDPlayerPawn* Player, float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDTrainingDroidComponent.UpdatePlayerAdjustment");

	UWKNDTrainingDroidComponent_UpdatePlayerAdjustment_Params params;
	params.Player = Player;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDTrainingDroidComponent.UpdateLookAt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FName                   InSocketName                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDTrainingDroidComponent::UpdateLookAt(const struct FName& InSocketName, float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDTrainingDroidComponent.UpdateLookAt");

	UWKNDTrainingDroidComponent_UpdateLookAt_Params params;
	params.InSocketName = InSocketName;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDTrainingDroidComponent.UpdateGrille
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          AttackSpin                     (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDTrainingDroidComponent::UpdateGrille(float DeltaTime, float AttackSpin)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDTrainingDroidComponent.UpdateGrille");

	UWKNDTrainingDroidComponent_UpdateGrille_Params params;
	params.DeltaTime = DeltaTime;
	params.AttackSpin = AttackSpin;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDTrainingDroidComponent.UpdateDamage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDTrainingDroidComponent::UpdateDamage(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDTrainingDroidComponent.UpdateDamage");

	UWKNDTrainingDroidComponent_UpdateDamage_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDTrainingDroidComponent.UpdateBob
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDTrainingDroidComponent::UpdateBob(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDTrainingDroidComponent.UpdateBob");

	UWKNDTrainingDroidComponent_UpdateBob_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDTrainingDroidComponent.SetDamageState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            InState                        (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDTrainingDroidComponent::SetDamageState(int InState)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDTrainingDroidComponent.SetDamageState");

	UWKNDTrainingDroidComponent_SetDamageState_Params params;
	params.InState = InState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDTrainingDroidComponent.EnableGrille
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDTrainingDroidComponent::EnableGrille(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDTrainingDroidComponent.EnableGrille");

	UWKNDTrainingDroidComponent_EnableGrille_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDVisionManager.StopVisionRendering
// (Final, Native, Public, BlueprintCallable)

void AWKNDVisionManager::StopVisionRendering()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDVisionManager.StopVisionRendering");

	AWKNDVisionManager_StopVisionRendering_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDVisionManager.StartVisionRendering
// (Final, Native, Public, BlueprintCallable)

void AWKNDVisionManager::StartVisionRendering()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDVisionManager.StartVisionRendering");

	AWKNDVisionManager_StartVisionRendering_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDWaitForMontageEnd.NotifyEnded
// (Final, Native, Public)

void UWKNDWaitForMontageEnd::NotifyEnded()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDWaitForMontageEnd.NotifyEnded");

	UWKNDWaitForMontageEnd_NotifyEnded_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDWaitForMontageEnd.CreateMontageEndProxy
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class URPOCStagedCombatComponent* Target                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class UAnimMontage*            Montage                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          WaitToStartPlaying             (Parm, ZeroConstructor, IsPlainOldData)
// class UWKNDWaitForMontageEnd*  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UWKNDWaitForMontageEnd* UWKNDWaitForMontageEnd::STATIC_CreateMontageEndProxy(class URPOCStagedCombatComponent* Target, class UAnimMontage* Montage, float WaitToStartPlaying)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDWaitForMontageEnd.CreateMontageEndProxy");

	UWKNDWaitForMontageEnd_CreateMontageEndProxy_Params params;
	params.Target = Target;
	params.Montage = Montage;
	params.WaitToStartPlaying = WaitToStartPlaying;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDWorldsManager.OnPreLoadMap
// (Final, Native, Private)
// Parameters:
// struct FString                 LoadingMap                     (Parm, ZeroConstructor)

void UWKNDWorldsManager::OnPreLoadMap(const struct FString& LoadingMap)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDWorldsManager.OnPreLoadMap");

	UWKNDWorldsManager_OnPreLoadMap_Params params;
	params.LoadingMap = LoadingMap;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDWorldsManager.OnPostLoadMap
// (Final, Native, Private)
// Parameters:
// class UWorld*                  World                          (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDWorldsManager::OnPostLoadMap(class UWorld* World)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDWorldsManager.OnPostLoadMap");

	UWKNDWorldsManager_OnPostLoadMap_Params params;
	params.World = World;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDWorldsManager.DestroyCurrentWorld
// (Final, Native, Public, BlueprintCallable)

void UWKNDWorldsManager::DestroyCurrentWorld()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDWorldsManager.DestroyCurrentWorld");

	UWKNDWorldsManager_DestroyCurrentWorld_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDWorldsManager.CreateWorld
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FString                 Level                          (Parm, ZeroConstructor)
// struct FLatentActionInfo       LatentInfo                     (Parm)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UWKNDWorldsManager::CreateWorld(const struct FString& Level, const struct FLatentActionInfo& LatentInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDWorldsManager.CreateWorld");

	UWKNDWorldsManager_CreateWorld_Params params;
	params.Level = Level;
	params.LatentInfo = LatentInfo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDZoeyCharacterMovementComponent.SetMoveType
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Zoe                            (Parm, ZeroConstructor, IsPlainOldData)
// EBuddyAIMovementType           moveType                       (Parm, ZeroConstructor, IsPlainOldData)

void UWKNDZoeyCharacterMovementComponent::STATIC_SetMoveType(class AActor* Zoe, EBuddyAIMovementType moveType)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDZoeyCharacterMovementComponent.SetMoveType");

	UWKNDZoeyCharacterMovementComponent_SetMoveType_Params params;
	params.Zoe = Zoe;
	params.moveType = moveType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDZoeyDroidCharacter.WanderEnable
// (Final, Native, Public, BlueprintCallable)

void AWKNDZoeyDroidCharacter::WanderEnable()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDZoeyDroidCharacter.WanderEnable");

	AWKNDZoeyDroidCharacter_WanderEnable_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDZoeyDroidCharacter.WanderDisable
// (Final, Native, Public, BlueprintCallable)

void AWKNDZoeyDroidCharacter::WanderDisable()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDZoeyDroidCharacter.WanderDisable");

	AWKNDZoeyDroidCharacter_WanderDisable_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDZoeyDroidCharacter.PlayerSaberCut
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class ARPOCPickup_Lightsaber*  Saber                          (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDZoeyDroidCharacter::PlayerSaberCut(class ARPOCPickup_Lightsaber* Saber)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDZoeyDroidCharacter.PlayerSaberCut");

	AWKNDZoeyDroidCharacter_PlayerSaberCut_Params params;
	params.Saber = Saber;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDZoeyDroidCharacter.OnReachedTarget
// (Final, Native, Public)

void AWKNDZoeyDroidCharacter::OnReachedTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDZoeyDroidCharacter.OnReachedTarget");

	AWKNDZoeyDroidCharacter_OnReachedTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDZoeyDroidCharacter.IsMovingToActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  GoalActor                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWKNDZoeyDroidCharacter::IsMovingToActor(class AActor* GoalActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDZoeyDroidCharacter.IsMovingToActor");

	AWKNDZoeyDroidCharacter_IsMovingToActor_Params params;
	params.GoalActor = GoalActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function WKND.WKNDZoeyDroidCharacter.AnimProxy_ObjectThrow
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                           oneHand                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          throwDistance                  (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDZoeyDroidCharacter::AnimProxy_ObjectThrow(bool oneHand, float throwDistance)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDZoeyDroidCharacter.AnimProxy_ObjectThrow");

	AWKNDZoeyDroidCharacter_AnimProxy_ObjectThrow_Params params;
	params.oneHand = oneHand;
	params.throwDistance = throwDistance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDZoeyDroidCharacter.AnimProxy_ObjectPickup
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                           oneHand                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          Height                         (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDZoeyDroidCharacter::AnimProxy_ObjectPickup(bool oneHand, float Height)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDZoeyDroidCharacter.AnimProxy_ObjectPickup");

	AWKNDZoeyDroidCharacter_AnimProxy_ObjectPickup_Params params;
	params.oneHand = oneHand;
	params.Height = Height;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDZoeyDroidCharacter.AnimProxy_ObjectLetGo
// (Event, Public, BlueprintEvent)

void AWKNDZoeyDroidCharacter::AnimProxy_ObjectLetGo()
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDZoeyDroidCharacter.AnimProxy_ObjectLetGo");

	AWKNDZoeyDroidCharacter_AnimProxy_ObjectLetGo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDZoeyDroidCharacter.AnimProxy_ObjectHandOver
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                           oneHand                        (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDZoeyDroidCharacter::AnimProxy_ObjectHandOver(bool oneHand)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDZoeyDroidCharacter.AnimProxy_ObjectHandOver");

	AWKNDZoeyDroidCharacter_AnimProxy_ObjectHandOver_Params params;
	params.oneHand = oneHand;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDZoeyDroidCharacter.AnimProxy_ObjectCatchSuccess
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                           oneHand                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          catchAngle                     (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDZoeyDroidCharacter::AnimProxy_ObjectCatchSuccess(bool oneHand, float catchAngle)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDZoeyDroidCharacter.AnimProxy_ObjectCatchSuccess");

	AWKNDZoeyDroidCharacter_AnimProxy_ObjectCatchSuccess_Params params;
	params.oneHand = oneHand;
	params.catchAngle = catchAngle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDZoeyDroidCharacter.AnimProxy_ObjectCatchReady
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                           oneHand                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          catchAngle                     (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDZoeyDroidCharacter::AnimProxy_ObjectCatchReady(bool oneHand, float catchAngle)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDZoeyDroidCharacter.AnimProxy_ObjectCatchReady");

	AWKNDZoeyDroidCharacter_AnimProxy_ObjectCatchReady_Params params;
	params.oneHand = oneHand;
	params.catchAngle = catchAngle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function WKND.WKNDZoeyDroidCharacter.AnimProxy_ObjectCatchFail
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                           oneHand                        (Parm, ZeroConstructor, IsPlainOldData)

void AWKNDZoeyDroidCharacter::AnimProxy_ObjectCatchFail(bool oneHand)
{
	static auto fn = UObject::FindObject<UFunction>("Function WKND.WKNDZoeyDroidCharacter.AnimProxy_ObjectCatchFail");

	AWKNDZoeyDroidCharacter_AnimProxy_ObjectCatchFail_Params params;
	params.oneHand = oneHand;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
